//  See tms_cadviewer_noalias_xx_yy_xx.js for version desciption, and fixed log

var layer_vqrooms = new Array();
var layer_vqstickynotes = "";   // partially done
var layer_vqredlines = "";

var bMouseDown = false,
bTempMouseDown = false,
bPan = false,
firstx, firsty,
lastDX, lastDY,
TouchZoomFactor = 1.1,
floorplan_height,
floorplan_width,
tip_width=30,
tip,
vqRoomMouseSelect = false,

thumbsMode = false,

layer_vqdrag,

totalDragStart = 0,
string_X = "",
dx = 0,
dy = 0,
pdx = 0,
pdy = 0,

// 2.4_41  settings for layers and groups on/off
attr_1 = "{\"display\" : \"none\" }",
hide = jQuery.parseJSON(attr_1),
attr_2 = "{\"display\" : \"inline\" }",
show = jQuery.parseJSON(attr_2),

openHyperlinkInNewWindow = false,
hyperlinkNewWindowWidth = 200,
hyperlinkNewWindowHeight = 200,

cvjs_customToolTip = false,
locked = false,
rid;

/**
 * Set a custom tooltip overwriting the standard tooltip displaying either Name or Id
 * @param {boolean} customtooltip - true for custom tooltip, false otherwise
 */

function cvjs_setCustomToolTip(customtooltip){

	cvjs_customToolTip = customtooltip;
}

var cvjs_customToolTipArrayId = new Array();
var cvjs_customToolTipArrayContent = new Array();


/**
 * Show the standard tooltip in a given location
 * @param {string} tiptext - text of the tooltip to be displayed
 * @param {int} x - x coordinate location of the tooltip object to be displayed
 * @param {int} y - y coordinate location of the tooltip object to be displayed
 */

function cvjs_showToolTipLocation(tiptext, x, y){

	tip[cvjs_active_floorplan_div_nr].html(tiptext);

					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
	
	
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
	//console.log("absolute");
	   tip[cvjs_active_floorplan_div_nr].css("left", x+document.documentElement.scrollLeft+10).css("top", y+document.documentElement.scrollTop-25);
	}
	else{  // we have placed CV-JS inside a div and we have to make a relative position

		//console.log("inside");
		//console.log(position.left+" "+position.top+"tipText="+tipText+" e.clientX "+e.clientX+" e.clientY "+e.clientY+" "+document.documentElement.scrollLeft+" "+document.documentElement.scrollTop);
		//console.log(e.clientX-position.left+document.documentElement.scrollLeft+10);
		//console.log(e.clientY-position.top+document.documentElement.scrollTop-25);
		tip[cvjs_active_floorplan_div_nr].css("left", x-position.left+document.documentElement.scrollLeft+10).css("top", y-position.top+document.documentElement.scrollTop-25);
	}
	
/*	
	
	
	if (x > floorplan_width)
	   tip[cvjs_active_floorplan_div_nr].css("left", x+document.body.scrollLeft-tip_width-20).css("top", y+document.body.scrollTop-25);
	else
	   tip[cvjs_active_floorplan_div_nr].css("left", x+document.body.scrollLeft+10).css("top", y+document.body.scrollTop-25);
*/

	tip[cvjs_active_floorplan_div_nr].show();
}


/**
 * Hides the standard tooltip previously shown with cvjs_showToolTipLocation(tiptext, x, y)
 */

function cvjs_hideToolTip(){

	tip[cvjs_active_floorplan_div_nr].hide();

}





/**
 * Set a custom tooltip overwriting the standard tooltip displaying either Name or Id
 * @param {string} id - id of the custom tooltip object to be displayed
 */

function cvjs_displayCustomToolTip(id){

//console.log(id);

	for (ids in cvjs_customToolTipArrayId){

		if (cvjs_customToolTipArrayId[ids] == id){

			return	cvjs_customToolTipArrayContent[ids];

		}

	}

	// there is no data for content, return the id
	//var newtooltip = "no data"

	return id;
}



/**
 * Set the content of a custom tooltip, based on the id of the object
 * @param {string} id - id for tooltip
 * @param {arr} contentArr - content for custom tooltip, array with lines of text
 */

function cvjs_setCustomToolTipValue(id, contentArr){

	// we make a string based on the contentArray

	var contentString = "";

	for (var i=0; i<contentArr.length; i++){

		if (i==0)
			contentString = contentArr[0];
		else
			contentString = contentString+"<br>"+contentArr[i];
	}
	cvjs_customToolTipArrayId.push(id);
	cvjs_customToolTipArrayContent.push(contentString);
}






/**
 * Text Search; finds a text string in the drawing, and zooms over the search result
 * @param {string} searchString - the text string to search after
 * @param {string} replaceString - the text string to replace with
 */

function cvjs_searchReplaceText(textString, replaceString){


	jQuery("text").each(function( index ) {

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString.toLowerCase())>-1){

			//console.log(jQuery( this ));

				// console.log( index + ": " + jQuery( this ).text() );

				var xx = jQuery( this ).attr('x');
				var yy = jQuery( this ).attr('y')

				var transformtext = jQuery( this ).attr('transform');
				var font_size = jQuery( this ).attr('font-size');
				var stroke = jQuery( this ).attr('stroke');
				var fill = jQuery( this ).attr('fill');
				var fill_opacity = jQuery( this ).attr('fill-opacity');

//				console.log(xx+" "+yy+" "+transformtext+" font "+font_size+" stroke "+stroke+" fill "+fill+" fill-opacity "+fill_opacity);

//console.log("before swap!" + jQuery( this ).text());

				var replacewith = "<text x=\""+xx+"\" y=\""+yy+"\" transform=\""+transformtext+"\" >"+replaceString+"</text>";

//	(jQuery( this ).text()).replaceWith("hello world!");

//console.log(replacewith);

				jQuery( this ).replaceWith( replacewith );

	//			layer_TEXTOS_PRINCIPALES.add(cvjs_rPaper[cvjs_active_floorplan_div_nr].text(xx,yy,replaceString).attr({"font-size": "28px","font-family": "Arial", fill: "magenta", stroke:"magenta", "fill-opacity":"1"}));

				//(jQuery( this ).text()).html("hello world!");

		  }
	});

}


var cvjs_textSearchPreElement = "";
var cvjs_textSearchPreFill = "";

/**
 * Text Search; finds a text string in the drawing, and zooms over the search result
 * @param {string} searchString - the text string to search after
 * @param {int} zoomFactor - zoom factor of the seach result in percentage of zoom extents
 */

function cvjs_searchText(textString, zoomFactor){

	if (isNaN(zoomFactor)){
		zoomFactor = 100;
	}

	jQuery("text").each(function( index ) {

//console.log("text "+index+"  "+jQuery( this ).text());

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString.toLowerCase())>-1){

				//console.log(jQuery( this ));
				//console.log( index + ": " + jQuery( this ).text() );

				jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);
				var xx = jQuery( this ).attr('x');
				var yy = jQuery( this ).attr('y')

if (cvjs_debug)	console.log("text search  xx="+xx+" yy="+yy);


//				jQuery( this ).attr("stroke" , "#FF0000");
//				jQuery( this ).attr("fill" , "#FF0000");

				cvjs_textSearchPreElement = this;
				cvjs_textSearchPreFill = jQuery( this ).css("fill");
				jQuery( this ).css("fill" , "#FF0000");


				//console.log("xx "+xx+" yy "+yy+" vb.X "+viewBox[cvjs_active_floorplan_div_nr].X+" vb.Y "+viewBox[cvjs_active_floorplan_div_nr].Y+" vb.W "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vb.H "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

				// if we have an SVG with an unknown coordiante system we return directly
				if (cvjs_svgWidthHeight100percent) return;

				// this is an SVG file with a different coordinate system, we translate into the parents coordinate system

if (cvjs_debug)					console.log("cvjs_svgTransX "+cvjs_svgTransX+" cvjs_svgTransY "+cvjs_svgTransY+" cvjs_svgScale "+ cvjs_svgScale);

				if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
					//console.log("cvjs_svgTransX "+cvjs_svgTransX+" "+cvjs_svgTransX+" "+cvjs_svgScale+" "+xx+" "+(cvjs_svgTransX + Number(xx)));
					xx = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
					yy = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;
					//console.log("xx, yy "+xx+" "+yy);
				}

				viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr]/zoomFactor*100;
				viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr]/zoomFactor*100;

				viewBox[cvjs_active_floorplan_div_nr].X = xx - viewBoxWidth[cvjs_active_floorplan_div_nr]/2 ;
				viewBox[cvjs_active_floorplan_div_nr].Y = yy - viewBoxHeight[cvjs_active_floorplan_div_nr]/2;

				//console.log("after xx "+xx+" yy "+yy+" vb.X "+viewBox[cvjs_active_floorplan_div_nr].X+" vb.Y "+viewBox[cvjs_active_floorplan_div_nr].Y+" vb.W "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vb.H "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

				var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
				var json_obj = jQuery.parseJSON(attr_2);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

				zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

				return;


		  }
	});

}


/**
 * Text Search; finds a text string in the drawing, and zooms over the search result
 * @param {string} searchString - the text string to search after
 * @param {int} zoomFactor - zoom factor of the seach result in percentage of zoom extents
 * @param {int} textInstance - if multiple entries of text object, load instance, the first instance is 1
 */

function cvjs_searchTextInstance(textString, zoomFactor, textInstance){

	if (isNaN(zoomFactor)){
		zoomFactor = 100;
	}

	var instance = 0;
	var flag = false;

	jQuery("text").each(function( index ) {

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString.toLowerCase())>-1){

				instance ++;

//				console.log("bingo "+instance);

				if (instance == textInstance){

					//console.log(instance+"  "+jQuery( this ));
					//console.log( index + ": " + jQuery( this ).text() );

					var xx = jQuery( this ).attr('x');
					var yy = jQuery( this ).attr('y')

					jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);

					cvjs_textSearchPreElement = this;
					cvjs_textSearchPreFill = jQuery( this ).css("fill");
					jQuery( this ).css("fill" , "#FF0000");


					// if we have an SVG with an unknown coordiante system we return directly
					if (cvjs_svgWidthHeight100percent) return;

					// this is an SVG file with a different coordinate system, we translate into the parents coordinate system
					if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
						xx = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
						yy = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;

					}


					viewBoxWidth[cvjs_active_floorplan_div_nr] = rpWidth[cvjs_active_floorplan_div_nr]/zoomFactor*100;
					viewBoxHeight[cvjs_active_floorplan_div_nr] = rpHeight[cvjs_active_floorplan_div_nr]/zoomFactor*100;

					viewBox[cvjs_active_floorplan_div_nr].X = xx - viewBoxWidth[cvjs_active_floorplan_div_nr]/2 ;
					viewBox[cvjs_active_floorplan_div_nr].Y = yy - viewBoxHeight[cvjs_active_floorplan_div_nr]/2;

					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

					flag = true;
				}


		  }
	});

	return flag;

}






/**
 * Controls hyperlinks, so if click on a hyperlink shall open the link in the same instance or open the link in a new window. Default is false.
 * @param {boolean} openLinkFlag - true if to open links in new window, false otherwise
 * @param {int} windowWidth - width of new popup window, set an arbitary value if openLinkFlag is false
 * @param {int} windowHeight - height of new popup window, set an arbitary value if openLinkFlag is false
 */

function cvjs_openHyperlinkInNewWindow(openLinkFlag, windowWidth, windowHeight){

	openHyperlinkInNewWindow = openLinkFlag;
	hyperlinkNewWindowWidth = windowWidth;
	hyperlinkNewWindowHeight = windowHeight;
}



function consolelog(str)
{
	console.log(str);
}



/**
 * Returns a list with all Ids in the Space Object structure
 * @return {array} value - Returns Id list
 */

function cvjs_getSpaceObjectIdList(){

	var idList = new Array();

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		idList.push(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id"));
	}
	return idList;
}


/**
 * Returns a list with all Names in the Space Object structure
 * @return {array} value - Returns Names list
 */

function cvjs_getSpaceObjectNamesList(){

	var idList = new Array();

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		idList.push(vqRooms[cvjs_active_floorplan_div_nr][spc].data("name"));
	}
	return idList;
}





/**
 * Returns the first NodeId in the Space Object structure based on an Id
 * @param {string} Id - Id of the Space Object in which to retrive the Node id
 * @return {object} value - Returns the NodeId corresponding to the given Id, -1 if not found
 */

function cvjs_getSpaceObjectNodefromId(Id){

	var node = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == Id ){
			node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
			return node;
		}
	}

	return node;
}


/**
 * Returns the first Name in the Space Object structure based on an Id
 * @param {string} Id - Id of the Space Object in which to retrive the name
 * @return {object} value - Returns the Name corresponding to the given Id, -1 if not found
 */

function cvjs_getSpaceObjectNamefromId(Id){

	var name = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == Id ){
			name = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
			return name;
		}
	}

	return name;
}






/**
 * Returns the first Id in the Space Object structure based on a nodeId
 * @param {string} Id - Node id of the Space Object in which to retrive the id data filed
 * @return {object} value - Returns the id corresponding to the given nodeId, -1 if not found
 */

function cvjs_getSpaceObjectIdfromNode(nodeId){

	var id = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			id = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
			return id;
		}
	}

	return id;
}


/**
 * Returns the first Name in the Space Object structure based on a nodeId
 * @param {string} NodeId - Node id of the Space Object in which to retrive the Name data filed
 * @return {object} value - Returns the Name corresponding to the given nodeId, -1 if not found
 */

function cvjs_getSpaceObjectNamefromNode(nodeId){

	var name = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			name = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
			return name;
		}
	}

	return name;
}




/**
 * Retrieves the attribute status from a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive the status
 * @return {object} value - Returns the attributeStatus
 */

function cvjs_getAttributeStatus(nodeId){

	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}
//console.log(nodeId+" "+nodeArrId);
	var status = vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributeStatus");

//console.log(status);
	return status;
}

/**
 * Retrieves the attribute status from a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive the status
 * @param {string} attributeStatus - attributeStatus of the node, "populated" or "unpopulated"
 */

function cvjs_setAttributeStatus(nodeId, attributeStatus){

	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}
//console.log(nodeId+" "+nodeArrId);

	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].removeData("attributeStatus");
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributeStatus", attributeStatus);

}






/**
 * Retrieves an attribute value from a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive an attribute
 * @param {string} name - name of attribute (name, value) pair
 * @return {object} value - Returns the value pair corresponding to the given name
 */

function cvjs_getAttributeFromSpaceObjectNode(nodeId, attributeName){


	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}

//console.log(nodeId+" "+nodeArrId);

	var allAttr = vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributes");

//console.log(allAttr);

	for (var attrs in allAttr){
		var attrData = allAttr[attrs];
//		console.log(attrData.name+"  "+attrData.value);
		if ( attrData.name==attributeName){
			return attrData.value;
		}
	}

	return -1;
}



/**
 * Sets an attribute value in a Space Object
 * @param {string} NodeId - Node id of the Space Object in which to retrive an attribute
 * @param {string} name - name of attribute (name, value) pair
 * @param {string} value - name of attribute (name, value) pair to be set
 */


function cvjs_setAttributeInSpaceObjectNode(nodeId, attributeName, attributeValue){


	var nodeArrId = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			nodeArrId = spc;
		}
	}

//console.log(nodeId+" "+nodeArrId);
	var allAttr = vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributes");

//console.log(allAttr);
	var attrflag = false;
	for (var attrs in allAttr){
		var attrData = allAttr[attrs];
		if ( attrData.name==attributeName){
			allAttr[attrs].value = attributeValue;
			attrflag = true;
		}
	}

	// 2017-08-26
	if (!attrflag){
			allAttr[allAttr.length] = { name: attributeName, value: attributeValue};
	}




// update the data field
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].removeData("attributes");
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("attributes", allAttr);


/*

	for (var attrs in allAttr){
		var attrData = allAttr[attrs];
		console.log(attrData.name+"  "+attrData.value);

	}

*/




}


// handling of Layers and Groups


/**
 * Creates a new layer
 * @param {string} layer - name of layer to be created
 * @return {object} layerObject - Returns a new layer as a group on the SVG canvas
 */


function cvjs_newLayer(layer){

	try{
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
		//console.log("layer "+layer);
		return layer;
	}
	catch(err){
		// console.log(err);
	}
}



/**
 * Creates a new layer
 * @param {string} layer - name of layer to be created
 * @param {string} floorplan_div - name of floorplan div
 * @return {object} layerObject - Returns a new layer as a group on the SVG canvas
 */


function cvjs_newLayerDiv(layer, floorplan_div){

	try{
		layer = cvjs_rPaper[cvjs_rPaperIndex(floorplan_div)].g();
		//console.log("layer "+layer);
		return layer;
	}
	catch(err){
		// console.log(err);
	}
}





/**
 * Clears the current layer
 * @param {string} layer - name of layer to be cleared
 * @return {none}
 */


function cvjs_clearLayer(layer){

	try{
		layer.remove();
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
		//console.log("clear layer "+layer);
	}
		catch(err){
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	}
	
	cvjs_customLayerContentAdded = false;
	
	return layer;
}


/**
 * Clears the current layer on a named floorplan div
 * @param {string} layer - name of layer to be cleared
 * @param {string} floorplan_div - name of floorplan div
 * @return {none}
 */


function cvjs_clearLayerDiv(layer, floorplan_div){

	//floorplan_div = floorplan_div + "_svg";
	
	
	
	
	try{
		layer.remove();
		layer = cvjs_rPaper[cvjs_rPaperIndex(floorplan_div+ "_svg")].g();
		//console.log("clear layer "+layer);
	}
		catch(err){
		layer = cvjs_rPaper[cvjs_rPaperIndex(floorplan_div)].g();
	}
	return layer;
}







/**
 * Clears the current layer and resets Text border objects
 * @param {string} layer - name of layer to be cleared
 * @return {none}
 */


function cvjs_clearTextLayer(layer){

	try{
		layer.remove();
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();

		var border;
		for (border in vqTBorder){
				vqTBorder[border].attr(hide);
		}
	}
		catch(err){
		layer = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	}
	return layer;
}










/**
 * Sort two layers in order
 * @param {string} layer1 - name of layer one
 * @param {string} layer2 - name of layer two
 * @return {boolean} - true if sorted, false otherwise
 */



function cvjs_sortLayersInOrder(layer1, layer2){

	try{

			layer1.prepend(layer2);

	}
	catch(err){
		return false
	}
	return true;
}


/**
 * Sort two layers in order, prepend layer2
 * @param {string} layer1 - name of layer one
 * @param {string} layer2 - name of layer two
 * @return {boolean} - true if sorted, false otherwise
 */


function cvjs_sortLayers_prepend(layer1, layer2){

	try{

			layer1.prepend(layer2);

	}
	catch(err){
		return false
	}
	return true;
}


/**
 * Sort two layers in order, insert layer2 after layer1
 * @param {string} layer1 - name of layer one
 * @param {string} layer2 - name of layer two
 * @return {boolean} - true if sorted, false otherwise
 */

function cvjs_sortLayers_insertAfter(layer1, layer2){

	try{

			layer1.insertAfter(layer2);

	}
	catch(err){
		return false
	}
	return true;
}


/**
* Turn all Object Space layers on - Object Spaces, Sticky Notes and Redlines are differentiated.
 */


function cvjs_AllLayersOn(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		//if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == "Undefined"){
		//// do nothing
		//}
		//else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		//}
	}
}

/**
* Turn all Object Space groups on - Object Spaces, Sticky Notes and Redlines are differentiated.
 */

function cvjs_AllGroupsOn(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		//if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == "Undefined" || vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == ""){
		//// do nothing
		//}
		//else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		//}
	}
}

/**
* Turn all Object Space layers off - Object Spaces, Sticky Notes and Redlines are differentiated.
 */
function cvjs_AllLayersOff(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == "Undefined"){
		// do nothing
		}
		else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn all Object Space groups off - Object Spaces, Sticky Notes and Redlines are differentiated.
 */

function cvjs_AllGroupsOff(){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == "Undefined" || vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == ""){
		// do nothing
		}
		else{
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single general layer on, either defined individually or as a Object Space layer or Text on a Space object  -  Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of layer to turn on
 */

function cvjs_LayerOn(layer){

	var flag = false;


	// layer list layer off
	try{
		if (!flag){
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){


				// 3.0.13d we add layerName and layer check
				if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == layer || layerTable[cvjs_active_floorplan_div_nr].layers[id].layer == layer){
				
//					console.log(id+" layer on "+layer+"   "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);

					var mylayer = "#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer;
					jQuery(mylayer).attr(show);					
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "ON";
					flag = true;
					
					//console.log("before return");
					if (flag) return;

				}
			}	
		}
	}
	catch(err){console.log(err + " layer list layer on");};


	if (flag) return;
	
	
	try{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
				flag = true;
			}
		}

		for (var room in vqText){
			if (vqText[room].data("layer") == layer){
				vqText[room].attr(show);
				flag = true;
			}
		}

		if (!flag)
			layer.attr(show);

	}catch(err){ /*console.log(err);*/}

	if (!flag){
		var mylayer = "#"+layer;
		jQuery(mylayer).attr(show);
		
		
		// Handling of child blocks  ...... not needed 2017-11-29
		/*
		jQuery(mylayer).children("[id^=Block_]").each(function () {
			var id = jQuery(this).attr('id');	
			jQuery("#"+id).attr(show);
			if (cvjs_debug) console.log(id);
		});
		*/
		
		
		
		
	}

}

/**
* Turn single Object Space layer on, turn all other layers off - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param{string} layer - name of layer to turn on
 */

function cvjs_LayerOn_OthersOff(layer){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space layer on, turn all other layers off - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of layer to turn on
 */
function cvjs_LayerOn_AllOff(layer){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single general layer on, either defined individually or as a Object Space layer or Text on a Space object  -  Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of layer to turn off
 */

function cvjs_LayerOff(layer){

	//console.log("  "+layer);
	var flag = false;

	
//console.log("layer OFF 1"+layer);	

	// layer list layer off
	try{
		if (!flag){
			for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){


				// 3.0.13d we add layerName and layer check
				if (layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName == layer || layerTable[cvjs_active_floorplan_div_nr].layers[id].layer == layer){
				
//					console.log(id+" layer off "+layer+"   "+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
	
					var mylayer = "#"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer;
					jQuery(mylayer).attr(hide);					
					layerTable[cvjs_active_floorplan_div_nr].layers[id].status = "OFF";
					flag = true;
					
//					console.log("before return");
					if (flag) return;

				}
			}	
		}
	}
	catch(err){console.log(err + " layer list layer on");};


	if (flag) return;
	
//	console.log("layer OFF 2");	


	try{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("layer") == layer){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
				flag = true;
			}
		}

		for (var room in vqText){
			if (vqText[room].data("layer") == layer){
				vqText[room].attr(hide);
				flag = true;
			}
		}

		if (!flag){
			layer.attr(hide);
				flag = true;

		}
	}catch(err){ /*console.log(err);*/}

	

//console.log("layer OFF 3");	
	
	
	if (!flag){
		
		try{
		var mylayer = "#"+layer;
		jQuery(mylayer).attr(hide);
		
		
		// Handling of child blocks  ...... not needed 2017-11-29
		/*		
		
		jQuery(mylayer).children("[id^=Block_]").each(function () {
			var id = jQuery(this).attr('id');	
			jQuery("#"+id).attr(hide);
			if (cvjs_debug) console.log(id);
		});
		*/
		flag = true;
		}catch(err){  //console.log(err);
					}
		 
	}
	
	
	
	
	
	
}

/**
* Turn single Object Space group on  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn on
 */
function cvjs_GroupOn(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
	}
}

/**
* Turn single Object Space group on, all other groups are turned off  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn on
 */

function cvjs_GroupOn_OthersOff(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
//console.log("show "+room);
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
//console.log("hide "+room);
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space group on, all other groups are turned off  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn on
 */

function cvjs_GroupOn_AllOff(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
//console.log("show "+room);
		vqRooms[cvjs_active_floorplan_div_nr][room].attr(show);
		}
		else{
//console.log("hide "+room);
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

/**
* Turn single Object Space group off  - Object Spaces, Sticky Notes and Redlines are differentiated.
 * @param {string} layer - name of group to turn off
 */
function cvjs_GroupOff(group){

	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		if (vqRooms[cvjs_active_floorplan_div_nr][room].data("group") == group){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(hide);
		}
	}
}

// END handling of Layers and Groups


// BEGIN Patterns and Gradients


/**
 * Apply a predefined pattern on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyPatternOnSpaceObjectId(layer,Id, graphicalPattern, colorHex, fillOpacity)
{
	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr], 1);
}






/**
 * Apply a predefined pattern on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyPatternOnSpaceObjectNode(layer,nodeId, graphicalPattern, colorHex, fillOpacity)
{

	cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr], 1);

}





/**
 * Apply a predefined pattern on a URL
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object to add hatches
 * @param {string} graphicalPattern - name of the hatch pattern, from a predefined list of patterns:
 *  	"pattern_45degree_standard"
 *		"pattern_45degree_fine"
 *		"pattern_45degree_wide"
 *		"pattern_90degree_standard"
 *		"pattern_90degree_fine"
 *		"pattern_90degree_wide"
 *		"pattern_135degree_standard"
 *		"pattern_135degree_fine"
 *		"pattern_135degree_wide"
 *		"pattern_0degree_standard"
 *		"pattern_0degree_fine"
 *		"pattern_0degree_wide"
 *		"pattern_45degree_crosshatch_standard"
 *		"pattern_45degree_crosshatch_fine"
 * @param {string} colorHex - color of hatch in hex form, for example: #FF0000
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyPatternOnUrl(layer,nodeId, graphicalPattern, colorHex, fillOpacity)
{

	cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr], 2);

}






function cvjs__ApplyPatternOnObject_layerSort(layer, nodeId, graphicalPattern, colorHex, fillOpacity, layer2, nodetype)
{

	var graphicalObject;
	var flag = false;

	if (nodetype==1)
		for (spc in vqRooms[cvjs_active_floorplan_div_nr])
		{
			if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
				graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
				flag = true;
			}
		}


	if (nodetype==2)
		for (spc in vqURLs)
		{
			if (vqURLs[spc].data("node") == nodeId ){
				graphicalObject = vqURLs[spc];
				flag = true;
			}
		}


	if (!flag) return;

	var strRoom = graphicalObject.toString();

	//console.log(nodeId+" "+strRoom);


	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	if (graphicalPattern=="pattern_45degree_standard" || graphicalPattern=="pattern_45degree_fine" || graphicalPattern=="pattern_45degree_wide" ||
		graphicalPattern=="pattern_90degree_standard" || graphicalPattern=="pattern_90degree_fine" || graphicalPattern=="pattern_90degree_wide" ||
		graphicalPattern=="pattern_135degree_standard" || graphicalPattern=="pattern_135degree_fine" || graphicalPattern=="pattern_135degree_wide" ||
		graphicalPattern=="pattern_0degree_standard" || graphicalPattern=="pattern_0degree_fine" || graphicalPattern=="pattern_0degree_wide" ||
		graphicalPattern=="pattern_45degree_crosshatch_standard" || graphicalPattern=="pattern_45degree_crosshatch_fine"
		){

	var pattern;

//	console.log(graphicalPattern);

	if (graphicalPattern=="pattern_45degree_standard"){
		cvjs_setUpPattern_45degree_standard(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}
	if (graphicalPattern=="pattern_45degree_fine"){
		cvjs_setUpPattern_45degree_fine(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}
	if (graphicalPattern=="pattern_45degree_wide"){
		cvjs_setUpPattern_45degree_wide(colorHex, "1.0");
		pattern = pattern_45degree_standard;
	}

	if (graphicalPattern=="pattern_90degree_standard"){
		cvjs_setUpPattern_90degree_standard(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}
	if (graphicalPattern=="pattern_90degree_fine"){
		cvjs_setUpPattern_90degree_fine(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}
	if (graphicalPattern=="pattern_90degree_wide"){
		cvjs_setUpPattern_90degree_wide(colorHex, "1.0");
		pattern = pattern_90degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_standard"){
		cvjs_setUpPattern_135degree_standard(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_fine"){
		cvjs_setUpPattern_135degree_fine(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_135degree_wide"){
		cvjs_setUpPattern_135degree_wide(colorHex, "1.0");
		pattern = pattern_135degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_standard"){
		cvjs_setUpPattern_0degree_standard(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_fine"){
		cvjs_setUpPattern_0degree_fine(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_0degree_wide"){
		cvjs_setUpPattern_0degree_wide(colorHex, "1.0");
		pattern = pattern_0degree_standard;
	}

	if (graphicalPattern=="pattern_45degree_crosshatch_standard"){
		cvjs_setUpPattern_45degree_crosshatch_standard(colorHex, "1.0");
		pattern = pattern_45degree_crosshatch;
	}

	if (graphicalPattern=="pattern_45degree_crosshatch_fine"){
		cvjs_setUpPattern_45degree_crosshatch_fine(colorHex, "1.0");
		pattern = pattern_45degree_crosshatch;
	}




//		graphicalObject.attr({'fill': pattern_45degree_standard, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity })

		if (path_flag){
			var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1);
			pathX.attr({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity })
			layer.add(pathX);
		}
		else{
			var circleX = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r);
if (cvjs_debug)				console.log(circleX);
			layer.add(circleX.attr({'fill': pattern, 'fill-opacity': fillOpacity, stroke: colorHex, 'stroke-opacity': fillOpacity }));
		}

		try{
			layer2.prepend(layer);
		}
		catch (err){
			var iii = 0;
		}

		return 1;
	}

	return -1;
}


var pattern_45degree_standard = null;
var pattern_90degree_standard = null;
var pattern_135degree_standard = null;
var pattern_0degree_standard = null;
var pattern_45degree_crosshatch = null;


function cvjs_setUpPattern_45degree_standard(colorHex, patternOpacity ){
	pattern_45degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_45degree_wide(colorHex, patternOpacity ){
	pattern_45degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_45degree_fine(colorHex, patternOpacity ){
	pattern_45degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_90degree_fine(colorHex, patternOpacity ){
	pattern_90degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5 10,15M15,0,15,15M0-5 0,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_90degree_standard(colorHex, patternOpacity ){
	pattern_90degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5 10,15M15,0,15,15M0-5 0,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_90degree_wide(colorHex, patternOpacity ){
	pattern_90degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M10-5 10,15M15,0,15,15M0-5 0,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_135degree_standard(colorHex, patternOpacity ){
	pattern_135degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_135degree_wide(colorHex, patternOpacity ){
	pattern_135degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_135degree_fine(colorHex, patternOpacity ){
	pattern_135degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_0degree_standard(colorHex, patternOpacity ){
	pattern_0degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-5,0,15,0M-5,10,15,10M-5,20,15,20").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_0degree_wide(colorHex, patternOpacity ){
	pattern_0degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-5,0,15,0M-5,10,15,10M-5,20,15,20").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_0degree_fine(colorHex, patternOpacity ){
	pattern_0degree_standard = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-5,0,15,0M-5,10,15,10M-5,20,15,20").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}


function cvjs_setUpPattern_45degree_crosshatch_standard(colorHex, patternOpacity ){
	pattern_45degree_crosshatch = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 2,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}

function cvjs_setUpPattern_45degree_crosshatch_fine(colorHex, patternOpacity ){
	pattern_45degree_crosshatch = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0-5 20,15M10,-5,30,15M-10-5 10,15M10-5-10,15M15,0,0,15M0-5-20,15").attr({
        fill: "none",
        stroke: colorHex,
        strokeWidth: 0.5,
        "stroke-opacity": patternOpacity
    }).pattern(0, 0, 10, 10);
}







var linear_gradient;

function cvjs_ApplyRelativeLinearGradientStandard2Colors(graphicalObject, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradient(graphicalObject, 0, 0, 1, 1, startColor, "", endColor, fillOpacity);
}

function cvjs_ApplyRelativeLinearGradientStandard3Colors(graphicalObject, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradient(graphicalObject, 0, 0, 1, 1, startColor, middleColor, endColor, fillOpacity)
}


function cvjs_ApplyRelativeLinearGradient(graphicalObject, xStart, yStart, xEnd, yEnd, startColor, middleColor, endColor, fillOpacity){

		if (middleColor=="")
			linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+endColor);
		else
			linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+middleColor+"-"+endColor);

		graphicalObject.attr({'fill': linear_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
}


/**
 * Apply a standard linear gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard2ColorsOnSpaceObjectId(layer, Id, startColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}


/**
 * Apply a standard linear gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard2ColorsOnSpaceObjectNode(layer, nodeId, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a standard linear gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard3ColorsOnSpaceObjectId(layer, Id, startColor, middleColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}



/**
 * Apply a standard linear gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeLinearGradientStandard3ColorsOnSpaceObjectNode(layer, nodeId, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, 0, 0, 1, 1, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}


/**
 * Apply a linear gradient, with definition of gradient vector,  with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {float} xStart - gradient vector x start point, value between 0 and 1
 * @param {float} yStart - gradient vector y start point, value between 0 and 1
 * @param {float} xEnd - gradient vector x end point, value between 0 and 1
 * @param {float} yEnd - gradient vector y end point, value between 0 and 1
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 * @param {string} layer2 - layer which to prepend the gradient layer (typically the main Space Object layer)
 */

function cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer, nodeId, xStart, yStart, xEnd, yEnd, startColor, middleColor, endColor, fillOpacity, layer2 )
{

	var graphicalObject;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
			flag = true;
		}
	}
	if (!flag) return;

	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	if (middleColor=="")
		linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+endColor);
	else
		linear_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("l("+xStart+", "+yStart+", "+xEnd+" ,"+yEnd+" )"+startColor+"-"+middleColor+"-"+endColor);

	if (path_flag){
		var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1);
		pathX.attr({'fill': linear_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(pathX);
	}
	else{
		var circleX = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r);
		circleX.attr({'fill': linear_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(circleX);
	}

	try{
		layer2.prepend(layer);
		return 1;
	}
	catch (err){
		var iii = 0;
	}
	return -1;
}








var radial_gradient;

function cvjs_ApplyRelativeRadialGradientStandard2Colors(graphicalObject, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradient(graphicalObject, 0.5, 0.5, 0.5, startColor, "", endColor, fillOpacity);
}

function cvjs_ApplyRelativeRadialGradientStandard3Colors(graphicalObject, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradient(graphicalObject, 0.5, 0.5, 0.5, startColor, middleColor, endColor, fillOpacity)
}

function cvjs_ApplyRelativeRadialGradient(graphicalObject, xC, yC, radius, startColor, middleColor, endColor, fillOpacity){

		if (middleColor=="")
			radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+endColor);
		else
			radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

		graphicalObject.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });

if (cvjs_debug)		console.log("after "+graphicalObject);
}



/**
 * Apply a standard radial gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard2ColorsOnSpaceObjectId(layer, Id, startColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a standard radial gradient with two colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard2ColorsOnSpaceObjectNode(layer, nodeId, startColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, "", endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}



/**
 * Apply a standard radial gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} Id - Id of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard3ColorsOnSpaceObjectId(layer, Id, startColor, middleColor, endColor, fillOpacity){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);
	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a standard radial gradient with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 */

function cvjs_ApplyRelativeRadialGradientStandard3ColorsOnSpaceObjectNode(layer, nodeId, startColor, middleColor, endColor, fillOpacity){

	cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, 0.5, 0.5, 0.5, startColor, middleColor, endColor, fillOpacity, layer_vqrooms[cvjs_active_floorplan_div_nr]);
}




/**
 * Apply a radial gradient, with definition of gradient vector,  with three colors on a graphical Space Object
 * @param {string} layer - layer to apply the pattern
 * @param {string} nodeId - nodeId of the graphical object
 * @param {float} xC - gradient vector x start point, value between 0 and 1
 * @param {float} yC - gradient vector y start point, value between 0 and 1
 * @param {float} radius - gradient vector radius, value between 0 and 1
 * @param {string} startColor - start color of gradient in hex form, for example: #FF0000
 * @param {string} middleColor - middle color of gradient in hex form, for example: #AA00AA
 * @param {string} endColor - end color of gradient in hex form, for example: #00DD00
 * @param {float} fillOpacity - fill opacity of pattern, value between 0 and 1
 * @param {string} layer2 - layer which to prepend the gradient layer (typically the main Space Object layer)
 */


function cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer, nodeId, xC, yC, radius, startColor, middleColor, endColor, fillOpacity, layer2 )
{

	var graphicalObject;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
		}
	}
	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	if (middleColor=="")
		radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+endColor);
	else
		radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

	if (path_flag){
		var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1);
		pathX.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(pathX);
	}
	else{
		var circleX = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx,cy,r,r);
		circleX.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
		layer.add(circleX);
	}

	try{
		layer2.prepend(layer);
		return 1;
	}
	catch (err){
		var iii = 0;
	}
	return -1;
}




// END Patterns and Gradients



// BEGIN Add text overlay to object

/** text style for adding text into Space Objects */
var text_style_arial_11pt_bold = {
			'stroke': "#00539B",
			'fill': "#00539B",
			'font-family': "Arial",
			'font-size': "11pt",
			'font-weight': "bold",
			'margin': 0,
			'cursor': "pointer",
			'text-align': "left",

			'z-index': 1980
		};

/** text style for adding text into Space Objects */
var text_style_arial_9pt_normal = {
			'stroke': "#00539B",
			'fill': "#00539B",
			'font-family': "Arial",
			'font-size': "9pt",
			'font-weight': "normal",
			'margin': 0,
			'margin-top': "-10px",
			'cursor': "pointer",
			'text-align': "left",
			'vertical-align': "top",
			'width': "128px",
			'z-index': 1980
		};

/** text style for adding text into Space Objects */
var text_style_dialog = {
			'text-font' : "Dialog",
			'font-family' : "Dialog",
			'font-size' : "7pt",
			'text-anchor' : "start",
			'font-weight': "normal",
			'font-style': "italic",
			stroke : "#88539B",
			fill : "#88539B"
		};




function setTextStyle(){

	var textStyle;

	textStyle = {   };

	return textStyle;

}


/**
 * Add three layers of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} nodeId - nodeId of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {string} textString1 - first line of text
 * @param {object} textStyle1 - textstyle of text line 1, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {string} scaleText1 - relative scale of text line 1, value between 0 and 1
 * @param {string} hexColorText1 -color of text line 1 in hex form, for example: #AA00AA
 * @param {string} textString2 - second line of text
 * @param {object} textStyle2 - textstyle of text line 2, formattet as a java script object with css style elements
 * @param {string} scaleText2 - relative scale of text line 2, value between 0 and 1
 * @param {string} hexColorText2 -color of text line 2 in hex form, for example: #AA00AA
 * @param {string} textString3 - third line of text
 * @param {object} textStyle3 - textstyle of text line 3, formattet as a java script object with css style elements
 * @param {string} scaleText3 - relative scale of text line 3, value between 0 and 1
 * @param {string} hexColorText3 -color of text line 3 in hex form, for example: #AA00AA
 */

function cvjs_AddTextOnObject(txtLayer, nodeId, leftScale, textString1, textStyle1, scaleText1, hexColorText1, textString2, textStyle2, scaleText2, hexColorText2, textString3, textStyle3, scaleText3, hexColorText3){

// find bounding box


	var graphicalObject;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
		}
	}


var boundingBoxElement = graphicalObject.getBBox();

var x = boundingBoxElement.x;
var y = boundingBoxElement.y;
var width = boundingBoxElement.width;
var height = boundingBoxElement.height;

var x1;
var y1;
var txt1;
var txt2;
var txt3;
var fontheight1;
var fontheight2;
var fontheight3;
var strokewidth;

	//console.log(x+" "+y+" "+" "+width+" "+height+" factor: "+height/width);

	// three lines of text
	x1 = x +width*leftScale;

	fontheight1 = height*scaleText1;
	y1 = y +fontheight1*1.05;
	txt1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString1).attr(textStyle1);
	txt1.attr({'font-size' : fontheight1});
	strokewidth = fontheight1/15;
	txt1.attr({'stroke-width' : strokewidth});
	txt1.attr({'stroke' : hexColorText1});
	txt1.attr({'fill' : hexColorText1});

/*
try{
	jQuery('#textstringId').val(textString1);
	var el = document.getElementsByTagName('textstringId');
	el.getComputedTextLength();
	console.log(el);
	console.log(textstringId.getComputedTextLength());
}
catch (e){ console.log(e);}
*/

	fontheight2 = height*scaleText2;
	y1 = y +fontheight2*1.05+fontheight1*1.05;
	txt2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString2).attr(textStyle2);
	txt2.attr({'font-size' : fontheight2});
	strokewidth = fontheight2/15;
	txt2.attr({'stroke-width' : strokewidth});
	txt2.attr({'stroke' : hexColorText2});
	txt2.attr({'fill' : hexColorText2});


	fontheight3 = height*scaleText3;
	y1 = y +fontheight3*1.05 +fontheight2*1.05+fontheight1*1.05;
	txt3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString3).attr(textStyle3);
	txt3.attr({'font-size' : fontheight3});
	strokewidth = fontheight3/15;
	txt3.attr({'stroke-width' : strokewidth});
	txt3.attr({'stroke' : hexColorText3});
	txt3.attr({'fill' : hexColorText3});

	txtLayer.add(txt1);
	txtLayer.add(txt2);
	txtLayer.add(txt3);

}






/**
 * Add three lines of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} nodeId - nodeId of the graphical object in which to place the text
 * @param {string} tborderId - Text Border Id of the new graphical object in which to place the text, of type "TBORDER_xxx"
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {string} textId1 - Text Id of the first text object, of type "TEXT_xxx"
 * @param {string} textString1 - first line of text
 * @param {object} textStyle1 - textstyle of text line 1, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {string} scaleText1 - relative scale of text line 1, value between 0 and 1
 * @param {string} hexColorText1 -color of text line 1 in hex form, for example: #AA00AA
 * @param {string} textId2 - Text Id of the second text object, of type "TEXT_yyy"
 * @param {string} textString2 - second line of text
 * @param {object} textStyle2 - textstyle of text line 2, formattet as a java script object with css style elements
 * @param {string} scaleText2 - relative scale of text line 2, value between 0 and 1
 * @param {string} hexColorText2 -color of text line 2 in hex form, for example: #AA00AA
 * @param {string} textId3 - Text Id of the third text object, of type "TEXT_zzz"
 * @param {string} textString3 - third line of text
 * @param {object} textStyle3 - textstyle of text line 3, formattet as a java script object with css style elements
 * @param {string} scaleText3 - relative scale of text line 3, value between 0 and 1
 * @param {string} hexColorText3 -color of text line 3 in hex form, for example: #AA00AA
 */

function cvjs_AddTextAndTBorderOnSpaceObject3Lines(txtLayer, nodeId, tborderId, leftScale, textId1, textString1, textStyle1, scaleText1, hexColorText1, textId2, textString2, textStyle2, scaleText2, hexColorText2, textId3, textString3, textStyle3, scaleText3, hexColorText3){

	var graphicalObject;
	var spc=0;
	var nodeArrId = 0;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
			nodeArrId = spc;
			flag = true;
		}
	}

	if (!flag) return;

	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	var graphicStr = graphicalObject.toString();
	var boundingBoxElement = graphicalObject.getBBox();

	var x = boundingBoxElement.x;
	var y = boundingBoxElement.y;
	var width = boundingBoxElement.width;
	var height = boundingBoxElement.height;

	var x1;
	var y1;
	var txt1;
	var txt2;
	var txt3;
	var fontheight1;
	var fontheight2;
	var fontheight3;
	var strokewidth;

	//console.log(x+" "+y+" "+" "+width+" "+height+" factor: "+height/width);

	// three lines of text
	x1 = x +width*leftScale;

	fontheight1 = height*scaleText1;
	y1 = y +fontheight1*1.05;
	txt1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString1).attr(textStyle1);
	txt1.attr({'font-size' : fontheight1});
	strokewidth = fontheight1/15;
	txt1.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	txt1.attr({'stroke' : hexColorText1});
	txt1.attr({'fill' : hexColorText1});

	vqText.push(txt1.data("node", textId1));
	var text = vqText.length;
	if (text>0) text--;
	vqText[text].data("name", textId1)
	vqText[text].data("id", textId1)
	vqText[text].data("layer", txtLayer)

	fontheight2 = height*scaleText2;
	y1 = y +fontheight2*1.05+fontheight1*1.05;
	txt2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString2).attr(textStyle2);
	txt2.attr({'font-size' : fontheight2});
	strokewidth = fontheight2/15;
	txt2.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	txt2.attr({'stroke' : hexColorText2});
	txt2.attr({'fill' : hexColorText2});

	vqText.push(txt2.data("node", textId2));
	text = vqText.length;
	if (text>0) text--;
	vqText[text].data("name", textId2)
	vqText[text].data("id", textId2)
	vqText[text].data("layer", txtLayer)


	fontheight3 = height*scaleText3;
	y1 = y +fontheight3*1.05 +fontheight2*1.05+fontheight1*1.05;
	txt3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString3).attr(textStyle3);
	txt3.attr({'font-size' : fontheight3});
	strokewidth = fontheight3/15;
	txt3.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	txt3.attr({'stroke' : hexColorText3});
	txt3.attr({'fill' : hexColorText3});

	vqText.push(txt3.data("node", textId3));
	text = vqText.length;
	if (text>0) text--;
	vqText[text].data("name", textId3)
	vqText[text].data("id", textId3)
	vqText[text].data("layer", txtLayer)

	var textArr = [];

	textArr[0]= textId1;
	textArr[1]= textId2;
	textArr[2]= textId3;

	// turn off layer with TBorder polygon

	if (path_flag){
		var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1), txt1, txt2, txt3).data("node", tborderId);
		vqTBorder.push(pathX);

		var border = vqTBorder.length;
		if (border>0) border--;

		vqTBorder[border].data("name", tborderId)
		vqTBorder[border].data("id", tborderId)
		vqTBorder[border].data("layer", tborderId)
//		vqTBorder[border].attr(hide);

		vqTBorder[border].attr(show).attr({fill: 'none', "stoke-width": "0.01", stroke: '#000000', 'stroke-opacity': "0.01"});
	}
	else{
		return -1;
	}

	// add the TBorder to the Space Object tborder variable
	// add these 3 text object to the Space Object text array
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("tborderId", tborderId)
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("textId", textArr)


}


/**
 * Add multiple of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} Id - Id of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {array} textStringArr - Array with the lines of text
 * @param {array} textStyleArr - Array with textstyle of text lines, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {array} scaleTextArr - Array with relative scale of text lines, value between 0 and 1, based on global height of drawing
 * @param {array} hexColorTextArr - Array of color of text lines in hex form, for example: #AA00AA
 * @param {boolean} clipping - true if clipping of text inside of Space Object, false if text to cross Space Object borders
 */

function cvjs_AddTextAndTBorderOnSpaceObjectId_GlobalHeight(txtLayer, Id, leftScale, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);

// find largest TBORDER_
//define new TBORDER_

	var border = vqTBorder.length;
	border++;
	var tborderId = "TBORDER_"+border;

// find largest TEXT_
// define an array with new TEXT_ array items

	var textIdArr = new Array();

	for (ii in textStringArr){
		textIdArr[ii] = "TEXT_"+tborderId+"_"+(ii+1);
	}

	cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, true);

}







/**
 * Add multiple of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} Id - Id of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {array} textStringArr - Array with the lines of text
 * @param {array} textStyleArr - Array with textstyle of text lines, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {array} scaleTextArr - Array with relative scale of text lines, value between 0 and 1
 * @param {array} hexColorTextArr - Array of color of text lines in hex form, for example: #AA00AA
 * @param {boolean} clipping - true if clipping of text inside of Space Object, false if text to cross Space Object borders
 * @param {boolean} centering - true if centering of text inside of Space Object, false is default
 */

function cvjs_AddTextAndTBorderOnSpaceObjectId(txtLayer, Id, leftScale, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering){

	var nodeId = cvjs_getSpaceObjectNodefromId(Id);

	// 3.2.02c
	if (centering == undefined) centering=false;
	
// find largest TBORDER_
//define new TBORDER_

	var border = vqTBorder.length;
	border++;
	var tborderId = "TBORDER_"+border;

// find largest TEXT_
// define an array with new TEXT_ array items

	var textIdArr = new Array();

	for (ii in textStringArr){
		textIdArr[ii] = "TEXT_"+tborderId+"_"+(ii+1);
	}

	cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering, false);

}


/**
 * Add multiple of text, individually formatted and styled, inside a Space Object
 * @param {string} txtLayer - layer to apply the text
 * @param {string} nodeId - nodeId of the graphical object in which to place the text
 * @param {float} leftScale - distance from the left border of Space Object, value between 0 and 1
 * @param {array} textStringArr - Array with the lines of text
 * @param {array} textStyleArr - Array with textstyle of text lines, formattet as a java script object with css style elements, predefined is: text_style_arial_11pt_bold , text_style_arial_9pt_normal, text_style_dialog
 * @param {array} scaleTextArr - Array with relative scale of text lines, value between 0 and 1
 * @param {array} hexColorTextArr - Array of color of text lines in hex form, for example: #AA00AA
 * @param {boolean} clipping - true if clipping of text inside of Space Object, false if text to cross Space Object borders
 * @param {boolean} centering - true if centering of text inside of Space Object, false is default
 */

function cvjs_AddTextAndTBorderOnSpaceObjectNode(txtLayer, nodeId, leftScale, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering){

	var border = vqTBorder.length;
	border++;
	var tborderId = "TBORDER_"+border;

// find largest TEXT_
// define an array with new TEXT_ array items

	// 3.2.02c
	if (centering == undefined) centering=false;


	var textIdArr = new Array();

	for (ii in textStringArr){
		textIdArr[ii] = "TEXT_"+tborderId+"_"+(ii+1);
	}

//console.log("before SpaceObject");

	cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering, false);

}




function cvjs_AddTextAndTBorderOnSpaceObject(txtLayer, nodeId, tborderId, leftScale, textIdArr, textStringArr, textStyleArr, scaleTextArr, hexColorTextArr, clipping, centering, globalheightFlag){

	var graphicalObject;
	var spc=0;
	var nodeArrId = 0;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeId ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
			nodeArrId = spc;
			flag = true;
		}
	}

	if (!flag) return;

	var strRoom = graphicalObject.toString();

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	var path2;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);

		path2 = path1;
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}

	var graphicStr = graphicalObject.toString();
	var boundingBoxElement = graphicalObject.getBBox();

	var x = boundingBoxElement.x;
	var y = boundingBoxElement.y;
	var width = boundingBoxElement.width;
	var height; 

	//3.2.02c
	if (centering){	
		x = boundingBoxElement.x+boundingBoxElement.width/2;
		y = boundingBoxElement.y+boundingBoxElement.height/2;	
	}
	
	
	
	
	// 3.0.14e
	if (globalheightFlag)
		//height =  cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox().height;
		height = actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr];
	
	else
		height = boundingBoxElement.height;
	
	
	var txt;
	var txt2;
	var txt3;
	var fontheight = 0;;
	var fontheight2;
	var fontheight3;
	var strokewidth;

//	console.log(x+" "+y+" "+" "+width+" "+height+" factor: "+height/width);

//	var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1), txt1, txt2, txt3).data("node", tborderId);

	var pathX = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1)).data("node", tborderId);
	var x1 = x;
	var y1 = y;

	var i=0;  // 3.1.20h


	for	(i = 0; i < textIdArr.length; i++) {

//console.log("text i"+i);

		// we set the clipping mask
		var clipping_mask;

		// we define the clipping mask to text
		if (clipping){
			clipping_mask = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path2);
			clipping_mask.attr({'fill' : "#FFFFFF", 'fill-opacity': "1"});
		}

		x1 = x +width*leftScale;

		fontheight = height*scaleTextArr[i];
		y1 += fontheight*1.05;
		txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textStringArr[i]).attr(textStyleArr[i]);
		txt.attr({'font-size' : fontheight});
		strokewidth = fontheight/15;
	
		// 2017-11-21 supress values
	
	//	txt.attr({'stroke-width' : strokewidth, 'stroke-opacity': "1"});
	//	txt.attr({'stroke' : hexColorTextArr[i]});
	
		txt.attr({'fill' : hexColorTextArr[i]});

		// we apply the clipping mask to text
		if (clipping)
			txt.attr({'mask' : clipping_mask});

		// we make so that text cannot get any mouse-over interaction
		txt.attr({'pointer-events' : 'none'});


		vqText.push(txt.data("node", textIdArr[i]));
		var text = vqText.length;
		if (text>0) text--;
		vqText[text].data("name", textIdArr[i]);
		vqText[text].data("id", textIdArr[i]);
		vqText[text].data("layer", txtLayer);
		pathX.add(txt);
	}

	if (path_flag){

		vqTBorder.push(pathX);

		var border = vqTBorder.length;
		if (border>0) border--;

		vqTBorder[border].data("name", tborderId)
		vqTBorder[border].data("id", tborderId)
		vqTBorder[border].data("layer", tborderId)
//		vqTBorder[border].attr(hide);
		vqTBorder[border].attr(show).attr({fill: 'none', "stoke-width": "0.01", stroke: '#000000', 'stroke-opacity': "0.01"});
	}
	else{
		return -1;
	}

	// add the TBorder to the Space Object tborder variable
	// add these 3 text object to the Space Object text array
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("tborderId", tborderId)
	vqRooms[cvjs_active_floorplan_div_nr][nodeArrId].data("textId", textIdArr)

}





function cvjs_AddTextOnObjectScaleText(graphicalObject, leftScale, textString1, textStyle1, scaleText1, textString2, textStyle2, scaleText2, textString3, textStyle3, scaleText3){

// find bounding box
var boundingBoxElement = graphicalObject.getBBox();

var x = boundingBoxElement.x;
var y = boundingBoxElement.y;
var width = boundingBoxElement.width;
var height = boundingBoxElement.height;

var x1;
var y1;
var txt1;
var txt2;
var txt3;
var fontheight1;
var fontheight2;
var fontheight3;
var strokewidth;

if (cvjs_debug)		console.log(x+" "+y+" "+" "+width+" "+height);

	// three lines of text
	x1 = x +width*leftScale;

	fontheight1 = height*scaleText1;
	y1 = y +fontheight1*1.05;
	txt1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString1).attr(textStyle1);
	txt1.attr({'font-size' : fontheight1});
	strokewidth = fontheight1/15;
	txt1.attr({'stroke-width' : strokewidth});



	fontheight2 = height*scaleText2;
	y1 = y +fontheight2*1.05+fontheight1*1.05;
	txt2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString2).attr(textStyle2);
	txt2.attr({'font-size' : fontheight2});
	strokewidth = fontheight2/15;
	txt2.attr({'stroke-width' : strokewidth});


	fontheight3 = height*scaleText3;
	y1 = y +fontheight3*1.05 +fontheight2*1.05+fontheight1*1.05;
	txt3 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textString3).attr(textStyle3);
	txt3.attr({'font-size' : fontheight3});
	strokewidth = fontheight3/15;
	txt3.attr({'stroke-width' : strokewidth});


}



// END Add text overlay to objects



// BEGIN - draw methods

var handleGroup;
var canvas_width;
var canvas_height;
var global_scale_X;
var global_scale_Y;
var global_scale;
var delta_x;
var delta_y;

var cvjs_supressPopUpModal = false,
cvjs_supressHyperlinkColors = false,
cvjs_callbackForModalDisplayVar = false,
cvjs_standardHighLightColors = true,

cvjs_customModalPopUpBody,
cvjs_customModalPopUpBody,
cvjs_populateMyCustomPopUpBody;

/**
 * Space Object modals control for external retrieval of modal data.
 * @param {boolean} callbacForkModalDisplay - false: standard modal on Space Object click as defined through setup method: InitCADViewerJS_ , true: if attributesStatus in the data-field of object is "unpopulated" a call is made to external method cvjs_callbackForModalDisplay(), if attributeStatus is "populated", modal is displayed.
 * @param {function} customModalPopUpBody : method that defines the body of the popup model
 * @param {function} populateMyCustomModalPopUpBody : method that populates the body of the popup model, this method is called when a space is selected so the display of modal content will match the modal selected
 */
function cvjs_setCallbackForModalDisplay(callbackForModalDisplay, customModalPopUpBody, populateMyCustomPopUpBody){

	cvjs_callbackForModalDisplayVar = callbackForModalDisplay;

	cvjs_customModalPopUpBody = customModalPopUpBody;

	cvjs_populateMyCustomPopUpBody = populateMyCustomPopUpBody;
}



var cvjs_customMethodForOnLoadEnd = false;
var cvjs_myOnLoadEndMethod;

/**
 * Set custom call back method for OnLoadEnd when drawings are loaded.
 * @param {boolean} callbackMethodOnLoadEnd - false: default - no custom method , true: custom method defined.
 * @param {function} myOnLoadEndMethod : method that is executed OnLoadEnd of drawing
 */

function cvjs_setCustomCallbackMethodOnLoadEnd(callbackMethodOnLoadEnd, myOnLoadEndMethod){

	cvjs_customMethodForOnLoadEnd = callbackMethodOnLoadEnd;

	cvjs_myOnLoadEndMethod = myOnLoadEndMethod;

};





/**
 * Sets the display mode of Space Object modals
 * @param {boolean} cvjs_creationMode - false: standard modal on Space Object click as defined through setup method: InitCADViewerJS_ , true: modal is supressed, tooltip is ID of object, color setting is defined through the "linked" database field of the object.
 */
function cvjs_setCreationMode(cvjs_creationMode){

	cvjs_supressPopUpModal = cvjs_creationMode;

	if (cvjs_creationMode == true)
		cvjs_standardHighLightColors = false;
	else
		cvjs_standardHighLightColors = true;

	
	if (cvjs_supressPopUpModal == true){

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},  //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'true'});

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
	
	}	
	else{

		// 3.2.02c
		textLayer1 = cvjs_clearTextLayer(textLayer1);
	
	
	
		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}


		}
	}

	//console.log(" cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
}



/**
 * Sets the display mode of Space Object modals
 * @param {boolean} cvjs_modalMode - false: standard modal on Space Object click as defined through setup method: InitCADViewerJS_ , true: modal is supressed, standard colors on highlight
 */

function cvjs_setNoModalMode(cvjs_modalMode){

	cvjs_supressPopUpModal = cvjs_modalMode;


	if (cvjs_modalMode == true)
		cvjs_standardHighLightColors = true;
	else
		cvjs_standardHighLightColors = true;


	if (cvjs_supressPopUpModal == true){
		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},  //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'true'});

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
	}
	else{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}


		}
	}

	//console.log(" cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
}




/**
 * Sets Space Object modals to custom type
 * @param {String} hbody -  String containing the body of the popUpModal
 * @param {boolean} dual_hbody_flag - false: flag for dual body popup
 * @param {String} hbody2 -  second hbody, when no active space object
 
 
 */

function cvjs_setCustomModalsContent(hbody, dual_body_flag, hbody2 ){

	cvjs_modalMode = false;

	cvjs_supressPopUpModal = cvjs_modalMode;
	

	if (cvjs_modalMode == true)
		cvjs_standardHighLightColors = true;
	else
		cvjs_standardHighLightColors = true;


	if (cvjs_supressPopUpModal == true){
		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},  //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'true'});

			jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
	}
	else{

		for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

	console.log(" "+room);
			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}


		}
	}

	//console.log(" cvjs_supressPopUpModal "+cvjs_supressPopUpModal);
}








// DATA BASE STRUCTURE - SPACE OBJECTS
//					NODE_11: {
//						name: "3020B",                    name: "CSJ00000000001J020142900129",
//						id: 265,
//						layer: "Locations",
//						group: "1",
//						attributeStatus: "populated"
//						attributes: [{ name: "MyAttribute", value: "X"},{ name: "AttrB", value: "Y"}],
//						occupancy: "",
//						type: "Conference Room",
//						tags:  {  1: "projector", 2: " screen", 3: " flat panel", 4: " polycom", 5: " demo", 6: " white board"},
//						linked: true
//                      tborderId: "TBORDER_xxx"
//                      textId: {  1: "TEXT_xxx", 2: "TEXT_yyy", 3: "TEXT_zzz",...}
//						}


var cvjs_currentNode_underbar = "NODE_";
var cvjs_currentNode_name = "unassigned";
var cvjs_currentNode_id = "unassigned";
var cvjs_currentNode_layer = "unassigned";
var cvjs_currentNode_group = "unassigned";
var cvjs_currentNode_attributes = "unassigned";
var cvjs_currentNode_attributeStatus = "unpopulated";
var cvjs_currentNode_occupancy = "unassigned";
var cvjs_currentNode_type = "unassigned";
var cvjs_currentNode_tags = "unassigned";
var cvjs_currentNode_linked = false;   // internal flag for display in creation mode
var cvjs_currentNode_tborderId = "unassigned";
var cvjs_currentNode_textId = [];


// DATA BASE STRUCTURE - STICKYNOTES
//					SNOTE_11: {
//						name: "John Doe",
//						id: 1,
//						layer: "StickyNotes",
//						group: "1",
//						text: "This is the comment of this note, displayed when clicked upon",
//						userid: "USER01"
//						date: ""
//						linked: true
//						}

var cvjs_currentStickyNote_underbar = "SNOTE_";
var cvjs_currentStickyNote_name = "unassigned";
var cvjs_currentStickyNote_id = "unassigned";
var cvjs_currentStickyNote_layer = "RedlineLayer";
var cvjs_currentStickyNote_group = "unassigned";
var cvjs_currentStickyNote_text = "";    // text is always empty
var cvjs_currentStickyNote_userid = "unassigned";
var cvjs_currentStickyNote_date = "unassigned";
var cvjs_currentStickyNote_linked = true;   // internal flag for display in creation mode
var cvjs_currentStickyNote_transform = "none";   // current transformation of active object
var cvjs_currentStickyNote_currentPage= 1;   // current transformation of active object



// DATA BASE STRUCTURE - REDLINE
//					RED_11: {
//						name: "1",
//						id: 1,
//						layer: "Redline",
//						group: "1",
//						color: "'#FF0000",
//						strokeWidth: "3",
//						fill: "none",
//						fill-opacity:"0.01",
//						transform: "none"
//						userid: "none"
//						}


var cvjs_currentRedline_underbar = "RED_";
var cvjs_currentRedline_name = "unassigned";
var cvjs_currentRedline_id = "unassigned";
var cvjs_currentRedline_layer = "RedlineLayer";
var cvjs_currentRedline_group = "unassigned";
var cvjs_currentRedline_color = "#FF0000";
var cvjs_currentRedline_strokeWidth = 3;
var cvjs_currentRedline_fill = "none";
var cvjs_currentRedline_fill_opacity = "0.01";
var cvjs_currentRedline_transform = "none";
var cvjs_currentRedline_userid = "none";
var cvjs_currentRedline_currentPage = 1;
var cvjs_currentRedline_polypath_arrow = "none";
var cvjs_currentRedline_triangle_design = "none";
var cvjs_currentRedline_redline_text = "none";
var cvjs_currentRedline_username = "none";
var cvjs_currentRedline_drawingRotation = 0; 



// DATA CONTROL STRUCTURES REDLINES - STICKYNOTE
// ; separated value lis

var cvjs_hiddenUsersList = "";
var cvjs_lockedUsersList = "";



// DATA BASE STRUCTURE - TEXT BORDER
//					TBORDER_22: {
//						name: "TBORDER_22",
//						id: 22,
//						layer: "tborder22",
//						group: "22",
//						}


var cvjs_currentTBorder_underbar = "TBORDER_";
var cvjs_currentTBorder_name = "unassigned";
var cvjs_currentTBorder_id = "unassigned";
var cvjs_currentTBorder_layer = "unassigned";
var cvjs_currentTBorder_group = "unassigned";


// DATA BASE STRUCTURE - TEXT
//					TEXT_33: {
//						name: "TEXT_33",
//						id: 33,
//						layer: "text33",
//						group: "33",
//						}

var cvjs_currentText_underbar = "TEXT_";
var cvjs_currentText_name = "unassigned";
var cvjs_currentText_id = "unassigned";
var cvjs_currentText_layer = "unassigned";
var cvjs_currentText_group = "unassigned";


// DATA BASE STRUCTURE - HYPERLINK URL
//					URL_01: {
//						name: "urlshortname, if none, the url itself, popupwithcurserover",
//						id: "yy, if unknown then URL_01",
//						comment: "comment field as defined in AutoCAD file",
//						url: "http://linktomylocation or javascript call",
//						layer: "LayerOfUrl",
//						group: "myhyperlinkgroup",
//						linked: true
//						}

var cvjs_currentUrl_underbar = "URL_";
var cvjs_currentUrl_name = "unassigned";
var cvjs_currentUrl_id = "unassigned";
var cvjs_currentUrl_comment = "unassigned";
var cvjs_currentUrl_url = "unassigned";
var cvjs_currentUrl_layer = "unassigned";
var cvjs_currentUrl_group = "unassigned";
var cvjs_currentUrl_linked = true;







var cvjsStickyNoteBody = "<table id=\"note_table\">";
	cvjsStickyNoteBody +="<tr>";
	cvjsStickyNoteBody +="<td>";
	cvjsStickyNoteBody +="<div class=\"cvjs_stickynotes_text_1\" onclick=\"cvjs_edit_note();\">Text NOT initialized!</div>";
	cvjsStickyNoteBody +="</td>";
	cvjsStickyNoteBody +="</tr>";
	cvjsStickyNoteBody +="</table>";

function cvjs_setStickyNoteText(text){

	cvjsStickyNoteBody = "<table id=\"note_table\">";
	cvjsStickyNoteBody +="<tr>";
	cvjsStickyNoteBody +="<td>";
	cvjsStickyNoteBody +="<div class=\"cvjs_stickynotes_text_1\" onclick=\"cvjs_edit_note();\">"+text+"</div>";
	cvjsStickyNoteBody +="</td>";
	cvjsStickyNoteBody +="</tr>";
	cvjsStickyNoteBody +="</table>";

}

function cvjs_setStickyNoteEditText(text){


	cvjsStickyNoteBody = "<table id=\"note_table\">";
	cvjsStickyNoteBody +="<tr>";
	cvjsStickyNoteBody +="<td>";
	cvjsStickyNoteBody +="<textarea class=\"cvjs_stickynotes_edit_text_1\" id=\"sNote_text\" cols=\"33\" rows=\"3\">"+text+"</textarea>";
	cvjsStickyNoteBody +="</td>";
	cvjsStickyNoteBody +="</tr>";
	cvjsStickyNoteBody +="</table>";

//console.log(cvjsStickyNoteBody);

}



jQuery('#stickyNoteSelectIcon').mouseover(function()
	{

//S	  console.log("we are here");

//	   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//	   tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);


	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
	//console.log("absolute");
	   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+20).css("top", e.clientY+document.documentElement.scrollTop-20);
	}
	else{  // we have placed CV-JS inside a div and we have to make a relative position

		//console.log("inside");
		//console.log(position.left+" "+position.top+"tipText="+tipText+" e.clientX "+e.clientX+" e.clientY "+e.clientY+" "+document.documentElement.scrollLeft+" "+document.documentElement.scrollTop);
		//console.log(e.clientX-position.left+document.documentElement.scrollLeft+10);
		//console.log(e.clientY-position.top+document.documentElement.scrollTop-25);
		tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+20).css("top", e.clientY-position.top+document.documentElement.scrollTop-20);
	}



	   tip[cvjs_active_floorplan_div_nr].html(tipText);
	   tip[cvjs_active_floorplan_div_nr].show();

	});


		
	
function cvjs_showIconnoteTip(tipText, icon, n_index){

		var iconPosition;

//		var nodePosition = jQuery(vqStickyNotes[n_index].node).position();

		var qtipdiv = "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
		var nodePosition = jQuery(qtipdiv).position();

		var nodePosition_type = jQuery(qtipdiv).css('position');
		
			
if (cvjs_debug) console.log("qtip div "+nodePosition_type);			
if (cvjs_debug) console.log("we are here "+tipText+"  "+StickNoteQtipDiv+" "+qtipdiv+" "+nodePosition.left+" "+nodePosition.top);

		if (icon==1) iconPosition = jQuery('#imageNoteIcon1').position();
		if (icon==2) iconPosition = jQuery('#imageNoteIcon2').position();
		if (icon==3) iconPosition = jQuery('#imageNoteIcon3').position();

		
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');	


if (cvjs_debug) console.log("iconPosition "+iconPosition.left+"  "+iconPosition.top+"  "+floorplan_pos);
	
	// 3.1.21k
var	scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
	tip[cvjs_active_floorplan_div_nr].css({
		left:nodePosition.left+iconPosition.left-scrollLeft,//+floorplanPosition.left,
		top: nodePosition.top-25-scrollTop, //+floorplanPosition.top-25,
		position:'fixed'
	});
	
//	   tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top+iconPosition.top-35);
	   tip[cvjs_active_floorplan_div_nr].html(tipText);
	   tip[cvjs_active_floorplan_div_nr].show();

		
// set back to absolute
	
}
	
	
	
	
	
	

	
	
var StickNoteQtipDiv = "";

function cvjs_showStickynoteTip(tipText, icon, n_index){

		var iconPosition;

//		var nodePosition = jQuery(vqStickyNotes[n_index].node).position();

		var qtipdiv = "#"+StickNoteQtipDiv;
		var nodePosition = jQuery(qtipdiv).position();

		var nodePosition_type = jQuery(qtipdiv).css('position');
		
if (cvjs_debug) console.log("qtip div "+nodePosition_type);		
		
		
if (cvjs_debug) console.log("we are here "+tipText+"  "+StickNoteQtipDiv+" "+qtipdiv+" "+nodePosition.left+" "+nodePosition.top);

		if (icon==1) iconPosition = jQuery('#stickyNoteIcon1').position();
		if (icon==2) iconPosition = jQuery('#stickyNoteIcon2').position();
		if (icon==3) iconPosition = jQuery('#stickyNoteIcon3').position();
		if (icon==4) iconPosition = jQuery('#stickyNoteIcon4').position();

		
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');	


if (cvjs_debug) console.log("iconPosition "+iconPosition.left+"  "+iconPosition.top+"  "+floorplan_pos);


/****
	
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
	//console.log("absolute");
	   //tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top-25);

	   // 2018-04-20    same in absolute as in normal mode
	   tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top);

	console.log(nodePosition.left+iconPosition.left);
	console.log(nodePosition.top);

	console.log(floorplan_pos+" floorplan_pos "+position.left);
	console.log(position.top);
	

	}
	else{  // we have placed CV-JS inside a div and we have to make a relative position

		console.log(nodePosition.left+"  "+iconPosition.left+"  "+position.left);
		
//		tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left-position.left+document.documentElement.scrollLeft).css("top", nodePosition.top-position.top+document.documentElement.scrollTop-35);
		tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left-position.left).css("top", nodePosition.top-position.top-35);
	}

***/
	
	// 2018-04-20

	tip[cvjs_active_floorplan_div_nr].css({
		left:nodePosition.left+iconPosition.left,
		top: nodePosition.top-25,
		position:'fixed'
	});



	
		
//	   tip[cvjs_active_floorplan_div_nr].css("left", nodePosition.left+iconPosition.left).css("top", nodePosition.top+iconPosition.top-35);
	   tip[cvjs_active_floorplan_div_nr].html(tipText);
	   tip[cvjs_active_floorplan_div_nr].show();

	   if (icon==3 && tipText.indexOf("Inactive")==-1 ){
			//console.log("icon3 "+tipText);
		   //jQuery('#stickyNoteIcon3').css(".cvjs_modal_header_sticky_note_info_2_select");
		   jQuery('#stickyNoteIcon3').css("color", "#FB5300");
	}
	
	

// set back to absolute
	
}

function noteIconChangeHighlight(icon, iconcolor){

//console.log(icon+" "+iconcolor);

   if (icon==3){
	   jQuery('#stickyNoteIcon3').css("color", iconcolor);
	}
	tip[cvjs_active_floorplan_div_nr].hide();
}


var StickNoteEditMode = false;


function cvjs_edit_note(){

if (cvjs_debug_stickynotes) window.alert("edit note!");

	var id = cvjs_StickyNoteClicked();

	for (var snote in vqStickyNotes){
				if (id == vqStickyNotes[snote].data("node")){
					if (vqStickyNotes[snote].data("locked") == true){
if (cvjs_debug)							console.log("StickyNote locked for editing!");
						return;
					}
				}
	}


	// have to find out the current node number
	var n_index = cvjs_StickyNotes_arrayIndex(id);


	if (StickNoteEditMode == false){  // now we have to allow for edit!!

		var tString = vqStickyNotes[n_index].data("text");
		tString = tString.replace(/(<br>)/gm, '\n');

		// have to replace the body with the new body
		cvjs_setStickyNoteEditText(tString);

		var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+vqStickyNotes[n_index].data("id")+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+vqStickyNotes[n_index].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1_nonselect\" id=\"stickyNoteIcon1\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.Inactive+"\',1,"+n_index+");\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1_select\" id=\"stickyNoteIcon2\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onclick=\"cvjs_edit_note();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.SaveNote+"\',2,"+n_index+");\" ><i class=\"glyphicon glyphicon-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1_nonselect\" id=\"stickyNoteIcon3\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.Inactive+"\',3,"+n_index+");\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2_select\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+n_index+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.Cancel+"\',4,"+n_index+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
			"</table>";


		jQuery(vqStickyNotes[n_index].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

if (cvjs_debug_stickynotes) console.log("2 stickynote show");

		jQuery(vqStickyNotes[n_index].node).qtip('show');
		StickNoteEditMode = true;

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}

	}
	else{   // here we change back into a normal text box

	   	tip[cvjs_active_floorplan_div_nr].hide();

		var tString = jQuery('#sNote_text').val();
		tString = tString.replace(/(\r\n|\n|\r)/gm, "<br>");

/*

		while (tString.indexOf('\r')>-1){
			tString = tString.substring(0, tString.indexOf('\r'))+"<br>"+tString.substring(tString.indexOf('\r')+1);
		}
*/

		vqStickyNotes[n_index].data("text", tString);
		cvjs_setStickyNoteText(tString);

		var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+vqStickyNotes[n_index].data("id")+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+vqStickyNotes[n_index].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+n_index+");\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+n_index+");\" ><i class=\"glyphicon glyphicon-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+n_index+");\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+n_index+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+n_index+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
			"</table>";



		jQuery(vqStickyNotes[n_index].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});
if (cvjs_debug_stickynotes) console.log("3 stickynote show");
		jQuery(vqStickyNotes[n_index].node).qtip('show');

		StickNoteEditMode = false;

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}


	}

	//console.log("edit note on stickynote id="+id);
}


function cvjs_move_note(){
	var id = cvjs_StickyNoteClicked();

	//console.log("move note id "+id);
	for (var snote in vqStickyNotes){
				if (id == vqStickyNotes[snote].data("node")){
					if (vqStickyNotes[snote].data("locked") == true){
if (cvjs_debug)							console.log("StickyNote locked for editing!");
						return;
					}
				}
	}

	var n_index = cvjs_StickyNotes_arrayIndex(id);

if (cvjs_debug_stickynotes) console.log("2 stickynote hide");

if (cvjs_debug) console.log("2 stickynote move");


	jQuery(vqStickyNotes[n_index].node).qtip('hide');
	vqStickyNotes[n_index].attr({"fill-opacity": "0.1", 'stroke-opacity': "0.3" });

	tip[cvjs_active_floorplan_div_nr].hide();
	//hidePopStickyNotes();
	cvjs_addHandleFunc_MoveStickyNote();

	//console.log("move note on stickynote id="+id);
}


function cvjs_delete_note(){

	var note = cvjs_StickyNoteClicked();
	
if (cvjs_debug)		console.log("StickyNote delete "+note);

	
	for (var snote in vqStickyNotes){
				if (note == vqStickyNotes[snote].data("node")){
					if (vqStickyNotes[snote].data("locked") == true){
if (cvjs_debug)							console.log("StickyNote locked for editing!");
						return;
					}
				}
	}

	cvjs_setUpStickyNotes_deleteNode(note);
}




/**
 * Retrieves the current maximum Node Id for all Space Objects, retrieve and increment when creating new graphical objects
 * @return {string} maxNode - the current maximum node id
 * @deprecated
 */

function cvjs_currentMaxNodeId(){

var maxNode = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		var vqid = vqid.substring(5);  //  NODE_
		var node = parseInt(vqid);
		if (node>maxNode)
			maxNode = node;
	}
	return maxNode;
}


/**
 * Retrieves the current maximum Node Id for all Space Objects, retrieve and increment when creating new graphical objects
 * @return {string} maxNode - the current maximum node id
 */

function cvjs_currentMaxSpaceNodeId(){

var maxNode = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		var vqid = vqid.substring(5);  //  NODE_
		var node = parseInt(vqid);
		if (node>maxNode)
			maxNode = node;
	}
	return maxNode;
}



/**
 * Add userId to list of redline and stickyNote users to be hidden (on load)
 * @param {string} userId - the userId to be added to the hidden users list
 */

function cvjs_addUserIdToHiddenRedlineUsers(userId) {

	if (cvjs_hiddenUsersList == ""){
	 cvjs_hiddenUsersList+=userId;
	}
	else{
	 cvjs_hiddenUsersList+=";"+userId;
	}
}


/**
 * Add userId to list of redline and stickyNote users to be locked (on load)
 * @param {string} userId - the userId to be added to the hidden users list
 */

function cvjs_addUserIdToLockedRedlineUsers(userId) {

	if (cvjs_lockedUsersList == ""){
	 cvjs_lockedUsersList+=userId;
	}
	else{
	 cvjs_lockedUsersList+=";"+userId;
	}
}


/**
 * Clear all redline and stickyNote userId from hidden users list
 */

function cvjs_clearAllRedlineHiddenUsers() {

	 cvjs_hiddenUsersList="";

}

/**
 * Clear all redline and stickyNote userId from locked users list
 */

function cvjs_clearAllRedlineLockedUsers() {

	 cvjs_lockedUsersList="";

}


/**
 * Lists all redline and stickyNote userId from hidden users list
 * @return {String} value - Returns Id list
 */

function cvjs_getRedlineHiddenUsersList() {

	 return cvjs_hiddenUsersList;

}

/**
 * Lists all redline and stickyNote userId from locked users list
 * @return {String} value - Returns Id list
 */

function cvjs_getRedlineLockedUsersList() {

	 return cvjs_lockedUsersList;

}





/**
 * Generate list with all redlines users
  * @return {String} value - Returns Id list, separated by ;
*/

function cvjs_getAllRedlines_UserIdList() {

	var userList = "";
	for (var hideuser in userList){

//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1)){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	}
	
	return (userList);
}



/**
 * Generate list with all redline text and their corresponding userId
  * @return {String} value - Returns Id, redline text list; (userid,redlinetext);(userid,redlinetext)
*/

function cvjs_getAllRedlines_TextList() {

	var userList = "";

	//console.log("1");
	
	
if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		
	
	for (var redNote in cvjs_stickyNotesRedlines){

			//console.log("redNote "+redNote+"  "+cvjs_stickyNotesRedlines[redNote].redline_text);

			
					try{
					if (cvjs_stickyNotesRedlines[redNote].text!=undefined  && ( cvjs_stickyNotesRedlines[redNote].text!="none" && cvjs_stickyNotesRedlines[redNote].text!=-1 ) ){

					//console.log(" 1  TEXT="+cvjs_stickyNotesRedlines[redNote].redline_text+"  "+cvjs_stickyNotesRedlines[redNote].userid);
					
							if (userList=="") 
								userList = "("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + userList.indexOf(cvjs_stickyNotesRedlines[redNote].redline_text) + "\")" ;
							else
								userList = userList+";"+"("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + userList.indexOf(cvjs_stickyNotesRedlines[redNote].redline_text) + "\")" ;
					}
					}catch (err) {console.log(err);}
	}

		
		
		
			
	for (var redNote in cvjs_stickyNotesRedlines){

			//console.log("QQredNote "+redNote+"  "+cvjs_stickyNotesRedlines[redNote].redline_text);

			
					try{
			
			
					if (cvjs_stickyNotesRedlines[redNote].redline_text!=undefined  && ( cvjs_stickyNotesRedlines[redNote].redline_text!="none" && cvjs_stickyNotesRedlines[redNote].redline_text!=-1)){

					//console.log("MMM 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].redline_text);
					
							if (userList=="") 
								userList = "("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + cvjs_stickyNotesRedlines[redNote].redline_text + "\")" ;
							else
								userList = userList+";"+"("+cvjs_stickyNotesRedlines[redNote].userid + ",\"" + cvjs_stickyNotesRedlines[redNote].redline_text + "\")" ;
					}
					}catch (err) {console.log(err);}
	}
	
	return (userList);
}


/**
 * Hide all redlines except named userId
 * @param {string} userId - the userId to be displayed, all other hidden
 
 */

function cvjs_hideAllRedlines_ExceptUser(userId) {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_hiddenUsersList = "";
	var userList = "";


//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=userId) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=userId ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	

	cvjs_hiddenUsersList = userList;
	console.log("USER LIST "+userList);
	cvjs_hideAllRedlines_HiddenUsersList();
}



/**
 * Lock all redlines except named userId
 * @param {string} userId - the userId to be editable, all other locked
 */

function cvjs_lockAllRedlines_ExceptUser(userId) {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_lockedUsersList = "";
	var userList = "";


	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=userId) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=userId ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	
	
	cvjs_lockedUsersList = userList;
	console.log("USER LIST "+userList);
	cvjs_lockAllRedlines_LockedUsersList();
}




/**
 * Hide all redlines except current userId
 */

function cvjs_hideAllRedlines_ExceptCurrentUser() {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_hiddenUsersList = "";
	var userList = "";

	for (var hideuser in userList){

//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	}

	
	cvjs_hiddenUsersList = userList;

	console.log("USER LIST "+userList);

	cvjs_hideAllRedlines_HiddenUsersList();
	
}



/**
 * Lock all redlines except current userId
 */

function cvjs_lockAllRedlines_ExceptCurrentUser() {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	cvjs_lockedUsersList = "";
	var userList = "";

	for (var hideuser in userList){

//	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
//			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

//					if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
					
							if ((userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1) && (cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid) ){

							console.log(" 1 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid ;
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid ;
							}
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
							if (userList.indexOf(cvjs_stickyNotesRedlines[redNote].userid)==-1 && cvjs_stickyNotesRedlines[redNote].userid!=cvjs_currentRedline_userid ){

							console.log(" 2 "+cvjs_currentRedline_userid+"  "+cvjs_stickyNotesRedlines[redNote].userid);
							
									if (userList=="") 
										userList = cvjs_stickyNotesRedlines[redNote].userid 
									else
										userList = userList+";"+cvjs_stickyNotesRedlines[redNote].userid 
							}
					
			}
		}

	}

	
	cvjs_lockedUsersList = userList;

	console.log("USER LIST "+userList);

	cvjs_lockAllRedlines_LockedUsersList();
	
}





/**
 * Hide all redlines with userId on the Hidden Users List
 */

function cvjs_hideAllRedlines_HiddenUsersList() {


//	var i=0;
//	vqRedlines[i].attr(hide);
//	vqStickyNotes[i].attr(hide);
	//console.log(userList);

	var userList = cvjs_hiddenUsersList.split(";");

	for (var hideuser in userList){

	if (cvjs_debug) console.log("loop "+hideuser+"  "+userList[hideuser]);

		for (var snote in vqStickyNotes){
			
			if (cvjs_debug) console.log("snote "+snote);
			
			for (var redNote in cvjs_stickyNotesRedlines){

						if (cvjs_debug) console.log("redNote "+redNote);

					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){

	if (cvjs_debug) console.log("notes redNote"+redNote+" "+cvjs_stickyNotesRedlines[redNote].userid);
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[hideuser])
							vqStickyNotes[snote].attr(hide);
					}
			}
		}

		for (var snote in vqRedlines){

			if (cvjs_debug) console.log("snote Red "+snote);

			for (var redNote in cvjs_stickyNotesRedlines){

				if (cvjs_debug) console.log("redNote "+redNote+"  vqRedlines[snote].data(node) "+vqRedlines[snote].data("node")+"  "+cvjs_stickyNotesRedlines[redNote].node);
						if (cvjs_stickyNotesRedlines[redNote].node == vqRedlines[snote].data("node")){
if (cvjs_debug) console.log("redlines redNote"+redNote+"  "+cvjs_stickyNotesRedlines[redNote].userid+" "+userList[hideuser]+"X"+"  "+snote+"  "+(cvjs_stickyNotesRedlines[redNote].userid == userList[hideuser]));
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[hideuser])
							vqRedlines[snote].attr(hide);
					}
			}
		}

	}

}


/**
 * Lock all redlines with userId on the Lock Users List
 */

function cvjs_lockAllRedlines_LockedUsersList() {

	var userList = cvjs_lockedUsersList.split(";");

	for (var lockeduser in userList){

	if (cvjs_debug) console.log("loop "+lockeduser+"  "+userList[lockeduser]);

		for (var snote in vqStickyNotes){
			for (var redNote in cvjs_stickyNotesRedlines){
					if (cvjs_stickyNotesRedlines[redNote].node == vqStickyNotes[snote].data("node")){
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[lockeduser]){
							vqStickyNotes[snote].data("locked",true);
							if (cvjs_debug) console.log("locked note "+redNote);
						}
					}
			}
		}

		for (var snote in vqRedlines){
			for (var redNote in cvjs_stickyNotesRedlines){
					if (cvjs_stickyNotesRedlines[redNote].node == vqRedlines[snote].data("node")){
						if (cvjs_stickyNotesRedlines[redNote].userid == userList[lockeduser]){
							vqRedlines[snote].data("locked",true);
							if (cvjs_debug) console.log("locked note "+redNote);
						}
					}
			}
		}
	}

}



/**
 * Sets the current Space Node values, these settings will be used to intialize space objects subsequently drawn with the draw methods
 * @param {string} currentNode_underbar - the NodeId linking data with graphical objects, of the form "NODE_xxx", where xxx is a number
 * @param {string} currentNode_name - name of the space object to be visualized at the modal header
 * @param {string} currentNode_id - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {string} currentNode_layer - layer of the Space Object
 * @param {string} currentNode_group - group of the Space Object
 * @param {string} currentNode_attributes - a list of attributes for the Space Object
 * @param {string} currentNode_attributeStatus - status of attributes list, can be populated or unpopulated, controls if data is pulled externally
 * @param {string} currentNode_type - the type attribute of the Space Object, the type is displayed at the modal header
 * @param {string} currentNode_tags - list of tags assocated with the object, for retrieval at custom developed highlight
 * @param {string} currentNode_occupancy - tag to describe occupancy, for retrieval at custom developed highlight
 * @param {boolean} currentNode_linked - boolean variable to tell if object is associated with a database object or not. Depending on this flag highlight will differ.
 * deprecated
 */


function cvjs_setCurrentNodeValues( currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked) {

	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;

	//console.log("all nodes set! id="+cvjs_currentNode_id+"    NODE_underbar "+cvjs_currentNode_underbar);
}



/**
 * Sets the current Space Node values, these settings will be used to intialize space objects subsequently drawn with the draw methods
 * @param {string} currentNode_underbar - the NodeId linking data with graphical obejcts, of the form "NODE_xxx", where xxx is a number
 * @param {string} currentNode_name - name of the space object to be visualized at the modal header
 * @param {string} currentNode_id - id of the object, used for pop-up highlight in "non-modal display" and for linking Space Objects with database entries
 * @param {string} currentNode_layer - layer of the Space Object
 * @param {string} currentNode_group - group of the Space Object
 * @param {string} currentNode_attributes - a list of attributes for the Space Object
 * @param {string} currentNode_attributeStatus - status of attributes list, can be populated or unpopulated, controls if data is pulled externally
 * @param {string} currentNode_type - the type attribute of the Space Object, the type is displayed at the modal header
 * @param {string} currentNode_tags - list of tags assocated with the object, for retrieval at custom developed highlight
 * @param {string} currentNode_occupancy - tag to describe occupancy, for retrieval at custom developed highlight
 * @param {boolean} currentNode_linked - boolean variable to tell if object is associated with a database object or not. Depending on this flag highlight will differ.
 */


function cvjs_setCurrentSpaceObjectNodeValues( currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked) {

	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;

	//console.log("all nodes set! id="+cvjs_currentNode_id+"    NODE_underbar "+cvjs_currentNode_underbar);
}



/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_underbar - the NodeId linking data with graphical objects, of the form "NOTE_xxx", where xxx is a number
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_id - id of the Sticky Note object, used for pop-up highlight
 * @param {string} currentStickyNote_layer - layer of the Sticky Note
 * @param {string} currentStickyNote_group - group of the Sticky Note
 * @param {string} currentStickyNote_text - text in the Sticky Note textfield, typically this is initially empty as users interactively add text to StickyNotes.
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 * @param {string} currentStickyNote_date - creation date of the StickyNotes.
 * @param {boolean} currentStickyNote_linked - boolean variable to tell if object is linked or not, internally controlled
 */

function cvjs_setCurrentStickyNoteValues(currentStickyNote_underbar, currentStickyNote_name, currentStickyNote_id, currentStickyNote_layer, currentStickyNote_group, currentStickyNote_text, currentStickyNote_userid, currentStickyNote_date, currentStickyNote_linked) {

	cvjs_currentStickyNote_underbar = currentStickyNote_underbar;
	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_id = currentStickyNote_id;
	cvjs_currentStickyNote_layer = currentStickyNote_layer;
	cvjs_currentStickyNote_group = currentStickyNote_group;
	cvjs_currentStickyNote_text = currentStickyNote_text;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;
	cvjs_currentStickyNote_date = currentStickyNote_date;
	cvjs_currentStickyNote_linked = currentStickyNote_linked;   // internal flag for display in creation mode

	//console.log(currentStickyNote_date);
}




/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_underbar - the NodeId linking data with graphical objects, of the form "NOTE_xxx", where xxx is a number
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_id - id of the Sticky Note object, used for pop-up highlight
 * @param {string} currentStickyNote_layer - layer of the Sticky Note
 * @param {string} currentStickyNote_group - group of the Sticky Note
 * @param {string} currentStickyNote_text - text in the Sticky Note textfield, typically this is initially empty as users interactively add text to StickyNotes.
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 * @param {string} currentStickyNote_date - creation date of the StickyNotes.
 * @param {boolean} currentStickyNote_linked - boolean variable to tell if object is linked or not, internally controlled
 * @param {boolean} currentStickyNote_transform - transformation of note
 * @param {string} currentStickyNote_currentPage - page on which the note is on
 * @param {int} currentStickyNote_drawingRotation - rotation of page on which the note is on
 */

function cvjs_setCurrentStickyNoteValues_All(currentStickyNote_underbar, currentStickyNote_name, currentStickyNote_id, currentStickyNote_layer, currentStickyNote_group, currentStickyNote_text, currentStickyNote_userid, currentStickyNote_date, currentStickyNote_linked, currentStickyNote_transform, currentStickyNote_currentPage, currentStickyNote_drawingRotation) {

	cvjs_currentStickyNote_underbar = currentStickyNote_underbar;
	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_id = currentStickyNote_id;
	cvjs_currentStickyNote_layer = currentStickyNote_layer;
	cvjs_currentStickyNote_group = currentStickyNote_group;
	cvjs_currentStickyNote_text = currentStickyNote_text;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;
	cvjs_currentStickyNote_date = currentStickyNote_date;
	cvjs_currentStickyNote_linked = currentStickyNote_linked;   // internal flag for display in creation mode
	cvjs_currentStickyNote_transform = currentStickyNote_transform;
	cvjs_currentStickyNote_currentPage = currentStickyNote_currentPage;
	cvjs_currentStickyNote_drawingRotation = currentStickyNote_drawingRotation;
	//console.log(currentStickyNote_date);
}




/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 */

function cvjs_setCurrentStickyNoteValues_NameUserId(currentStickyNote_name, currentStickyNote_userid ) {

	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;

	//console.log(cvjs_currentStickyNote_name);
}





/**
 * Sets the current Sticky Note values, these settings will be used to intialize Sticky Notes subsequently drawn with the draw methods
 * @param {string} currentStickyNote_name - name of the Sticky Note  - user name displayed at StickyNote modal
 * @param {string} currentStickyNote_userid - UserID of StickyNotes.
 * @param {string} currentStickyNote_date - creation date of the StickyNotes.
 */

function cvjs_setCurrentStickyNoteValues_NameUserIdDate(currentStickyNote_name, currentStickyNote_userid, currentStickyNote_date) {

	cvjs_currentStickyNote_name = currentStickyNote_name;
	cvjs_currentStickyNote_userid = currentStickyNote_userid;
	cvjs_currentStickyNote_date = currentStickyNote_date;

	//console.log(currentStickyNote_date);
}




/**
 * Sets the current Redlines name and userid values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_userid - redline userid
 */

function cvjs_setCurrentRedlineValues_NameUserid(currentRedline_username, currentRedline_userid){

	cvjs_currentRedline_userid = currentRedline_userid;
	cvjs_currentRedline_username = currentRedline_username;

}



/**
 * Sets the current Redlines values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_userid - redline userid
 */

function cvjs_setCurrentRedlineValues_Userid(currentRedline_userid){

	cvjs_currentRedline_userid = currentRedline_userid;

}






/**
 * Sets the current Redlines values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_underbar - the NodeId linking data with graphical objects, of the form "RED_xxx", where xxx is a number
 * @param {string} currentRedline_name - id of the Redline, association to user producing markup
 * @param {string} currentRedline_id - id of the Redline
 * @param {string} currentRedline_layer - layer of the Redline
 * @param {string} currentRedline_group - group of the Redline
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 * @param {int} currentRedline_drawingRotation - rotation angle of drawing
 
 */


function cvjs_setCurrentRedlineValues(currentRedline_underbar, currentRedline_name, currentRedline_id, currentRedline_layer, currentRedline_group, currentRedline_color, currentRedline_strokeWidth,  currentRedline_drawingRotation) {

	cvjs_currentRedline_underbar = currentRedline_underbar;
	cvjs_currentRedline_name = currentRedline_name;
	cvjs_currentRedline_id = currentRedline_id;
	cvjs_currentRedline_layer = currentRedline_layer;
	cvjs_currentRedline_group = currentRedline_group;
 	cvjs_currentRedline_color = currentRedline_color;
	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;
	cvjs_currentRedline_drawingRotation =  currentRedline_drawingRotation;

}



/**
 * Sets the current Redlines values, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_underbar - the NodeId linking data with graphical objects, of the form "RED_xxx", where xxx is a number
 * @param {string} currentRedline_name - id of the Redline, association to user producing markup
 * @param {string} currentRedline_id - id of the Redline
 * @param {string} currentRedline_layer - layer of the Redline
 * @param {string} currentRedline_group - group of the Redline
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 * @param {string} currentRedline_fill - color of the Redline fill values, for example "#FF0000".
 * @param {float} currentRedline_fill_opacity - fill opacity of filled redline
 * @param {string} currentRedline_transform - transform (redline arrow only)
 * @param {string} currentRedline_username - redline username
 * @param {string} currentRedline_userid - redline userid
 * @param {int} currentRedline_currentPage - page on which the redline is
 * @param {string} currentRedline_polypath_arrow - arrow redline geometry
 * @param {string} currentRedline_triangle_design - arrow redline geometry
 * @param {string} currentRedline_redline_text - text object in redline text
 * @param {string} currentRedline_drawingRotation - rotation of the page the redline is done on
 */


function cvjs_setCurrentRedlineValues_All(currentRedline_underbar, currentRedline_name, currentRedline_id, currentRedline_layer, currentRedline_group, currentRedline_color, currentRedline_strokeWidth, currentRedline_fill, currentRedline_fill_opacity, currentRedline_transform, currentRedline_username, currentRedline_userid, currentRedline_currentPage, currentRedline_polypath_arrow, currentRedline_triangle_design, currentRedline_redline_text, currentRedline_drawingRotation ) {

	cvjs_currentRedline_underbar = currentRedline_underbar;
	cvjs_currentRedline_name = currentRedline_name;
	cvjs_currentRedline_id = currentRedline_id;
	cvjs_currentRedline_layer = currentRedline_layer;
	cvjs_currentRedline_group = currentRedline_group;
 	cvjs_currentRedline_color = currentRedline_color;
	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;
	cvjs_currentRedline_fill = currentRedline_fill;
	cvjs_currentRedline_fill_opacity = currentRedline_fill_opacity;
	cvjs_currentRedline_transform = currentRedline_transform;

	cvjs_currentRedline_username = currentRedline_username;
	cvjs_currentRedline_userid = currentRedline_userid;

	cvjs_currentRedline_currentPage = currentRedline_currentPage;

	cvjs_currentRedline_polypath_arrow = currentRedline_polypath_arrow;
	cvjs_currentRedline_triangle_design = currentRedline_triangle_design;

	cvjs_currentRedline_redline_text = currentRedline_redline_text;
	cvjs_currentRedline_drawingRotation = currentRedline_drawingRotation;
	
	//console.log("in _All "+cvjs_currentRedline_strokeWidth);
}




/**
 * Sets the current Redlines values, color, strokewidth only, these settings will be used to intialize redlines subsequently drawn with the draw methods
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 */


function cvjs_setCurrentRedlineValues_ColorStokeWidth(currentRedline_color, currentRedline_strokeWidth) {

 	cvjs_currentRedline_color = currentRedline_color;
	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;

}


/**
 * Sets the current Redlines value
 * @param {string} currentRedline_color - color of the Redline as a hex values, for example "#FF0000".
 */


function cvjs_setCurrentRedlineValues_Color(currentRedline_color) {

 	cvjs_currentRedline_color = currentRedline_color;

}


/**
 * Sets the current Redlines value
 * @param {float} currentRedline_StrokeWidth - width of the Redline
 */


function cvjs_setCurrentRedlineValues_StokeWidth(currentRedline_strokeWidth) {

	cvjs_currentRedline_strokeWidth = currentRedline_strokeWidth;

}











function cvjs_setCurrentNodeValuesFromExistingNode( currentNode_underbar ) {

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		if (vqid == currentNode_underbar)
			{
				cvjs_currentNode_underbar = currentNode_underbar;
				cvjs_currentNode_name = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
				cvjs_currentNode_id = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
				cvjs_currentNode_layer = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");
				cvjs_currentNode_group = vqRooms[cvjs_active_floorplan_div_nr][spc].data("group");
				cvjs_currentNode_attributes = vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributes");
				cvjs_currentNode_attributeStatus = vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributeStatus");
				cvjs_currentNode_type = vqRooms[cvjs_active_floorplan_div_nr][spc].data("type");
				cvjs_currentNode_tags = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags");
				cvjs_currentNode_occupancy = vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy");
				cvjs_currentNode_linked = vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked");
			}
	}

}


function cvjs_overwriteNodeValues(overwriteNode_underbar, overwriteNode_id, overwriteNode_name, overwriteNode_layer, overwriteNode_group, overwriteNode_attributes, overwriteNode_attributeStatus, overwriteNode_type, overwriteNode_tags, overwriteNode_occupancy, overwriteNode_linked) {

//console.log(overwriteNode_underbar+" "+ overwriteNode_id+" "+ overwriteNode_name+" "+ overwriteNode_layer+" "+ overwriteNode_group+" "+ overwriteNode_attributes+" "+ overwriteNode_attributeStatus+" "+ overwriteNode_type+" "+ overwriteNode_tags+" "+ overwriteNode_occupancy+" "+ overwriteNode_linked  );

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		if (vqid == overwriteNode_underbar)
			{
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("id");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("name");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("layer");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("group");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("attributes");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("attributeStatus");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("type");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("tags");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("occupancy");
				vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("linked");

				vqRooms[cvjs_active_floorplan_div_nr][spc].data("id", overwriteNode_id);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("name", overwriteNode_name);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer", overwriteNode_layer);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("group", overwriteNode_group);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributes", overwriteNode_attributes);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("attributeStatus", overwriteNode_attributeStatus);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("type", overwriteNode_type);

				// how do we handle these guys?
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags", overwriteNode_tags);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy", overwriteNode_occupancy);
				vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked", overwriteNode_linked);

				// do not overwrite handle!! ("handle", floor.rooms[bRoom].handle);  // 3.2.02e
				
				

//console.log("linked "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked"));

				if (cvjs_supressPopUpModal == true){

						jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: "", title: ""},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'true'});

						jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip('destroy');
				}
				else{

					var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+overwriteNode_id+"\');\">"+overwriteNode_name+"</td>"+
						"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+spc+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
						"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+overwriteNode_type+"</h4></td></tr></table>";
if (cvjs_debug)		console.log(htitle);
if (cvjs_debug)		console.log(vqRooms[cvjs_active_floorplan_div_nr][spc]);
			//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

					if (dual_hbody_flag){
						if ( parseInt(overwriteNode_id) >=-1){
							jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: hbody, title: htitle},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'false'});
						}else{
							jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: hbody_2, title: htitle},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'false'});
						}
					}

					if (!dual_hbody_flag){
							jQuery(vqRooms[cvjs_active_floorplan_div_nr][spc].node).qtip({content: {text: hbody, title: htitle},
								style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
								position: {my: 'bottom center', at: 'top left'},
								hideOnHTMLClick: 'false'});
					}

				}

			}
	}

}









// BEGIN - Setup NEW NODE - room graphics objects

// OBJECT DEFINITIONS - vqRooms
//	var cItem52= paper.path("M343.81,21.21V45.44H381.90V21.21H343.81Z ").attr({fill: "#fff", "fill-opacity":"0.01"})
//	.data("node", "NODE_11");
//	vqRooms.push(cItem52);



function cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, graphicsObject){

	var cItemX = graphicsObject.data("node", cvjs_currentNode_underbar);
	
	//vqRooms.push(cItemX);
	// 3.0.14e
	vqRooms[cvjs_active_floorplan_div_nr].push(cItemX);
	
}



function cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, graphicsObject){

	var  circle= graphicsObject.toString();
	//console.log(circle);

	var tTransform_c = "S"+(0.001);
	graphicsObject.attr({'transform': tTransform_c , "opacity" : "1"});

	graphicsObject = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#000000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});

	var p_cx = circle.indexOf(" cx=");
	var s1_cx = circle.substring(p_cx+5);
	var p2_cx = s1_cx.indexOf("\"");
	var cx = s1_cx.substring(0, p2_cx)

	var p_cy = circle.indexOf(" cy=");
	var s1_cy = circle.substring(p_cy+5);
	var p2_cy = s1_cy.indexOf("\"");
	var cy = s1_cy.substring(0, p2_cy)


	var p_r = circle.indexOf(" r=");
	var s1_r = circle.substring(p_r+4);
	var p2_r = s1_r.indexOf("\"");
	var r = s1_r.substring(0, p2_r)

	//console.log(cx+" "+cy+" "+r);

	var p_t = circle.indexOf("transform=");
	var s1_t = circle.substring(p_t+11);
	var p2_t = s1_t.indexOf("\"");
	var t = s1_t.substring(0, p2_t)

	//console.log(t);

	if (t.indexOf("matrix")>-1){

		//console.log("matrix");
		var p_m = circle.indexOf("(");
		var s1_m = circle.substring(p_m+1);
		var p2_m = s1_m.indexOf(",");
		var m = s1_m.substring(0, p2_m)
	//console.log(m);
		r=m;
		for (var i=0; i<4; i++){
	//console.log(i+" "+s1_m);
			p_m = s1_m.indexOf(",");
			s1_m = s1_m.substring(p_m+1);
		}

		p_m = s1_m.indexOf(",");
		cx = s1_m.substring(0, p_m);

		s1_m = s1_m.substring(p_m+1);

		p_m = s1_m.indexOf(")");
		cy = s1_m.substring(0, p_m);

		//console.log("after loop "+cx+" "+cy+" "+r)

	}
	
	
	//vqRooms.push(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx, cy, r, r).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"}).data("node", cvjs_currentNode_underbar));


	// 3.0.14e
	vqRooms[cvjs_active_floorplan_div_nr].push(cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(cx, cy, r, r).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"}).data("node", cvjs_currentNode_underbar));

	
	
	
//	vqRooms.push(cvjs_rPaper[cvjs_active_floorplan_div_nr].path(path1).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"}).data("node", cvjs_currentNode_underbar));
//	console.log("polygon "+path1);
}

// END - Setup NEW NODE - room graphics objects


// BEGIN - Setup NEW NODE - sticky notes graphics objects

function cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentNode_underbar, graphicsObject){

	var cStickyNoteItemX = graphicsObject.data("node", cvjs_currentNode_underbar);
	vqStickyNotes.push(cStickyNoteItemX);

}

// END - Setup NEW NODE - sticky note graphics objects



// BEGIN - Setup NEW NODE - sticky notes graphics objects

function cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, graphicsObject){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);

	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", "#FFF");
		vqRedlines[redId].data("fill_opacity", "0.01");
		vqRedlines[redId].data("transform", "none");
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", "none");
		vqRedlines[redId].data("polypath_arrow", "none");
		vqRedlines[redId].data("redline_text", "none");

		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		

		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});


		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});			
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
					
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
				
						
/*				
								
				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
//				   tip[cvjs_active_floorplan_div_nr].css("left", e.screenX-tip_width-20).css("top", e.screenY-20);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/

			   });


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});


	}

	//console.log(vqRedlines[redId]);
}


function cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, graphicsObject, R_fill, R_opacity){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);
	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", R_fill);
		vqRedlines[redId].data("fill_opacity", R_opacity);
		vqRedlines[redId].data("transform", "none");
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", "none");
		vqRedlines[redId].data("polypath_arrow", "none");
		vqRedlines[redId].data("redline_text", "none");

		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});

		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
					
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
				
/*				
				
				
				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/

			   });


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});

	}

}


function cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar, graphicsObject, transform, triangle_design, polypath_arrow){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);

	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

//console.log("triangle design "+triangle_design);


		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", "#FFF");
		vqRedlines[redId].data("fill_opacity", "0.01");
		vqRedlines[redId].data("transform", transform);
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", triangle_design);
		vqRedlines[redId].data("polypath_arrow", polypath_arrow);
		vqRedlines[redId].data("redline_text", "none");

		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});

		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});	
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();


				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
				

/*

				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/	


	});


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});

	}
	//console.log(vqRedlines[redId]);
}



function cvjs_addVqRedlinesGraphics_newNodeText(cvjs_currentRedline_underbar, graphicsObject, transform, textString){

	var cRedlineItemX = graphicsObject.data("node", cvjs_currentRedline_underbar);

	vqRedlines.push(cRedlineItemX);

	var redId = vqRedlines.length-1;

	if (redId >=0){

//console.log("triangle design "+triangle_design);


		vqRedlines[redId].data("name", cvjs_currentRedline_name);
		vqRedlines[redId].data("id", cvjs_currentRedline_id);
		vqRedlines[redId].data("layer", cvjs_currentRedline_layer);
		vqRedlines[redId].data("group", cvjs_currentRedline_group);
		vqRedlines[redId].data("color", cvjs_currentRedline_color);
		vqRedlines[redId].data("strokeWidth", cvjs_currentRedline_strokeWidth);
		vqRedlines[redId].data("fill", "#FFF");
		vqRedlines[redId].data("fill_opacity", "0.01");
		vqRedlines[redId].data("transform", transform);
		vqRedlines[redId].data("username", cvjs_currentRedline_username);
		vqRedlines[redId].data("userid", cvjs_currentRedline_userid);
		vqRedlines[redId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

		vqRedlines[redId].data("triangle_design", "none");
		vqRedlines[redId].data("polypath_arrow", "none");
		vqRedlines[redId].data("redline_text", textString);
		
		vqRedlines[redId].data("drawingRotation", cvjs_currentRedline_drawingRotation);
		
		vqRedlines[redId].mousedown(function (e){
			if (cvjs_deleteRedlineFlag ){
				cvjs_deleteRedlineFlag = false;
				// delete redline
				var rednode = this.data("node");
				//console.log(rednode);
				cvjs_setUpVqRedlines_deleteNode(rednode);
			}

		});



		vqRedlines[redId].mouseover(function (e){

				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});			
		
				var tipText = "UserName: "+this.data("username");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
				

				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
/*				
				if (e.clientX > floorplan_width)
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft-tip_width-20).css("top", e.clientY+document.body.scrollTop-25);
				else
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+10).css("top", e.clientY+document.body.scrollTop-25);
*/
			   });


		vqRedlines[redId].mouseout(function (e){
				tip[cvjs_active_floorplan_div_nr].hide();
		});


	}

	//console.log(vqRedlines[redId]);
}






// END - Setup NEW NODE - sticky note graphics objects





// BEGIN - Setup NEW NODE - room data objects

function cvjs_setUpVqRooms_currentNode(paper, cvjs_currentNode_underbar)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);

// 3.2.01i
tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});	

var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		// 2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

	if (layer_vqrooms[cvjs_active_floorplan_div_nr] == "")
		layer_vqrooms[cvjs_active_floorplan_div_nr] = paper.g();

	var room;
	try {
		// room = vqRooms.length-1;
		// 3.0.14e
		room = vqRooms[cvjs_active_floorplan_div_nr].length-1;
	}
	catch (err){		
		console.log("vqRooms [cvjs_active_floorplan_div_nr] not defined! "+err);
	}	
	if (cvjs_debug) console.log(" room " +room);
	
	//console.log("number of rooms "+room);

	rid = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

//	console.log("rid="+rid+" "+vqRooms[cvjs_active_floorplan_div_nr][room]+" "+ (cvjs_currentNode_underbar == rid));

	if (cvjs_currentNode_underbar == rid)
	{
		// identify tags
		var allTags = cvjs_currentNode_tags;
		// loop over tags
		if (cvjs_currentNode_tags == "unassigned"){
			vqRooms[cvjs_active_floorplan_div_nr][room].data("tags", "unassigned");
		}
		else{
			var ii=1;
			for (var tags in allTags){
				var tagx = "tag"+ii;
				var tagData = allTags[tags];
				while (tagData.charAt(0) == ' ')
					tagData = tagData.substr(1);
				tagData = tagData.replace(/ /gi, "&nbsp;");
				vqRooms[cvjs_active_floorplan_div_nr][room].data( tagx, tagData);
			//	vqRooms[cvjs_active_floorplan_div_nr][room].attr( tagx, tagData);
				ii++;
			}
		}

		vqRooms[cvjs_active_floorplan_div_nr][room].data("occupancy", cvjs_currentNode_occupancy);
		vqRooms[cvjs_active_floorplan_div_nr][room].data("name", cvjs_currentNode_name );
		vqRooms[cvjs_active_floorplan_div_nr][room].data("type", cvjs_currentNode_type);
		vqRooms[cvjs_active_floorplan_div_nr][room].data("id", cvjs_currentNode_id);
//		vqRooms[cvjs_active_floorplan_div_nr][room].data("rmid", room);     /// NOTE - NOT USED   2015-9-3

		try{

			vqRooms[cvjs_active_floorplan_div_nr][room].data("layer", cvjs_currentNode_layer);
			vqRooms[cvjs_active_floorplan_div_nr][room].data("group", cvjs_currentNode_group);
			vqRooms[cvjs_active_floorplan_div_nr][room].data("linked", cvjs_currentNode_linked);

			// no handle known
			vqRooms[cvjs_active_floorplan_div_nr][room].data("handle", "");   // 3.2.02e
			
			
			vqRooms[cvjs_active_floorplan_div_nr][room].data("attributes", cvjs_currentNode_attributes);
			vqRooms[cvjs_active_floorplan_div_nr][room].data("attributeStatus", cvjs_currentNode_attributeStatus);

		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
			vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);
		}
		else{
			if (vqRooms[cvjs_active_floorplan_div_nr][room].data("linked")){
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_linked);
			}
			else{
				vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable


		if (cvjs_supressPopUpModal == true){

				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip('destroy');
		}
		else{
	//console.log("after setting clear background "+vqRooms[cvjs_active_floorplan_div_nr][room]);

			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+cvjs_currentNode_id+"\');\">"+cvjs_currentNode_name+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+cvjs_currentNode_type+"</h4></td></tr></table>";
	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(cvjs_currentNode_id) >=-1){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}
		}

		vqRooms[cvjs_active_floorplan_div_nr][room].mousedown(function(e){
			vqRoomMouseSelect = true;
			
if (cvjs_debug) console.log("A Domousedown");			
			
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
			
					
		}).mouseout(function(e){  // 3.3.02a

				jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
				var rm = findRoom(currentRoomId);				
				if (!vqRoomMouseSelect){
					

						if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
						if (cvjs_debug) console.log("room="+rm+" defaultcolor" );
							vqRooms[cvjs_active_floorplan_div_nr][rm].attr(defaultColor);
						}
						else{
							// we need to keep highlight in Space Management Edit mode
							
							/*
						if (cvjs_debug) console.log("room="+rm+" linked part" );
							if (vqRooms[active_floorplan_div_nr][rm].data("linked")){
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_linked);
							}
							else{
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_unlinked);
							}
							
							*/
						}
						// 3.2.02h  					
				}

				
			
			}).mousemove(function(e){

			currentRoomId = this.data("id");
			currentRoomName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findRoom(currentRoomId);
				if (rm >= 0)
				{
					if (rm != lastObj[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLast[cvjs_active_floorplan_div_nr] != lastObj[cvjs_active_floorplan_div_nr] && tooltipLast[cvjs_active_floorplan_div_nr]!=-1){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
								vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor);
							}
							else{
								if (vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].data("linked")){
									vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor_linked);
								}
								else{
									vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[cvjs_active_floorplan_div_nr]].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
							vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						}
						else{
							if (vqRooms[cvjs_active_floorplan_div_nr][rm].data("linked")){
								vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight_linked);
							}
							else{
								vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight_unlinked);
							}
						}


						tooltipLast[cvjs_active_floorplan_div_nr] = rm;
					}
				}

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					// 3.0.01i
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});	
				
					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');		

					
					
										
					//console.log(floorplan_pos);
					
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position
						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					//*/
			   }
		}).mouseup(function(e){
			
			// 3.3.02a
			//vqRoomMouseSelect = false;
			
			
			
			
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawing();
				rid = this.data("id");
//console.log("1");
				change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);
			}
			else{
				try{

					layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

//				tipText = this.data("name");

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawing();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
//console.log("2");
				change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				var rid = this.data("id");
				cvjs_change_space(rid);

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));


//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);


//			tipText = this.data("name");
			if (!cvjs_supressPopUpModal)
				tipText = this.data("name");
			else
				tipText = this.data("id");

			if (cvjs_customToolTip)
				tipText = cvjs_displayCustomToolTip(this.data("id"));

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawing();
			rid = this.data("id");
//console.log("3");
			change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);

		}).touchmove(function(e) {
			if (!bPan)
			{
				
				
				
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
							
				
		
				
				
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);

			if (cvjs_customToolTip)
				tipText = cvjs_displayCustomToolTip(this.data("id"));

			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

   	layer_vqrooms[cvjs_active_floorplan_div_nr].add(vqRooms[cvjs_active_floorplan_div_nr][room]);
}

// END - Setup NEW NODE - room data objects




// BEGIN - Setup NEW NODE - stickynote data objects  based on array index

function cvjs_setUpVqStickyNotes_currentNode_vqIndex(paper, cvjs_currentNode_underbar, vqindex, passedoverInstance)
{

//window.alert("cvjs_setUpVqStickyNotes_currentNode_vqIndex rid");
//if (true) return;


floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

/*	2018-03-15
	
   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
   }
	
*/	
	
	
	var stickynote = vqindex;

	// var rid = layer_vqstickynotes.data("node");
	// 2018-03-15 changing from layer_stickynotes to the stickynote itself
	
	var rid = vqStickyNotes[stickynote].data("node");
	
//console.log("rid "+rid);

//console.log("rid="+rid+" "+vqStickyNotes[stickynote]+" "+ (cvjs_currentNode_underbar == rid));


		//vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		
	
	if (cvjs_currentNode_underbar == rid)
	{

		vqStickyNotes[stickynote].data("name", cvjs_currentStickyNote_name );
		vqStickyNotes[stickynote].data("id", cvjs_currentStickyNote_id);
		vqStickyNotes[stickynote].data("text", cvjs_currentStickyNote_text);

		try{

			vqStickyNotes[stickynote].data("layer", cvjs_currentStickyNote_layer);
			vqStickyNotes[stickynote].data("group", cvjs_currentStickyNote_group);
			vqStickyNotes[stickynote].data("linked", cvjs_currentStickyNote_linked);
						
			
			vqStickyNotes[stickynote].data("userid", cvjs_currentStickyNote_userid);
			vqStickyNotes[stickynote].data("date", cvjs_currentStickyNote_date);

			vqStickyNotes[stickynote].data("currentPage", cvjs_currentStickyNote_currentPage);

			vqStickyNotes[stickynote].data("transform", cvjs_currentStickyNote_transform);  // current transformation

			vqStickyNotes[stickynote].data("drawingRotation", cvjs_currentStickyNote_drawingRotation);
			
			
		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[stickynote].data("linked")){
				vqStickyNotes[stickynote].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[stickynote].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable

		// we see what happens

		if (cvjs_supressPopUpModal == true){

				jQuery(vqStickyNotes[stickynote].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqStickyNotes[stickynote].node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"glyphicon glyphicon-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
		"</table>";


		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(vqStickyNotes[stickynote ].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}



		}



		vqStickyNotes[stickynote].mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("B Domousedown");			
			
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal){
								vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
							}
							else{
								if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
								}
								else{
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					
				
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){
			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
console.log("stickynote 1");
				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("stickynote 2x");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("stickynote 3x");
			change_space_fixed_locationStickyNotes(rid);

		}).touchmove(function(e) {
			if (!bPan)
			{
				
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

		//console.log(vqStickyNotes[stickynote ]);

//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(vqStickyNotes[stickynote ]);
//   	layer_vqstickynotes.add(vqStickyNotes[stickynote ]);
}





function cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance(paper, cvjs_currentNode_underbar, vqindex, passedoverInstance)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);


	
   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
   }
	
	
	var stickynote = vqindex;

	// var rid = layer_vqstickynotes.data("node");
	// 2018-03-15 changing from layer_stickynotes to the stickynote itself
	
	var rid = passedoverInstance.data("node");
	
console.log("cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance rid "+rid);

console.log("rid                       ="+rid+"              "+passedoverInstance+" "+ (cvjs_currentNode_underbar == rid));


		//passedoverInstance.attr(defaultColor_StickyNotes);

//		passedoverInstance.attr({"fill" : "#F0F0FF"});
		

		passedoverInstance.data("name", cvjs_currentStickyNote_name );
		passedoverInstance.data("id", cvjs_currentStickyNote_id);
		passedoverInstance.data("text", cvjs_currentStickyNote_text);
		passedoverInstance.data("layer", cvjs_currentStickyNote_layer);
		passedoverInstance.data("group", cvjs_currentStickyNote_group);
		passedoverInstance.data("linked", cvjs_currentStickyNote_linked);
		passedoverInstance.data("userid", cvjs_currentStickyNote_userid);
		passedoverInstance.data("date", cvjs_currentStickyNote_date);


		passedoverInstance.data("currentPage", cvjs_currentStickyNote_currentPage);
		passedoverInstance.data("transform", cvjs_currentStickyNote_transform);  // current transformation

		passedoverInstance.data("drawingRotation", cvjs_currentStickyNote_drawingRotation);  // current transformation
		
//		window.alert("y we return filled");

// THIS IS REALLY STRANGE, MAKING THIS ASSOCATION MAKES EVERYTHING WORK!

		if (true) return;

		
		
		
		passedoverInstance.data("name", cvjs_currentStickyNote_name );
		passedoverInstance.data("id", cvjs_currentStickyNote_id);
		passedoverInstance.data("text", cvjs_currentStickyNote_text);
		passedoverInstance.data("layer", cvjs_currentStickyNote_layer);
		passedoverInstance.data("group", cvjs_currentStickyNote_group);
		passedoverInstance.data("linked", cvjs_currentStickyNote_linked);
		passedoverInstance.data("userid", cvjs_currentStickyNote_userid);
		passedoverInstance.data("date", cvjs_currentStickyNote_date);

		passedoverInstance.data("currentPage", cvjs_currentStickyNote_currentPage);

		passedoverInstance.data("transform", cvjs_currentStickyNote_transform);  // current transformation

		




		passedoverInstance.attr({"fill" : "#FF00FF"});
		

//		window.alert("we return filled");

		if (true) return;
		
//		window.alert("we have returned?");



	if (cvjs_currentNode_underbar == rid)
	{

		passedoverInstance.data("name", cvjs_currentStickyNote_name );
		passedoverInstance.data("id", cvjs_currentStickyNote_id);
		passedoverInstance.data("text", cvjs_currentStickyNote_text);

		try{

			passedoverInstance.data("layer", cvjs_currentStickyNote_layer);
			passedoverInstance.data("group", cvjs_currentStickyNote_group);
			passedoverInstance.data("linked", cvjs_currentStickyNote_linked);
			passedoverInstance.data("userid", cvjs_currentStickyNote_userid);
			passedoverInstance.data("date", cvjs_currentStickyNote_date);

			passedoverInstance.data("currentPage", cvjs_currentStickyNote_currentPage);

			passedoverInstance.data("transform", cvjs_currentStickyNote_transform);  // current transformation

		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			passedoverInstance.attr(defaultColor_StickyNotes);
		}
		else{
			if (passedoverInstance.data("linked")){
				passedoverInstance.attr(defaultColor_linked);
			}
			else{
				passedoverInstance.attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable

		// we see what happens

		if (cvjs_supressPopUpModal == true){

				jQuery(passedoverInstance.node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(passedoverInstance.node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"glyphicon glyphicon-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
		"</table>";


		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(passedoverInstance.node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}



		}



		passedoverInstance.mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("B Domousedown");			
			
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal){
								vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
							}
							else{
								if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
								}
								else{
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){
			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
console.log("stickynote 1");
				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("stickynote 2x");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("stickynote 3x");
			change_space_fixed_locationStickyNotes(rid);

		}).touchmove(function(e) {
			if (!bPan)
			{
				
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

		//console.log(passedoverInstance);

//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(passedoverInstance);
//   	layer_vqstickynotes.add(passedoverInstance);
}












// END - Setup NEW NODE - stickynote data objects based on array number


// BEGIN - Setup NEW NODE - stickynote data objects

function cvjs_setUpVqStickyNotes_currentNode(paper, cvjs_currentNode_underbar)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;

	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
	}
	

	var stickynote = vqStickyNotes.length-1;

	rid = vqStickyNotes[stickynote ].data("node");

//	console.log("rid="+rid+" "+vqRooms[cvjs_active_floorplan_div_nr][stickynote ]+" "+ (cvjs_currentNode_underbar == rid));

	if (cvjs_currentNode_underbar == rid)
	{

		vqStickyNotes[stickynote].data("name", cvjs_currentStickyNote_name );
		vqStickyNotes[stickynote].data("id", cvjs_currentStickyNote_id);
		vqStickyNotes[stickynote].data("text", cvjs_currentStickyNote_text);

		try{

			vqStickyNotes[stickynote].data("layer", cvjs_currentStickyNote_layer);
			vqStickyNotes[stickynote].data("group", cvjs_currentStickyNote_group);
			vqStickyNotes[stickynote].data("linked", cvjs_currentStickyNote_linked);
			vqStickyNotes[stickynote].data("userid", cvjs_currentStickyNote_userid);
			vqStickyNotes[stickynote].data("date", cvjs_currentStickyNote_date);

			vqStickyNotes[stickynote].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);

			vqStickyNotes[stickynote].data("transform", cvjs_currentStickyNote_transform);  // current transformation

			vqStickyNotes[stickynote].data("drawingRotation", cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);  // current transformation
			
			
		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal){
			vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[stickynote].data("linked")){
				vqStickyNotes[stickynote].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[stickynote].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable



		if (cvjs_supressPopUpModal == true){

				jQuery(vqStickyNotes[stickynote].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqStickyNotes[stickynote].node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"javascript:cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"javascript:cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"glyphicon glyphicon-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"javascript:cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"javascript:hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
		"</table>";


	if (isSmartPhoneOrTablet){  // removing mousemove reaction for devices

		htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >ZZ "+cvjs_currentStickyNote_name+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" ontap=\"cvjs_move_note();\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\"><i class=\"glyphicon glyphicon-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" ontap=\"javascript:cvjs_delete_note();\" onclick=\"javascript:cvjs_delete_note();\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" ontap=\"javascript:hideOnlyStickyNote("+stickynote+");\" onclick=\"javascript:hideOnlyStickyNote("+stickynote+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
			"</table>";


		htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >ZAZ "+cvjs_currentStickyNote_name+"</td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"window.alert('1');\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\"><i class=\"glyphicon glyphicon-edit\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"window.alert('3');\" onclick=\"javascript:cvjs_delete_note();\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
			"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
			"</table>";



	}



		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(vqStickyNotes[stickynote ].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		}

		vqStickyNotes[stickynote].mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("C Domousedown");					
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							if (!cvjs_supressPopUpModal){
								vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
							}
							else{
								if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
								}
								else{
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
								}
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

						
				
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();
					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){

			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
if (cvjs_debug_stickynotes) console.log("zzxz");

//console.log("mouse up stickynote  4x");
//			window.alert("mouse up bPan "+bPan);


				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);

				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;

// repeated in change_space_fixed_location  2017-09-28
//				cvjs_clearDrawingStickyNotes();

//			window.alert("mouse up bPan "+bPan);


				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("stickynote 5x");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

/***   2017-09-29  , as we get a mouse up response, we do not call again for touch-end

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("stickynote 6x");
			change_space_fixed_locationStickyNotes(rid);

*****/


		}).touchmove(function(e) {
			if (!bPan)
			{
				

				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
									
				
				
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

	//console.log();

	paper.add(vqStickyNotes[stickynote ]);
   	//layer_vqstickynotes.add(vqStickyNotes[stickynote ]);
}

// END - Setup NEW NODE - stickynote data objects









// BEGIN - Setup NODE - after pagechange
function cvjs_setUpVqStickyNotes_currentNode_PageChange(paper, cvjs_currentNode_underbar, vqindex)
{

floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;
var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);
var tipText = "";
var over = false;
var building = null;
var floor = null;


	try{
	jQuery.fn.qtip.defaults.show.event = 'click';
	jQuery.fn.qtip.defaults.hide.event = null;
	}
	catch(err){
		//  2016-01-30
		// console.log("err="+err);
	}

	// define layer_vqrooms[cvjs_active_floorplan_div_nr] if no data
	//console.log("layer_vqrooms[cvjs_active_floorplan_div_nr]="+layer_vqrooms[cvjs_active_floorplan_div_nr]);

   if (layer_vqstickynotes == ""){
		layer_vqstickynotes = paper.g();
		layer_vqstickynotes.prepend(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
   }
	
	var stickynote = vqindex;

	var rid = vqStickyNotes[stickynote].data("node");

//console.log(cvjs_currentNode_underbar + "  " + rid);


	if (cvjs_currentNode_underbar == rid)
	{

		vqStickyNotes[stickynote].data("name", cvjs_currentStickyNote_name );
		vqStickyNotes[stickynote].data("id", cvjs_currentStickyNote_id);
		vqStickyNotes[stickynote].data("text", cvjs_currentStickyNote_text);

		try{

			vqStickyNotes[stickynote].data("layer", cvjs_currentStickyNote_layer);
			vqStickyNotes[stickynote].data("group", cvjs_currentStickyNote_group);
			vqStickyNotes[stickynote].data("linked", cvjs_currentStickyNote_linked);
			vqStickyNotes[stickynote].data("userid", cvjs_currentStickyNote_userid);
			vqStickyNotes[stickynote].data("date", cvjs_currentStickyNote_date);

			vqStickyNotes[stickynote].data("currentPage", cvjs_currentStickyNote_currentPage);

			vqStickyNotes[stickynote].data("transform", cvjs_currentStickyNote_transform);  // current transformation

			vqStickyNotes[stickynote].data("drawingRotation", cvjs_currentStickyNote_drawingRotation);  // current transformation

		}
		catch(err){
			console.log(err);
		}


		if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
			vqStickyNotes[stickynote].attr(defaultColor_StickyNotes);
		}
		else{
			if (vqStickyNotes[stickynote].data("linked")){
				vqStickyNotes[stickynote].attr(defaultColor_linked);
			}
			else{
				vqStickyNotes[stickynote].attr(defaultColor_unlinked);
			}
		}
//		vqRooms[cvjs_active_floorplan_div_nr][stickynote ].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable



		if (cvjs_supressPopUpModal == true){

				jQuery(vqStickyNotes[stickynote].node).qtip({content: {text: "", title: ""},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'true'});

				jQuery(vqStickyNotes[stickynote].node).qtip('destroy');
		}
		else{


	var htitle = "<table width=\"100%\"><tr><td cols=\"3\"><div class=\"cvjs_modal_header_stickynote_info_2\">#"+cvjs_currentStickyNote_id+"</div><td class=\"cvjs_modal_header_stickynote_info_2_background\"></td><td class=\"cvjs_modal_header_1\" >"+cvjs_currentStickyNote_name+"</td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon1\" onclick=\"cvjs_move_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MoveNote+"\',1,"+stickynote+");\" ><i class=\"glyphicon glyphicon-move\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon2\" onclick=\"cvjs_edit_note();\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.EditNote+"\',2,"+stickynote+");\" ><i class=\"glyphicon glyphicon-edit\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_1\" id=\"stickyNoteIcon3\" onclick=\"cvjs_delete_note();\" onmouseout=\"javascript:noteIconChangeHighlight(3,\'#00539B\');\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.DeleteNote+"\',3,"+stickynote+");\" ><i class=\"glyphicon glyphicon-trash\"></i></td>"+
		"<td class=\"cvjs_modal_header_sticky_note_info_2\" id=\"stickyNoteIcon4\" onclick=\"hideOnlyStickyNote("+stickynote+");\" onmouseout=\"javascript:tip[cvjs_active_floorplan_div_nr].hide();\" onmouseover=\"javascript:cvjs_showStickynoteTip(\'"+lTable.languages[cvjs_currentLanguage].StickyNote.MinimizeNote+"\',4,"+stickynote+");\" ><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
		"</table>";


		cvjs_setStickyNoteText(cvjs_currentStickyNote_text);

		jQuery(vqStickyNotes[stickynote ].node).qtip({content: {text: cvjsStickyNoteBody, title: htitle},
				style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
				position: {my: 'bottom center', at: 'top left'},
				hideOnHTMLClick: 'false'});

		var divs = document.getElementsByTagName("div");
		for(var i = 0; i < divs.length; i++){
		   //console.log(divs[i].id);
		   if ( ((divs[i].id).indexOf("qtip-")>-1) && ((divs[i].id).indexOf("-content")==-1) && ((divs[i].id).indexOf("-title")==-1)) StickNoteQtipDiv = divs[i].id;
		}



		}



		vqStickyNotes[stickynote].mousedown(function(e){
			vqRoomMouseSelect = true;
if (cvjs_debug) console.log("E Domousedown");					
			DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, cvjs_active_floorplan_div_nr);
		}).mousemove(function(e){

			currentStickyNoteId = this.data("id");
			currentStickyNoteName = this.data("name");

			if ((bMouseDown) || (bTempMouseDown))
				DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			else {
				var rm = findStickyNotes(currentStickyNoteId);

//console.log("rm "+rm+" currentStickyNoteId "+currentStickyNoteId+" lastObjStickyNote[cvjs_active_floorplan_div_nr] "+lastObjStickyNote[cvjs_active_floorplan_div_nr]+" cvjs_location_flag"+cvjs_location_flag);

				if (rm >= 0)
				{
					if (rm != lastObjStickyNote[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

						if (tooltipLastStickyNote != lastObjStickyNote[cvjs_active_floorplan_div_nr]){

							//vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

							try{
								if (!cvjs_supressPopUpModal){
									vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_StickyNotes);
								}
								else{
									if (vqStickyNotes[tooltipLastStickyNote].data("linked")){
										vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_linked);
									}
									else{
										vqStickyNotes[tooltipLastStickyNote].attr(defaultColor_unlinked);
									}
								}

							}
							catch (err){
								// do nothing
							}

						}

						//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);
						if (!cvjs_supressPopUpModal){
							vqStickyNotes[rm].attr(highlight_StickyNotes);
						}
						else{
							if (vqStickyNotes[rm].data("linked")){
								vqStickyNotes[rm].attr(highlight_linked);
							}
							else{
								vqStickyNotes[rm].attr(highlight_unlinked);
							}
						}
						tooltipLastStickyNote = rm;
					}
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				tip[cvjs_active_floorplan_div_nr].show();

					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
			   }
		}).mouseup(function(e){
			vqRoomMouseSelect = false;
			if (bPan){

				DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
//				tipText = this.data("name");

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				rid = this.data("id");
console.log("sticky note up 7x");
				change_space_fixed_locationStickyNotes(rid);
			}
			else{
				try{
					layer_vqstickynotes.attr(show);
				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					//console.log(err);
				}

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
				cvjs_clearDrawingStickyNotes();
				//CheckRoomOnScreen(this);
				rid = this.data("id");
				//change_space(rid);
console.log("2");
				change_space_fixed_locationStickyNotes(rid);
			}
			bPan = false;
		}).touchstart(function(e) {
			DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).touchend(function(e) {
			if ((!bPan) && (!locked))
				{
				rid = this.data("id");
				cvjs_change_space(rid);

				tipText = "Note #"+this.data("id");
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});					

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
			DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

			tipText = this.data("id");

			tip[cvjs_active_floorplan_div_nr].html(tipText);
			bMouseDown = false;
			cvjs_clearDrawingStickyNotes();
			rid = this.data("id");
console.log("3");
			change_space_fixed_locationStickyNotes(rid);

		}).touchmove(function(e) {
			if (!bPan)
			{
				

				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
								
				
//			tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//			tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
			tip[cvjs_active_floorplan_div_nr].html(tipText);
			}
			DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
		}).dblclick(function(e) {
			event.preventDefault();
			event.stopPropagation();
		});
	}

//console.log("before add layer");
 //  NOTE   NOTE 2016-08-25
 //  	layer_vqstickynotes.add(vqStickyNotes[stickynote ]);
}




// END - Setup NODE - after pagechange











// BEGIN - Delete node - room data objects

function cvjs_setUpVqRooms_deleteNode(node)
{
	var room_node;
	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){
		room_node = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");
		if (room_node == node){
			// we simply hide it by making it very small - remove the item when save

			vqRooms[cvjs_active_floorplan_div_nr][room].data("deleted", true);
			var dTransform = "S0.001";
			vqRooms[cvjs_active_floorplan_div_nr][room].attr({'transform': dTransform, "opacity" : "0.01"});

		}
	}
}

// END - Delete node - room data objects


// BEGIN - Delete node - stickynote objects

function cvjs_setUpStickyNotes_deleteNode(delete_note)
{
	var sticky_note;
	for (var note in vqStickyNotes){
		sticky_note = vqStickyNotes[note].data("node");

		console.log("delete "+delete_note+" "+sticky_note+"   "+note);

		//console.log("delete in arrary note="+note);
		if (sticky_note == delete_note){

			// we simply hide it by making it very small - remove the item when save
			vqStickyNotes[note].data("deleted", true);
			var dTransform = "S0.001";

if (cvjs_debug) console.log("DELETING "+note+ "  "+vqStickyNotes[note]);
	
			vqStickyNotes[note].attr({'transform': dTransform, "opacity" : "1"});

// test
			hideOnlyStickyNote(note);

			// we are simply removing the object

if (cvjs_debug) console.log("AFTER DELETING "+note+ "  "+vqStickyNotes[note]);
			
			
			
			jQuery(vqStickyNotes[note].node).qtip('destroy');
			vqStickyNotes.splice(note, 1);
		}


	}
}

// END - Delete node - stickynote data objects



function cvjs_StickyNotes_arrayIndex(noteUnderbar)
{
	var sticky_note;
	for (var note in vqStickyNotes){
		sticky_note = vqStickyNotes[note].data("node");
		if (sticky_note == noteUnderbar){
			return note;
		}
	}
	return -1;
}







// BEGIN - Draw Circle

var firstX_c = 0;
var firstY_c = 0;
var lastX_c = 0;
var lastY_c = 0;
var flag_c = false;

var tTransform_c = "";
var tRubberBand_c;

var myText;
var delta = 0;   // used in Circle and CopyCircle




/**
 * Draws interactively a circle. The data object of the circle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_Circle() {
		cvjs_addHandleFunc_Circle();
}


function cvjs_addHandleFunc_Circle() {

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,60, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	//console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
	//console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
	//console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.drag(move_cvjs_create_circle,start_cvjs_create_circle,stop_cvjs_create_circle);
}

function cvjs_removeHandleFunc_Circle() {
		handleGroup.selectAll('handler').remove();
		handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_circle = function() {
	flag_c = false;
	 tRubberBand_c.attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
}

var move_cvjs_create_circle = function(dx,dy,x,y) {

var text = x+" "+y+" dx="+dx+" dy="+dy+" viewbox "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//myText.attr({'text': text});

		if (!flag_c){
			firstX_c = x;
			firstY_c = y;
			lastX_c = dx;
			lastY_c = dy;
			flag_c = true;
		}
		else{
			lastX_c = dx;
			lastY_c = dy;

		}

	delta = Math.sqrt(dx*dx+dy*dy);

	// Move to Global_scale.

//	tTransform_c = "t" + firstX_c + "," + firstY_c;
	tTransform_c = "t" + (firstX_c-delta_x)/global_scale + "," + (firstY_c-delta_y)/global_scale;

	delta/=global_scale;

	tTransform_c += "S"+(delta);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});
}

var stop_cvjs_create_circle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6
	tRubberBand_c.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	// remove handler
	cvjs_removeHandleFunc_Circle();
	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Circle');
};
// END- Draw Circle





// BEGIN Draw Redline Circle




/**
 * Draws interactively a cloud. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineCloud() {
		cvjs_addHandleFunc_RedlineCloud();
}


function cvjs_addHandleFunc_RedlineCloud() {


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,60, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	//console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
	//console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
	//console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.drag(move_cvjs_create_redlinecircle,start_cvjs_create_redlinecircle,stop_cvjs_create_redlinecircle);
}

function cvjs_removeHandleFunc_RedlineCloud() {
		handleGroup.selectAll('handler').remove();
		handleGroup.remove();


	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	//console.log("handler removed");
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_redlinecircle = function() {
	flag_c = false;
	 tRubberBand_c.attr({stroke: cvjs_currentRedline_color, "stroke-width": "0.01", fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
}

var move_cvjs_create_redlinecircle = function(dx,dy,x,y) {

var text = x+" "+y+" dx="+dx+" dy="+dy+" viewbox "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//myText.attr({'text': text});

		if (!flag_c){
			firstX_c = x;
			firstY_c = y;
			lastX_c = dx;
			lastY_c = dy;
			flag_c = true;
		}
		else{
			lastX_c = dx;
			lastY_c = dy;

		}
	delta = Math.sqrt(dx*dx+dy*dy);

	// Move to Global_scale.
//	tTransform_c = "t" + firstX_c + "," + firstY_c;
	tTransform_c = "t" + (firstX_c-delta_x)/global_scale + "," + (firstY_c-delta_y)/global_scale;

	delta/=global_scale;

	tTransform_c += "S"+(delta);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

}

var stop_cvjs_create_redlinecircle = function() {

	//console.log("delta="+delta);
	var scaled_stroke=cvjs_currentRedline_strokeWidth/delta*cvjs_redlineThickness_scaleFactor;
	tRubberBand_c.attr({"stroke-width": scaled_stroke});
	tRubberBand_c.attr({'transform': "S0" , "opacity" : "1"});

	var radius = delta;
	
	// we simply split this into two radius, one in x and one in y, and repeat the calculation
		
	var x = (firstX_c-delta_x)/global_scale;
	var y = (firstY_c-delta_y)/global_scale;

	var  _36degrees = 2*Math.PI/20;
	var   subRadius = Math.sin(_36degrees*.5)*radius;
	var incr = Math.PI/20;
    var radAngle = 0;
    var k=0;
    var x1;
    var x2;
    var cloud= "";
    var lastsegment="";
    var flag = true;
	for (var i=0;i<20;i++){
			radAngle = _36degrees*i+_36degrees*.5;
			x1 = x + (radius*Math.cos(radAngle));
			y1 = y + (radius*Math.sin(radAngle));
			var subAng = radAngle - Math.PI*.5;

			for(var j=0; j < 20; j++)
			{
				var x11 = x1 + subRadius*Math.cos(subAng);
				var y11 = y1 + subRadius*Math.sin(subAng);
				if (flag){
					flag = false;
					cloud+="M"+x11+","+y11;
					lastsegment = "L"+x11+","+y11;
				}
				else
					cloud+="L"+x11+","+y11;
				subAng += incr;
			}
		}
		cloud+=lastsegment;

		tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(cloud).attr({"stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, stroke: cvjs_currentRedline_color, fill: "#FFF", "fill-opacity": "0.01"});

//console.log(tRubberBand_r);

//console.log(cloud);

	cvjs_removeHandleFunc_RedlineCloud();
	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_r);
	cvjs_graphicalObjectCreated('RedlineCloud');
};




// END Redline Circle



// BEGIN - Draw Custom Rectangle



/**
 * Add a Space Object Custom Rectangle
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - layer of objects (not yet implemented)
 */
  
function cvjs_addRectangleCustomSpaceObject(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);

}



/**
 * Draws interactively a rectangle and add a custom wallpaper. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {
		cvjs_addHandleFunc_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);
}

var cvjs_customSvgImagePath = "";
var cvjs_customSpaceObjectId = "";
var cvjs_customSpaceObjectType = "";
var cvjs_customSpaceObjectName = "";



function cvjs_addHandleFunc_CustomRectangle(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {

	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

		
	handleGroup.drag(move_cvjs_create_custom_rectangle,start_cvjs_create_custom_rectangle,stop_cvjs_create_custom_rectangle);
}


function cvjs_removeHandleFunc_CustomRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_custom_rectangle = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

var move_cvjs_create_custom_rectangle = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle){
			firstX_r = x;
			firstY_r = y;
			lastX_r = dx;
			lastY_r = dy;
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
	tRubberBand_r.attr({'path': tPath_r});

}

var stop_cvjs_create_custom_rectangle = function() {

	// 3.2.02b
	tRubberBand_r.remove();

	cvjs_removeHandleFunc_CustomRectangle();

	// we scale and draw the custom object   
	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));
	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	newPath.attr({'path': tPath_r});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });


	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
	
	
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
	
//	window.alert(maxId+"  "+cvjs_currentNode_underbar);
	
	
//	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertAfter('#'+ maxId);
	// 3.3.02d
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);

	

	// we do 3.2.02a   - here we make a counter and based on a flag we set the id	
/**	
	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;
**/	
	
	

};
// END - Draw Custom Rectangle







// BEGIN - Draw Rectangle
var firstX_r = 0;
var firstY_r = 0;
var lastX_r = 0;
var lastY_r = 0;
var flag_rectangle = false;

var tPath_r;
var tRubberBand_r;


/**
 * Draws interactively a rectangle. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_Rectangle() {
		
		
		cvjs_addHandleFunc_Rectangle();
		
		
}

function cvjs_addHandleFunc_Rectangle() {


	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	
	
	handleGroup.drag(move_cvjs_create_rectangle,start_cvjs_create_rectangle,stop_cvjs_create_rectangle);
}


function cvjs_removeHandleFunc_Rectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_rectangle = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

var move_cvjs_create_rectangle = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle){
			firstX_r = x;
			firstY_r = y;
			lastX_r = dx;
			lastY_r = dy;
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
	tRubberBand_r.attr({'path': tPath_r});

}

var stop_cvjs_create_rectangle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6
	tRubberBand_r.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	
	cvjs_removeHandleFunc_Rectangle();

	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tRubberBand_r);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Rectangle');

};
// END - Draw Rectangle






// BEGIN - Draw  Redline Rectangle

var firstX_r_redline = 0;
var firstY_r_redline = 0;
var lastX_r_redline = 0;
var lastY_r_redline = 0;
var flag_rectangle_redline = false;

var tPath_r_redline;
var tRubberBand_r_redline;


/**
 * Draws interactively a redline rectangle. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineRectangle() {
		cvjs_addHandleFunc_RedlineRectangle();
}

function cvjs_addHandleFunc_RedlineRectangle() {

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	tPath_r_redline = "M" + firstX_r_redline + "," + firstY_r_redline;
	tRubberBand_r_redline = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r_redline).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.drag(move_cvjs_create_rectangle_redline,start_cvjs_create_rectangle_redline,stop_cvjs_create_rectangle_redline);
}


function cvjs_removeHandleFunc_RedlineRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_rectangle_redline = function() {

	flag_rectangle_redline= false;
	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
}

var move_cvjs_create_rectangle_redline = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle_redline){
			firstX_r_redline = x;
			firstY_r_redline = y;
			lastX_r_redline = dx;
			lastY_r_redline = dy;
			flag_rectangle_redline = true;
		}
		else{
			lastX_r_redline = dx;
			lastY_r_redline = dy;

		}

	tPath_r_redline = "M" + (firstX_r_redline-delta_x)/global_scale + "," + (firstY_r_redline-delta_y)/global_scale;
	tPath_r_redline += "h" + lastX_r_redline/global_scale + "v" + lastY_r_redline/global_scale+"h"+(-lastX_r_redline/global_scale)+"v"+(-lastY_r_redline/global_scale+" Z");
	tRubberBand_r_redline.attr({'path': tPath_r_redline});

}

var stop_cvjs_create_rectangle_redline = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});

	cvjs_removeHandleFunc_RedlineRectangle();
	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_r_redline);
	cvjs_graphicalObjectCreated('RedlineRectangle');

};



// END - Draw REdline Rectangle




var cvjs_ellipseCloudFlag = false;


/**
 * Draws interactively a Redline Ellipse Cloud . Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineEllipseCloud() {
	
		cvjs_ellipseCloudFlag = true;
		cvjs_addHandleFunc_RedlineEllipse();
}

/**
 * Draws interactively a Redline Ellipse . Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineEllipse() {
	
		cvjs_ellipseCloudFlag = false;
		cvjs_addHandleFunc_RedlineEllipse();
}

function cvjs_addHandleFunc_RedlineEllipse() {

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	tPath_r_redline = "M" + firstX_r_redline + "," + firstY_r_redline;
	tRubberBand_r_redline = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r_redline).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	handleGroup.drag(move_cvjs_create_ellipse_redline,start_cvjs_create_ellipse_redline,stop_cvjs_create_ellipse_redline);
}


function cvjs_removeHandleFunc_RedlineEllipse() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_ellipse_redline = function() {

	flag_rectangle_redline= false;
//	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	tRubberBand_r_redline.attr({stroke: "#5D5D5D", "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	
	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].ellipse(0,0,1,1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	tRubberBand_c.attr({stroke: cvjs_currentRedline_color, "stroke-width": "0.01", fill: "none", "fill-opacity" : "0.01", "opacity" : "0.01"});	
}

var move_cvjs_create_ellipse_redline = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;

//	myText.attr({'text': text});

		if (!flag_rectangle_redline){
			firstX_r_redline = x;
			firstY_r_redline = y;
			lastX_r_redline = dx;
			lastY_r_redline = dy;
			flag_rectangle_redline = true;
		}
		else{
			lastX_r_redline = dx;
			lastY_r_redline = dy;

		}

	tPath_r_redline = "M" + (firstX_r_redline-delta_x)/global_scale + "," + (firstY_r_redline-delta_y)/global_scale;
	tPath_r_redline += "h" + lastX_r_redline/global_scale + "v" + lastY_r_redline/global_scale+"h"+(-lastX_r_redline/global_scale)+"v"+(-lastY_r_redline/global_scale+" Z");
	tRubberBand_r_redline.attr({'path': tPath_r_redline});
	
	var ellipseTrans = "T"+((firstX_r_redline-delta_x)/global_scale+lastX_r_redline/global_scale/2)  + "," + ((firstY_r_redline-delta_y)/global_scale +lastY_r_redline/global_scale/2)+"S"+lastX_r_redline/global_scale/2+","+lastY_r_redline/global_scale/2;
	//console.log(ellipseTrans);	
//	tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"}); //.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.1"});	
	
	if (!cvjs_ellipseCloudFlag){  // ellipse
		tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"}); //.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none", "fill-opacity" : "0.01", "opacity" : "0.1"});
	}
	else{  // cloud

		var ellipseTrans = "T0,0S0";
//		tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"});

		// 3.1.21g  
		tRubberBand_c.remove();

		var  _36degrees = 2*Math.PI/20;		
		var radiusX = (lastX_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));
		var radiusY = (lastY_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));
		
		// we simply split this into two radius, one in x and one in y, and repeat the calculation
			
		var x = (firstX_r_redline-delta_x)/global_scale+(lastX_r_redline/global_scale)/2;
		var y = (firstY_r_redline-delta_y)/global_scale+(lastY_r_redline/global_scale)/2;

		//window.alert(radiusX+"  "+radiusY+"  "+x+"  "+y);
		
		var   subRadiusX = Math.sin(_36degrees*.5)*radiusX;
		var   subRadiusY = Math.sin(_36degrees*.5)*radiusY;
		
		var incr = Math.PI/20;
		var radAngle = 0;
		var k=0;
		var x1;
		var x2;
		var cloud= "";
		var lastsegment="";
		var flag = true;
		for (var i=0;i<20;i++){
				radAngle = _36degrees*i+_36degrees*.5;
				x1 = x + (radiusX*Math.cos(radAngle));
				y1 = y + (radiusY*Math.sin(radAngle));
				var subAng = radAngle - Math.PI*.5;

				for(var j=0; j < 20; j++)
				{
					var x11 = x1 + subRadiusX*Math.cos(subAng);
					var y11 = y1 + subRadiusY*Math.sin(subAng);
					if (flag){
						flag = false;
						cloud+="M"+x11+","+y11;
						lastsegment = "L"+x11+","+y11;
					}
					else
						cloud+="L"+x11+","+y11;
					subAng += incr;
				}
			}
			cloud+=lastsegment;

//console.log(cloud);			
					
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(cloud).attr({"stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, stroke: cvjs_currentRedline_color, fill: "#FFF", "fill-opacity": "0.01"});
	
	}	
	
	
	
	
	
	
		
}

var stop_cvjs_create_ellipse_redline = function() {

// Make a circle inside the Ellipse box......
	// 3.1.21e
	var ellipseTrans = "T0,0S0.001";
    tRubberBand_c.attr({'transform':  ellipseTrans,  "opacity" : "1"});
		
	// 3.1.21g  
	tRubberBand_c.remove();
	
	
	tPath_r_redline = "M" + 0 + "," + 0;
	tPath_r_redline += "h" + 0 + "v" + 0+"h"+0+"v"+0+" Z";		
	tRubberBand_r_redline.attr({'path': tPath_r_redline});

	// 3.1.21g  	
	tRubberBand_r_redline.remove();
	
	cvjs_removeHandleFunc_RedlineEllipse();

	if (!cvjs_ellipseCloudFlag){  // ellipse
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].ellipse((firstX_r_redline-delta_x)/global_scale+(lastX_r_redline/global_scale)/2, (firstY_r_redline-delta_y)/global_scale+(lastY_r_redline/global_scale)/2, (lastX_r_redline/global_scale)/2, (lastY_r_redline/global_scale)/2).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity" : "0.01", "opacity" : "0.9"});
		cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_c);
		cvjs_graphicalObjectCreated('RedlineCloud');
	}
	else{  // cloud

		var  _36degrees = 2*Math.PI/20;

		var radiusX = (lastX_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));
		var radiusY = (lastY_r_redline/global_scale)/2*(1.0/(1.0+Math.sin(_36degrees*.5)));

	
		// we simply split this into two radius, one in x and one in y, and repeat the calculation
			
		var x = (firstX_r_redline-delta_x)/global_scale+(lastX_r_redline/global_scale)/2;
		var y = (firstY_r_redline-delta_y)/global_scale+(lastY_r_redline/global_scale)/2;

		//window.alert(radiusX+"  "+radiusY+"  "+x+"  "+y);
		
		var   subRadiusX = Math.sin(_36degrees*.5)*radiusX;
		var   subRadiusY = Math.sin(_36degrees*.5)*radiusY;
		var incr = Math.PI/20;
		var radAngle = 0;
		var k=0;
		var x1;
		var x2;
		var cloud= "";
		var lastsegment="";
		var flag = true;
		for (var i=0;i<20;i++){
				radAngle = _36degrees*i+_36degrees*.5;
				x1 = x + (radiusX*Math.cos(radAngle));
				y1 = y + (radiusY*Math.sin(radAngle));
				var subAng = radAngle - Math.PI*.5;

				for(var j=0; j < 20; j++)
				{
					var x11 = x1 + subRadiusX*Math.cos(subAng);
					var y11 = y1 + subRadiusY*Math.sin(subAng);
					if (flag){
						flag = false;
						cloud+="M"+x11+","+y11;
						lastsegment = "L"+x11+","+y11;
					}
					else
						cloud+="L"+x11+","+y11;
					subAng += incr;
				}
			}
			cloud+=lastsegment;

//window.alert(cloud);			
					
		tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(cloud).attr({"stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, stroke: cvjs_currentRedline_color, fill: "#FFF", "fill-opacity": "0.01"});
		cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tRubberBand_r);
		cvjs_graphicalObjectCreated('RedlineEllipseCloud');
			
	}

};



// END - Draw REdline Ellipse













// BEGIN - Draw  Filled Redline Rectangle


/**
 * Draws interactively a filled redline rectangle. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_FilledRedlineRectangle() {
		cvjs_addHandleFunc_FilledRedlineRectangle();
}

function cvjs_addHandleFunc_FilledRedlineRectangle() {

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	tPath_r_redline = "M" + firstX_r_redline + "," + firstY_r_redline;
	tRubberBand_r_redline = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r_redline).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.drag(move_cvjs_create_filledrectangle_redline,start_cvjs_create_filledrectangle_redline,stop_cvjs_create_filledrectangle_redline);
}


function cvjs_removeHandleFunc_FilledRedlineRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var start_cvjs_create_filledrectangle_redline = function() {

	flag_rectangle_redline= false;
	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
}

var move_cvjs_create_filledrectangle_redline = function(dx,dy,x,y) {

	var text = x+" "+y+" dx="+dx+" dy="+dy;


//	myText.attr({'text': text});

		if (!flag_rectangle_redline){
			firstX_r_redline = x;
			firstY_r_redline = y;
			lastX_r_redline = dx;
			lastY_r_redline = dy;
			flag_rectangle_redline = true;
		}
		else{
			lastX_r_redline = dx;
			lastY_r_redline = dy;

		}

	tPath_r_redline = "M" + (firstX_r_redline-delta_x)/global_scale + "," + (firstY_r_redline-delta_y)/global_scale;
	tPath_r_redline += "h" + lastX_r_redline/global_scale + "v" + lastY_r_redline/global_scale+"h"+(-lastX_r_redline/global_scale)+"v"+(-lastY_r_redline/global_scale+" Z");
	tRubberBand_r_redline.attr({'path': tPath_r_redline});

}

var stop_cvjs_create_filledrectangle_redline = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

	tRubberBand_r_redline.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
	cvjs_removeHandleFunc_FilledRedlineRectangle();
	cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, tRubberBand_r_redline, cvjs_currentRedline_color, 0.1);
	cvjs_graphicalObjectCreated('FilledRedlineRectangle');

};



// END - Draw Filled REdline Rectangle









// BEGIN - Modify Rectangle  //  Modify TBorder
var firstX_mr = 0;
var firstY_mr = 0;
var lastX_mr = 0;
var lastY_mr = 0;
var flag_mrectangle = false;

var tPath_mr;
var tRubberBand_mr;
var x_mr ;
var y_mr ;
var width_mr;
var height_mr;


function cvjs_addHandleFunc_ModifyRectangle(nodeUnderbar) {

	var graphicalObject;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeUnderbar ){
			graphicalObject = vqRooms[cvjs_active_floorplan_div_nr][spc];
		}
	}
	var strRoom = graphicalObject.toString();

	//console.log(nodeId+" "+strRoom);


	var boundingBoxElement = graphicalObject.getBBox();

	x_mr = boundingBoxElement.x;
	y_mr = boundingBoxElement.y;
	width_mr = boundingBoxElement.width;
	height_mr = boundingBoxElement.height;

	var path1;
	var path_flag = true;
	var cx;
	var cy;
	var r;

	if (strRoom.indexOf("path")>-1){
		path_flag = true;
		var pos1 = strRoom.indexOf(" d=");
		var pathStr1 = strRoom.substring(pos1+4);
		//console.log(pathStr1);
		var pos1A = pathStr1.indexOf("\" ");
		path1 = pathStr1.substring(0, pos1A);
	}

	if (strRoom.indexOf("circle")>-1){
		path_flag = false;

		var p_cx = strRoom.indexOf(" cx=");
		var s1_cx = strRoom.substring(p_cx+5);
		var p2_cx = s1_cx.indexOf("\"");
		cx = s1_cx.substring(0, p2_cx)

		var p_cy = strRoom.indexOf(" cy=");
		var s1_cy = strRoom.substring(p_cy+5);
		var p2_cy = s1_cy.indexOf("\"");
		cy = s1_cy.substring(0, p2_cy)


		var p_r = strRoom.indexOf(" r=");
		var s1_r = strRoom.substring(p_r+4);
		var p2_r = s1_r.indexOf("\"");
		r = s1_r.substring(0, p2_r)
	}


//console.log(path1);

	tPath_mr = path1;
	tRubberBand_mr = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_mr).attr({stroke: "#FF00AA", fill : "none", 'stroke-width': 4});

// get the current path, based on current node

// parse the current path and add it to the rubberband



//	myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(250,200, 'HELLO WORLD!!!');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	

	handleGroup.drag(move_cvjs_modify_rectangle,start_cvjs_modify_rectangle,stop_cvjs_modify_rectangle);
}


function cvjs_removeHandleFunc_ModifyRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}



var start_cvjs_modify_rectangle = function() {

	flag_mrectangle= false;
	tRubberBand_mr.attr({stroke: "#FF00AA", fill : "none",  'stroke-width': 4});

}

var move_cvjs_modify_rectangle = function(dx,dy,x,y) {

	// find out which corner is closest

	var x1 = (x-delta_x)/global_scale;
	var y1 = (y-delta_y)/global_scale;
	var h1 = height_mr/2;
	var w1 = width_mr/2;

//console.log(x_mr+" "+y_mr+" "+width_mr+" "+height_mr+" x1,y1 "+x1+" "+y1);
		if (x1<(x_mr+w1) && y1<(y_mr+h1)){
//			console.log("1");

			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr+width_mr;
				firstY_mr = y_mr+height_mr;
				lastX_mr = -width_mr;
				lastY_mr = -height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

		if (x1>=(x_mr+w1) && y1<(y_mr+h1)){
	//		console.log("2");

			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr;
				firstY_mr = y_mr+height_mr;
				lastX_mr =  width_mr;
				lastY_mr = -height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

		if (x1<(x_mr+w1) && y1>=(y_mr+h1)){
//		console.log("3");

			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr+width_mr;
				firstY_mr = y_mr;
				lastX_mr = -width_mr;
				lastY_mr = height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

		if (x1>=(x_mr+w1) && y1>=(y_mr+h1)){

//			console.log("4");
			if (!flag_mrectangle){
				flag_mrectangle = true;
				firstX_mr = x_mr;
				firstY_mr = y_mr;
				lastX_mr = width_mr;
				lastY_mr = height_mr;
			}
			else{
				//lastX_mr+ = dx;
				//lastY_mr+ = dy;
			}
		}

//console.log(tPath_mr);

	tPath_mr = "M" + firstX_mr + "," + firstY_mr;
	tPath_mr += "h" + (lastX_mr + (dx/global_scale)) + "v" + (lastY_mr + (dy/global_scale))+"h"+(-lastX_mr- (dx/global_scale))+"v"+(-lastY_mr - (dy/global_scale))+" Z";
	tRubberBand_mr.attr({'path': tPath_mr});
}

var stop_cvjs_modify_rectangle = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6

//	tRubberBand_mr.attr({fill: 'none', "fill-opacity": "0.1", stroke: '#ff2222', 'stroke-opacity': "1"});

//	cvjs_removeHandleFunc_ModifyRectangle();

//console.log("before modify of polygon in object");
//	cvjs_addVqRoomsGraphics_currentNode_modify_polygon(cvjs_currentNode_underbar, tRubberBand_mr);



//	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

//	cvjs_graphicalObjectCreated('Modify Rectangle');

};
// END - Modify Rectangle






// BEGIN - Modify TBorder with Text

var tb_nodeUnderbarIndex = 0;
var tborderIndex = 0;
var quardrant = 0;
var tTransform_tb = "";
var tTransform_tborder = "";



/**
 * Dynamic resize and change location of text objects drawn on Space Object
 * @param {string} nodeUnderbar - the data node containing the Space Object to which the text is associated
 */

function cvjs_dynamicResizeTextOnSpaceObject(nodeUnderbar) {

	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(nodeUnderbar);

}


/**
 * Dynamic resize and change location of text objects drawn on Space Object
 * @param {string} name - the name of the data node containing the Space Object to which the text is associated
 */

function cvjs_dynamicResizeTextOnSpaceObject_Name(name) {

	var nodeId = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("name") == name ){
			nodeId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		}
	}

	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(nodeId);
}



/**
 * Dynamic resize and change location of text objects drawn on Space Object
 * @param {string} id - the id of the data node containing the Space Object to which the text is associated
 */

function cvjs_dynamicResizeTextOnSpaceObject_Id(id) {

	var nodeId = -1;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == id ){
			nodeId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
		}
	}

	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(id);
}


var cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = false;
function cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject(nodeUnderbar) {

	var borderId = 0;
	var textIdArray = [];
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeUnderbar ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
			textIdArray = vqRooms[cvjs_active_floorplan_div_nr][spc].data("textId")
			vqRooms[cvjs_active_floorplan_div_nr][spc].attr(hide);
			tb_nodeUnderbarIndex = spc;
		}
	}


	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = true;

//	console.log("borderID "+borderId+" textarrary "+textIdArray);

	var graphicalObject;

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			graphicalObject = vqTBorder[bdr];
			tborderIndex = bdr;
			vqTBorder[bdr].attr({fill: 'none', "stoke-width": "12.0", stroke: '#ff00dd', 'stroke-opacity': "1"});
			vqTBorder[bdr].attr(show);

//			console.log("show");
		}
	}

//	var strRoom = graphicalObject.toString();
//	console.log("border "+strRoom);

	tTransform_c = "";
	tTransform_tb="";

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.drag(move_cvjs_modify_tbordertext,start_cvjs_modify_tbordertext,stop_cvjs_modify_tbordertext);
	handleGroup.dblclick(finish_cvjs_modify_tbordertext);



	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started){
				cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = false;
				finish_cvjs_modify_tbordertext();

				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});


}


function cvjs_removeHandleFunc_ModifyTBorderWithText() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
	cvjs_addHandleFunc_ModifyTborderWithTextOnSpaceObject_started = false;
}


var finish_cvjs_modify_tbordertext = function() {

	cvjs_removeHandleFunc_ModifyTBorderWithText();
	// update database
	vqRooms[cvjs_active_floorplan_div_nr][tb_nodeUnderbarIndex].attr(show);
	vqTBorder[tborderIndex].attr({fill: 'none', "stoke-width": "0.1", stroke: '#000000', 'stroke-opacity': "0.01"});


	//console.log("finish tbordertext bdr="+tborderIndex);

}


var start_cvjs_modify_tbordertext = function(x,y) {


	flag_mrectangle= false;
//	console.log(vqTBorder[tborderIndex].getBBox().vb+" XXXX "+vqTBorder[tborderIndex].getBBox().x+" "+vqTBorder[tborderIndex].getBBox().w );
//	var viewbox = vqTBorder[tborderIndex].getBBox().vb;

	x_mr = vqTBorder[tborderIndex].getBBox().x;
	y_mr = vqTBorder[tborderIndex].getBBox().y;
	width_mr = vqTBorder[tborderIndex].getBBox().w;
	height_mr = vqTBorder[tborderIndex].getBBox().h;

	var x1 = (x-delta_x)/global_scale;
	var y1 = (y-delta_y)/global_scale;
	var h1 = height_mr/2;
	var w1 = width_mr/2;

	if (x1<(x_mr+w1) && y1<(y_mr+h1)){

		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 1;
		}
		else{
		}
	}

	if (x1>=(x_mr+w1) && y1<(y_mr+h1)){
		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 2;
		}
		else{
		}
	}

	if (x1>=(x_mr+w1) && y1>=(y_mr+h1)){
		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 3;

		}
		else{
		}
	}

	if (x1<(x_mr+w1) && y1>=(y_mr+h1)){
		if (!flag_mrectangle){
			flag_mrectangle = true;
			quardrant = 4;
		}
		else{
		}
	}

}


var move_cvjs_modify_tbordertext = function(dx,dy,x,y) {

	switch (quardrant)
	{
	   case 1:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr-dy/global_scale)/(height_mr));

				tTransform_tborder = "t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr-dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
		       break;
	   case 2:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr-dy/global_scale)/(height_mr));

				tTransform_tborder ="t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr-dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
			   break;
	   case 3:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr+dy/global_scale)/(height_mr));

				tTransform_tborder ="t" + ((+dx)/global_scale - (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr+dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
			   break;
	   case 4:
				tTransform_c =tTransform_tb + "t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_c += "S"+((height_mr+dy/global_scale)/(height_mr));

				tTransform_tborder ="t" + ((+dx)/global_scale + (width_mr*0.5*(dy/global_scale)/(height_mr))) + "," + ((+dy)/global_scale - (height_mr*0.5*(dy/global_scale)/(height_mr)) );  // scale is based on center of rectangle
				tTransform_tborder += "S"+((height_mr+dy/global_scale)/(height_mr));

				vqTBorder[tborderIndex].attr({'transform': tTransform_c , "opacity" : "1"});
			   break;
	   default:
	       console.log('Default quardrant move');
	}

}


var stop_cvjs_modify_tbordertext = function() {

	tTransform_tb = tTransform_tb + tTransform_tborder;

};
// END - Modify TBorder with Text


// BEGIN - Reset TBorder with Text

/**
 * Reset the location and size of text objects drawn on Space Object
 * @param {string} nodeUnderbar - the data node containing the Space Object to which the text is associated
 */

function cvjs_resetTextOnSpaceObject(nodeUnderbar) {

	var borderId = 0;
	var borderIndex = 0;
	var flag = false;

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("node") == nodeUnderbar ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
		}
	}

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			borderIndex = bdr;
			flag = true;
		}
	}
	if (flag)
		vqTBorder[borderIndex].attr({'transform': "T0,0S1.0" });
}

// END - Reset TBorder with Text

/**
 * Reset the location and size of text objects drawn on Space Object
 * @param {string} name- name of the data node containing the Space Object to which the text is associated, the first occurance of the name is selected
 */

function cvjs_resetTextOnSpaceObject_Name(name) {

	var borderId = 0;
	var borderIndex = 0;
	var flag = false;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("name") == name ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
		}
	}

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			borderIndex = bdr;
			flag = true;
		}
	}

	if (flag)
		vqTBorder[borderIndex].attr({'transform': "T0,0S1.0" });
}

// END - Reset TBorder with Text



/**
 * Reset the location and size of text objects drawn on Space Object
 * @param {string} name- id of the data node containing the Space Object to which the text is associated
 */

function cvjs_resetTextOnSpaceObject_Id(id) {

	var flag = false;
	var borderId = 0;
	var borderIndex = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == id ){
			borderId = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tborderId")
		}
	}

	for (bdr in vqTBorder)
	{
		if (vqTBorder[bdr].data("node") == borderId ){
			borderIndex = bdr;
			flag = true;
		}
	}

	if (flag)
		vqTBorder[borderIndex].attr({'transform': "T0,0S1.0" });
}

// END - Reset TBorder with Text





// BEGIN - Draw Polygon
var originX_poly = 0;
var originY_poly = 0;
var firstX_poly = 0;
var firstY_poly = 0;
var lastX_poly = 400;
var lastY_poly = 300;

var tPath_poly;
var tRubberBand_poly;
var polyPath;
var tPolygon;
var draw_poly = false;
var first_point_poly = true;

/**
 * Draws interactively a polygon. The data object of the polygon is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_Polygon() {
		cvjs_addHandleFunc_Polygon();
}

var cvjs_addHandleFunc_Polygon_started = false;

function cvjs_addHandleFunc_Polygon(){

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	cvjs_addHandleFunc_Polygon_started = true;


	tPath_poly = "M" + firstX_poly + "," + firstY_poly;
	tRubberBand_poly = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly).attr({stroke: "#b00000"});
	polyPath = "M" + firstX_poly + "," + firstY_poly;
	tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath).attr({stroke: "#b00000", fill: "none"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly = false;
	first_point_poly = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon);
	handleGroup.mousemove(mousemove_polygon);
	handleGroup.dblclick( polygon_finish );

	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_Polygon_started){

				cvjs_addHandleFunc_Polygon_started = false;
				 polygon_finish();

				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});

}


function cvjs_removeHandleFunc_Polygon(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
}


var polygon_finish = function() {

	polyPath += "L" + (lastX_poly-delta_x)/global_scale + "," + (lastY_poly-delta_y)/global_scale+"L" + (originX_poly-delta_x)/global_scale + "," + (originY_poly-delta_y)/global_scale;
	tPolygon.attr({'path': polyPath});

// selected unlinked red: #ff9999 : 255, 153, 153

	tPolygon.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});
	cvjs_removeHandleFunc_Polygon();


	
	//console.log("update database!! "+tPolygon);

	tRubberBand_poly.attr({'path': "M0,0"});

	draw_poly = false;
	first_point_poly = true;

	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Polygon');

}



var mousedown_polygon = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly){
		 	polyPath += "L" + (lastX_poly-delta_x)/global_scale + "," + (lastY_poly-delta_y)/global_scale;
			tPolygon.attr({'path': polyPath});
			firstX_poly = lastX_poly;
			firstY_poly = lastY_poly;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath = "M" + (firstX_poly-delta_x)/global_scale + "," +(firstY_poly-delta_y)/global_scale;
		 	tPolygon.attr({'path': polyPath});
		 	tPolygon.attr({stroke: "#b00000", fill: "none"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly = true;
		 }

}

var mousemove_polygon = function(e,x,y) {

	if (draw_poly){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly){
					first_point_poly = false;
					firstX_poly = x;
					firstY_poly = y;
					lastX_poly = x;
					lastY_poly = y;
					originX_poly = x;
					originY_poly = y;

					polyPath = "M" + (firstX_poly-delta_x)/global_scale + "," + (firstY_poly-delta_y)/global_scale;
				}
				else{
					lastX_poly = x;
					lastY_poly = y;
				}
			tPath_poly = "M" + (firstX_poly-delta_x)/global_scale + "," + (firstY_poly-delta_y)/global_scale;
			tPath_poly += "L" + (lastX_poly-delta_x)/global_scale + "," + (lastY_poly-delta_y)/global_scale;
			tRubberBand_poly.attr({'path': tPath_poly});
	}
}

// END - Draw Polygon




//BEGIN REDLINE Polyline point to point


var originX_poly_redline1 = 0;
var originY_poly_redline1 = 0;
var firstX_poly_redline1 = 0;
var firstY_poly_redline1 = 0;
var lastX_poly_redline1 = 400;
var lastY_poly_redline1 = 300;

var tPath_poly_redline1;
var tRubberBand_poly_redline1;
var polyPath_redline1;
var tPolygon_redline1;
var draw_poly_redline1 = false;
var first_point_poly_redline1 = true;

/**
 * Draws interactively a redline polyline. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlinePolyline() {
		cvjs_addHandleFunc_RedlinePolyline();
}

var cvjs_addHandleFunc_RedlinePolyline_started = false;

function cvjs_addHandleFunc_RedlinePolyline(){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	cvjs_addHandleFunc_RedlinePolyline_started = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
		
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon_redline1);
	handleGroup.mousemove(mousemove_polygon_redline1);
	handleGroup.dblclick( polygon_finish_redline1 );


	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_RedlinePolyline_started){

				cvjs_addHandleFunc_RedlinePolyline_started = false;
				polygon_finish_redline1();

				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});

}


function cvjs_removeHandleFunc_RedlinePolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
		
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var polygon_finish_redline1 = function() {

//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});

	cvjs_removeHandleFunc_RedlinePolyline();

	//console.log("update database!! "+tPolygon);
	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;
	//console.log(tPolygon_redline1);

	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	cvjs_graphicalObjectCreated('RedlinePolyline');
}



var mousedown_polygon_redline1 = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});
			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity" : "0.01"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
		 }

}

var mousemove_polygon_redline1 = function(e,x,y) {

	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}
}

//END REDLINE Polygon point to point




//BEGIN REDLINE Polyline point to point with arrow



var lastX_poly_redline_pre;
var lastY_poly_redline_pre;



/**
 * Draws interactively a redline polyline with arrow. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineArrowPolyline() {
		cvjs_addHandleFunc_RedlineArrowPolyline();
}

var cvjs_addHandleFunc_RedlineArrowPolyline_started = false;

function cvjs_addHandleFunc_RedlineArrowPolyline(){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');
	cvjs_addHandleFunc_RedlineArrowPolyline_started = true;


	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_polygon_redline3);
	handleGroup.mousemove(mousemove_polygon_redline3);
	handleGroup.dblclick( polygon_finish_redline3 );


	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_RedlineArrowPolyline_started){

				cvjs_addHandleFunc_RedlineArrowPolyline_started = false;
				polygon_finish_redline3();
				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});


}


function cvjs_removeHandleFunc_RedlineArrowPolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	//console.log("removed handler");
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var polygon_finish_redline3 = function() {

	var mycoordinate = polyPath_redline1.substring(0, polyPath_redline1.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(0, mycoordinate.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("L")+1);

	if (mycoordinate.indexOf("M")>-1)   // only one line in arrow
		mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("M")+1);

	//console.log(mycoordinate);
	var res = mycoordinate.split(",");

	var xCor = Number(res[0]);
	var yCor = Number(res[1]);

	var scaleTriangle = cvjs_currentRedline_strokeWidth;

	if (cvjs_currentRedline_strokeWidth>3)
		scaleTriangle = 3 + (cvjs_currentRedline_strokeWidth-3)/2;

	scaleTriangle = scaleTriangle*cvjs_redlineThickness_scaleFactor;

  	var triangle_design= -4.5*scaleTriangle+","+5.5*scaleTriangle+" "+0.5*scaleTriangle+","+-4.5*scaleTriangle+" "+5.5*scaleTriangle+","+5.5*scaleTriangle;

    var dX = (lastX_poly_redline1-delta_x)/global_scale - xCor;
	var dY = (lastY_poly_redline1-delta_y)/global_scale - yCor;

    //console.log(dX+" "+dY);
    var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);


	//console.log(triangle_design+" degrees "+angleInDegrees);

//
//	  Triangle.transform('T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270));

	  var Ttrans = 'T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270);

//	console.log(Ttrans)

	  var Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	  Triangle.attr({
		fill: cvjs_currentRedline_color,
		transform: Ttrans
	  });

//	  var triangleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].g( Triangle ); // Group polyline
	//  triangleGroup.transform('t' + parseInt(movePoint.x) + ',' + parseInt(movePoint.y) + 'r' + (movePoint.alpha - 90));
	//triangleGroup.transform('T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270));


//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});


	cvjs_removeHandleFunc_RedlineArrowPolyline();
	//console.log("update database!! "+tPolygon);
	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	var triangleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].g( Triangle, tPolygon_redline1 ); // Group polyline


	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;


	//console.log(triangleGroup);

//	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar, triangleGroup, Ttrans, triangle_design, polyPath_redline1);

	cvjs_graphicalObjectCreated('RedlineArrowPolyline');

}


var mousedown_polygon_redline3 = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){

			if (firstX_poly_redline1 != lastX_poly_redline1){

				lastX_poly_redline_pre = lastX_poly_redline1;
				lastY_poly_redline_pre = lastY_poly_redline1;
			}else{
			//	console.log("here");

			}


		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});

			//console.log(polyPath_redline1);


			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity" : "0.01"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
		 }

}

var mousemove_polygon_redline3 = function(e,x,y) {

	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{

					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}
}

//END REDLINE Polyline point to point with arrow







// BEGIN  REDLINE MEASUREMENT Filled Polygon


var area_vertices;
var area_vertices_counter = 0;

function calcPolygonArea(vertices) {
    var total = 0;

    for (var i = 0, l = vertices.length; i < l; i++) {
      var addX = vertices[i].x;
      var addY = vertices[i == vertices.length - 1 ? 0 : i + 1].y;
      var subX = vertices[i == vertices.length - 1 ? 0 : i + 1].x;
      var subY = vertices[i].y;

      total += (addX * addY * 0.5);
      total -= (subX * subY * 0.5);
    }

    return Math.abs(total);
}






var cvjs_measurementArea = 0.0;
var cvjs_measurementMultipleSegmentLength = 0.0;
var cvjs_MeasurementFilledPoly_firstsegment = false;

function cvjs_addHandleFunc_MeasurementFilledPolygon(){

	area_vertices = new Array();
	area_vertices_counter = 0;


	cvjs_measurementMultipleSegmentLength = 0;
	cvjs_MeasurementFilledPoly_firstsegment = true;
	
	
	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');
	cvjs_addHandleFunc_MeasurementFilledPolygon_started = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon_redline4);
	handleGroup.mousemove(mousemove_polygon_redline4);
	handleGroup.dblclick( polygon_finish_redline4 );

	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_MeasurementFilledPolygon_started){

				cvjs_addHandleFunc_MeasurementFilledPolygon_started = false;
				
				cvjs_measurementMultipleSegmentLength = Math.round( (cvjs_currentMeasurementLength)*100)/100;;
				measurement_first_point = true;
								
				
				polygon_finish_redline4();
				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});



}


function cvjs_removeHandleFunc_MeasurementFilledPolygon(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
	
		
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var polygon_finish_redline4 = function() {


	cvjs_measurement_end = true;


	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale+"Z";   // end polygon
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});


	cvjs_removeHandleFunc_MeasurementFilledPolygon();

	//console.log("update database!! "+tPolygon);

	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

//	cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, tPolygon_redline1, cvjs_currentRedline_color, 0.1);

//	cvjs_graphicalObjectCreated('RedlineFilledPolygon');


		// temp 		
		// we have to add the distance from first mouseclick to last mouse-click, so we let _x1 be the first point.

			measurement_x1 = (firstX_poly_redline1_segment1-delta_x)/global_scale;
			measurement_y1 = (firstY_poly_redline1_segment1-delta_y)/global_scale;


			var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
			var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);

			// 3.1.20i
		
//		console.log("XX"+cvjs_measurementMultipleSegmentLength +"XX"+ mLength+"ZZ")

		
			var displayLength = 0.0;
			
			cvjs_measurementMultipleSegmentLength = Math.round((cvjs_measurementMultipleSegmentLength)*100)/100;
			mLength = Math.round((mLength)*100)/100;
			var lLength = 0.0;
			
			if (cvjs_debug) console.log("XX"+cvjs_measurementMultipleSegmentLength +"XX"+ mLength+"ZZ"+" cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] "+cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]);
			
			lLength = cvjs_measurementMultipleSegmentLength + mLength;
						
						
						
			//window.alert(lLength);
						
//			displayLength = Math.round((cvjs_measurementMultipleSegmentLength + mLength)*100)/100;
			lLength = Math.round((lLength)*100)/100;
			displayLength = lLength;
			cvjs_measurementMultipleSegmentLength = lLength;			
			

			cvjs_currentMeasurementLength = displayLength;


			


		// CALCULATE AREA   DISPLAY DISTANCE

		// add the first point as the last in the polygon
		var vert_x = (firstX_poly_redline1_segment1-delta_x)/global_scale;
		var vert_y = (firstY_poly_redline1_segment1-delta_y)/global_scale;
		area_vertices[area_vertices_counter] = new Array();
		area_vertices[area_vertices_counter] = {x: vert_x, y: vert_y};
		
		if (cvjs_debug) console.log(area_vertices_counter+" "+ area_vertices[area_vertices_counter].x+"  "+area_vertices[area_vertices_counter].y);
		area_vertices_counter++;

		cvjs_measurementArea = (calcPolygonArea(area_vertices)*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]).toFixed(2);;
		
		if (cvjs_callbackMeasurement) cvjs_measurementCallback(cvjs_measurementMultipleSegmentLength , cvjs_measurementArea, cvjs_units[cvjs_active_floorplan_div_nr]);
		
			
		
		if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

			var lint = Math.floor(lLength);
			var fraction = lLength - Math.floor(lLength);
			fraction = Math.round(fraction*16);
			if (fraction == 16){
				lint+=1;
				fraction = 0;
			}
			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+lint+"\'"+" "+fraction+"/16\")");
		}
		else
			jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+cvjs_measurementMultipleSegmentLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]+")");

		 
}

var	firstX_poly_redline1_segment1 = 0;
var	firstY_poly_redline1_segment1 = 0;




var mousedown_polygon_redline4 = function(e,x,y) {


		measurement_first_point = true;



	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});
			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
			 
			// we record the first point in world coordinates
			firstX_poly_redline1_segment1 = x;
			firstY_poly_redline1_segment1 = y;
			
					 
			 // 
			 
			 
			 
		 }


		if (cvjs_MeasurementFilledPoly_firstsegment){

				cvjs_MeasurementFilledPoly_firstsegment = false;
				cvjs_measurementMultipleSegmentLength = 0.0;
				
		}
		else{
			
			// temp 		

			
			//var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
			//var mLength = (cvjs_svgToWorldUnits*measurementLength).toFixed(2);

						
			// here we have to update the total length of line segments

			//window.alert(cvjs_measurementMultipleSegmentLength+"  "+cvjs_currentMeasurementLength);
			
			cvjs_measurementMultipleSegmentLength = Math.round( (cvjs_currentMeasurementLength)*100)/100;;
			measurement_first_point = true;
						
			//window.alert(cvjs_measurementMultipleSegmentLength);
			
			
			
			
			// 3.1.20i
			//cvjs_currentMeasurementLength = mLength;
			
			// test
			
		}
		 
		 

		// begin array with vertices
		var vert_x = (x-delta_x)/global_scale;
		var vert_y = (y-delta_y)/global_scale;
		area_vertices[area_vertices_counter] = new Array();
		area_vertices[area_vertices_counter] = {x: vert_x, y: vert_y};

		if (cvjs_debug) console.log(area_vertices_counter+" "+area_vertices[area_vertices_counter].x+"  "+area_vertices[area_vertices_counter].y);
		area_vertices_counter++;

					
/***		
		
		if (cvjs_units.indexOf("feet")==0){

			var lint = Math.floor(mLength);
			var fraction = mLength - Math.floor(mLength);
			fraction = Math.round(fraction*16);
			if (fraction == 16){
				lint+=1;
				fraction = 0;
			}
			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+lint+"\'"+" "+fraction+"/16\"");
		}
		else
			jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+mLength+" "+cvjs_units);

**/		 
		 		 
		 
}

var mousemove_polygon_redline4 = function(e,x,y) {
	
	
	
	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];
	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

		
	
	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}

	
	
	
	
			if (measurement_first_point){

				measurement_first_point = false;

				measurement_x1 = (firstX_poly_redline1-delta_x)/global_scale;
				measurement_y1 = (firstY_poly_redline1-delta_y)/global_scale;

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;



			}else{

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;


			}

	
	
		if (cvjs_MeasurementFilledPoly_firstsegment){
			
				// do nothing, this is before first segment
		}
		else{
	
	
			var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
			var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);

			// 3.1.20i
			
			var displayLength = 0.0;
			
			
			cvjs_measurementMultipleSegmentLength = Math.round((cvjs_measurementMultipleSegmentLength)*100)/100;
			mLength = Math.round((mLength)*100)/100;
			var lLength = 0.0;
			
			//console.log("XX"+cvjs_measurementMultipleSegmentLength +"XX"+ mLength+"ZZ")
			
			lLength = cvjs_measurementMultipleSegmentLength + mLength;
						
			//console.log(lLength);
						
//			displayLength = Math.round((cvjs_measurementMultipleSegmentLength + mLength)*100)/100;
			lLength = Math.round((lLength)*100)/100;
			displayLength = lLength;
			

			cvjs_currentMeasurementLength = displayLength;

			
			if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

				var lint = Math.floor(displayLength);
				var fraction = displayLength - Math.floor(displayLength);
				fraction = Math.round(fraction*16);
				if (fraction == 16){
					lint+=1;
					fraction = 0;
				}
				jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+lint+"\'"+" "+fraction+"/16\"");
			}
			else
				jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+displayLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);

		 
		}
			
}





// END  REDLINE MEASUREMENT Filled Polygon















//BEGIN REDLINE Filled Polygon

/**
 * Draws interactively a redline polygon. Prior to calling this method, cvjs_setCurrentRedlineValues() should be called.
 */
function cvjs_drawSpaceObject_RedlineFilledPolygon() {
		cvjs_addHandleFunc_RedlineFilledPolygon();
}

var cvjs_addHandleFunc_RedlineFilledPolygon_started = false;

function cvjs_addHandleFunc_RedlineFilledPolygon(){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');
	cvjs_addHandleFunc_RedlineFilledPolygon_started = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor,  fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_polygon_redline2);
	handleGroup.mousemove(mousemove_polygon_redline2);
	handleGroup.dblclick( polygon_finish_redline2 );

	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_addHandleFunc_RedlineFilledPolygon_started){

				cvjs_addHandleFunc_RedlineFilledPolygon_started = false;
				polygon_finish_redline2();
				jQuery(document).keydown() == oldKeyDown;
			}
		}
	});





}


function cvjs_removeHandleFunc_RedlineFilledPolygon(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");


	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var polygon_finish_redline2 = function() {


	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale+"Z";   // end polygon
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
	tPolygon_redline1.attr({'path': polyPath_redline1});


	cvjs_removeHandleFunc_RedlineFilledPolygon();

	//console.log("update database!! "+tPolygon);

	tRubberBand_poly_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar, tPolygon_redline1, cvjs_currentRedline_color, 0.1);

	cvjs_graphicalObjectCreated('RedlineFilledPolygon');

}


var mousedown_polygon_redline2 = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
		 	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tPolygon_redline1.attr({'path': polyPath_redline1});
			firstX_poly_redline1 = lastX_poly_redline1;
			firstY_poly_redline1 = lastY_poly_redline1;

			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: cvjs_currentRedline_color, "fill-opacity":"0.1"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
		 }

}

var mousemove_polygon_redline2 = function(e,x,y) {

	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}
			tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
			tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
	}
}

//END REDLINE Filled Polygon









// BEGIN - Draw REDLINE Freehand Polygon
var originX_poly_red = 0;
var originY_poly_red = 0;
var firstX_poly_red = 0;
var firstY_poly_red = 0;
var lastX_poly_red = 400;
var lastY_poly_red = 300;

var tPath_poly_red;
var tRubberBand_poly_red;
var polyPath_red;
var tPolygon_red;
var draw_poly_red = false;
var first_point_poly_red = true;

var scaleRedline_LineSize = 1;
var scaleFactor_RedlineLineSize = 200;



function cvjs_addHandleFunc_RedlinePolygonFreehand(){

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleRedline_LineSize = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactor_RedlineLineSize;
	 else
	 	scaleRedline_LineSize = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactor_RedlineLineSize;


	tPath_poly_red = "M" + firstX_poly_red + "," + firstY_poly_red;
	tRubberBand_poly_red = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_red).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "none"});
	polyPath_red = "M" + firstX_poly_red + "," + firstY_poly_red;
	tPolygon_red = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_red).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01" });

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_red = false;
	first_point_poly_red = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_redlinepolygon);
	handleGroup.mousemove(mousemove_redlinepolygon);
	handleGroup.mouseup( redlinepolygon_finish );
}


function cvjs_removeHandleFunc_RedlinePolygonFreehand(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var redlinepolygon_finish = function() {

	polyPath_red += "L" + (lastX_poly_red-delta_x)/global_scale + "," + (lastY_poly_red-delta_y)/global_scale+"L" + (originX_poly_red-delta_x)/global_scale + "," + (originY_poly_red-delta_y)/global_scale;
	tPolygon_red.attr({'path': polyPath_red});

	cvjs_removeHandleFunc_RedlinePolygonFreehand();

	tRubberBand_poly_red.attr({'path': "M0,0"});


	draw_poly_red = false;
	first_point_poly_red = true;


	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_red);

//console.log("before setting up redline data object"); variables set in _newNode
	// cvjs_setUpVqRedlines_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentRedline_underbar);

	cvjs_graphicalObjectCreated('RedlineFreehand');

}


function cvjs_setUpVqRedlines_currentNode(rPaper, cvjs_currentRedline_underbar){


	for (var redl in vqRedlines){
		redline_node = vqRedlines[redl].data("node");

		if (redline_node == cvjs_currentRedline_underbar){

			vqRedlines[redl].data("name", cvjs_currentRedline_name);
			vqRedlines[redl].data("id", cvjs_currentRedline_id);
			vqRedlines[redl].data("layer", cvjs_currentRedline_layer);
			vqRedlines[redl].data("group", cvjs_currentRedline_group);
			vqRedlines[redl].data("color", cvjs_currentRedline_color);
			vqRedlines[redl].data("strokeWidth", cvjs_currentRedline_strokeWidth);
			vqRedlines[redl].data("fill", cvjs_currentRedline_fill);
			vqRedlines[redl].data("fill_opacity", cvjs_currentRedline_fill_opacity);
			vqRedlines[redl].data("transform", cvjs_currentRedline_transform);
			vqRedlines[redl].data("username", cvjs_currentRedline_username);
			vqRedlines[redl].data("userid", cvjs_currentRedline_userid);
			vqRedlines[redl].data("currentPage", cvjs_currentRedline_currentPage);

			vqRedlines[redl].data("triangle_design",  cvjs_currentRedline_triangle_design);
			vqRedlines[redl].data("polypath_arrow",  cvjs_currentRedline_polypath_arrow);
			vqRedlines[redl].data("redline_text", cvjs_currentRedline_redline_text);
			vqRedlines[redl].data("drawingRotation", cvjs_currentRedline_drawingRotation);

			
		}

	}

}


function cvjs_setUpVqRedlines_deleteNode(delete_redline){
	var redline_node;
	
		
	for (var redl in vqRedlines){
		redline_node = vqRedlines[redl].data("node");

		//console.log(redline_node+" "+delete_redline);
		var locked = vqRedlines[redl].data("locked");
		
		
		
//		if (cvjs_debug) console.log(redline_node+" "+locked+" delete_redline "+delete_redline);

		if (locked){
			if (redline_node == delete_redline){

				var status = lTable.languages[cvjs_currentLanguage].InfoMessageModal.RedlinesLocked+vqRedlines[redl].data("username");
				jQuery('#cvjs_informationModalText').html(status);
				jQuery('#info_messageModal').modal('show');
			}

		}
		else{
			if (redline_node == delete_redline){
				// we simply hide it by making it very small - remove the item when save
				vqRedlines[redl].data("deleted", true);
				var dTransform = "S0.001";
				vqRedlines[redl].attr({'transform': dTransform, "opacity" : "0.01"});
//				var dTransform = "S2.001";
//				vqRedlines[redl].attr({'transform': dTransform, "opacity" : "1.00"});
				
				
				console.log(vqRedlines[redl].data("polypath_arrow"));
				
		if (cvjs_debug) console.log("We transform SMALL: "+delete_redline);
		
		
		
		
				
				
			}
		}
	}
	// cvjs_setUpVqRedlines_currentNode not implemented
	//console.log("remove current redline");
	

	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
	
	
}







var mousedown_redlinepolygon = function(e,x,y) {


	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	 if (draw_poly_red){
	 }
	 else{
		polyPath_red = "M" + (x-delta_x)/global_scale + "," +(y-delta_y)/global_scale;
		 draw_poly_red = true;
	 }
}

var mousemove_redlinepolygon = function(e,x,y) {


	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;


	if (draw_poly_red){

			if (first_point_poly_red){
				first_point_poly_red = false;
				firstX_poly_red = x;
				firstY_poly_red = y;
				lastX_poly_red = x;
				lastY_poly_red = y;
				originX_poly_red = x;
				originY_poly_red = y;

			}
			else{
				lastX_poly_red = x;
				lastY_poly_red = y;
			}
			tPath_poly_red = "M" + (firstX_poly_red-delta_x)/global_scale + "," + (firstY_poly_red-delta_y)/global_scale;
			tPath_poly_red += "L" + (lastX_poly_red-delta_x)/global_scale + "," + (lastY_poly_red-delta_y)/global_scale;
			tRubberBand_poly_red.attr({'path': tPath_poly_red});

			var fac1 = Math.pow((firstX_poly_red-delta_x)/global_scale - (lastX_poly_red-delta_x)/global_scale, 2);
			var fac2 = Math.pow((firstY_poly_red-delta_y)/global_scale - (lastY_poly_red-delta_y)/global_scale, 2);

			var relativeLineLength = Math.sqrt(fac1 + fac2);

			if (relativeLineLength >scaleRedline_LineSize){

//console.log(polyPath_red);
				polyPath_red += "L" + (lastX_poly_red-delta_x)/global_scale + "," + (lastY_poly_red-delta_y)/global_scale;
				tPolygon_red.attr({'path': polyPath_red});
				first_point_poly_red = true;

			}
	}
}

// END - Draw REDLINE Polygon




// BEGIN - CopyCircle

/**
 * Draws interactively a copy of a previously defined cicle object. The data object of the circle is defined as a SpaceObject. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */

function cvjs_drawSpaceObject_CopyCircle(){

	cvjs_addHandleFunc_CopyCircle();

}



function cvjs_addHandleFunc_CopyCircle(){

//console.log("1 ");

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_copycircle);
}

function cvjs_removeHandleFunc_CopyCircle(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
}


var mousedown_copycircle = function(e,x,y) {


//console.log(e+" "+x+" "+y);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
//	tTransform_c = "t" + x + "," + y;
	tTransform_c = "t" + (x-delta_x)/global_scale + "," + (y-delta_y)/global_scale;
	tTransform_c += "S"+(delta);

//console.log(tTransform_c);

	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

	tRubberBand_c.attr({	fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1" });

	cvjs_removeHandleFunc_CopyCircle();

	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('CopyCircle');


}

// END - CopyCircle




// BEGIN - StickyNote

var mouseMoveStickyNote = false;
var tRubberBand_sn;


/**
 * Draws interactively a stickynote. The data object of the sticky note is defined as a StickyNote. Prior to calling this method, cvjs_setCurrentStickyNoteValues() should be called.
 */
function cvjs_drawStickyNoteDirect(){
		
	cvjs_addHandleFunc_StickyNote();
}


function cvjs_addHandleFunc_StickyNote(){

//console.log("1 ");

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	
	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

//window.alert("make stickynote");	
	
	// we change to mouse UP, so same as for sticky note implementation
//	handleGroup.mousedown(mousedown_stickynote);
	handleGroup.mouseup(mouseup_stickynote);


	mouseMoveStickyNote = false;
	handleGroup.mousemove(mousemove_stickynote);

}

function cvjs_removeHandleFunc_StickyNote(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}

var scaleNote = 1;
var scaleFactorNotes = 600; //300

var mousemove_stickynote = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	console.log(delta_x+"  "+delta_y);


	if (mouseMoveStickyNote == false){


		// 3.1.21k

		var rightadjustment = 0;
		if (cvjs_currentStickyNote_id<10) rightadjustment = 3;   // 30

// this is it								  
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20.0v20.0h-20.0v-20.0Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M7.0,12.0h1.3M9.5,12.0h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentStickyNote_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : ".2", "fill" : "#000000"})
								  )   ;

//
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.0,0.0h200.0v200.0h-200.0v-200.0Z").attr({stroke: "#000000", "stroke-width" : "10.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M70.0,120.0h13.0M95.0,120.0h35.0M112.5,120.0v50.0M97.5,120.0v17.5M127.5,120.0v17.5M105.0,170.0h15.0M70.0,135.0h13.0M70.0,152.5h30.0M70.0,170.0h22.0").attr({stroke: "#000000", "stroke-width" : "5.0", "fill" : "none"}),
//								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(30+rightadjustment,90,"#"+cvjs_currentStickyNote_id).attr({"font-size": "80px", "font-style": "italic", stroke: "#000000", "stroke-width" : ".2", "fill" : "#000000"})
//								  )   ;


								  
		mouseMoveStickyNote = true;
	}

	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600.0; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale + (scaleNote*10.0));
	tTransform_c += "S"+(scaleNote);               
	
//console.log(tTransform_c);	
		
//	var ellipseTrans = "T"+((firstX_r_redline-delta_x)/global_scale+lastX_r_redline/global_scale/2)  + "," + ((firstY_r_redline-delta_y)/global_scale +lastY_r_redline/global_scale/2)+"S"+lastX_r_redline/global_scale/2+","+lastY_r_redline/global_scale/2;
		
		
	tRubberBand_sn.attr({'transform': tTransform_c});	
}


//var mousedown_stickynote = function(e,x,y) {   // 2016-09-29
var mouseup_stickynote = function(e,x,y) {

//window.alert("mouse_up scaleNote "+scaleNote+"mouseMoveStickyNote "+mouseMoveStickyNote+" x"+x+" x "+e.pageX);

	if (mouseMoveStickyNote){

		tTransform_c = "t0,0S"+(scaleNote/100);
		tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
		tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
		
		// 3.1.21j
		tRubberBand_sn.remove();
	}

	var rightadjustment = 0;
	if (cvjs_currentStickyNote_id<10) rightadjustment = 3;
		
	
	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20.0v20.0h-20.0v-20.0Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentStickyNote_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0})							  
								);
								  
	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+-delta_y)/global_scale + (scaleNote*10.0));
		
	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});
	tRubberBand_c.attr({	fill: '#FFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	
	
	
	cvjs_currentStickyNote_transform = tTransform_c;
	cvjs_removeHandleFunc_StickyNote();	
	cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentStickyNote_underbar, tRubberBand_c);
	cvjs_setUpVqStickyNotes_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar);
	cvjs_graphicalObjectCreated('StickyNote');
}

// END - StickyNote


// BEGIN - Move StickyNote

var mouseMoveFlagStickyNote = false;

function cvjs_addHandleFunc_MoveStickyNote(){

//console.log("1 ");

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	mouseMoveFlagStickyNote = false;
	handleGroup.mousemove(mousemove_movestickynote);
	handleGroup.mousedown(mousedown_movestickynote);

}

function cvjs_removeHandleFunc_MoveStickyNote(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}


var mousemove_movestickynote = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	if (mouseMoveFlagStickyNote == false){

	
		var sticky_note  = cvjs_StickyNoteClicked();
		var id = 0;

		for (var note in vqStickyNotes){
			var noteUnderbar = vqStickyNotes[note].data("node");
			if (sticky_note == noteUnderbar){
				id = vqStickyNotes[note].data("id")
			}
		}

		// 3.1.21k

		var rightadjustment = 0;
		if (cvjs_currentStickyNote_id<10) rightadjustment = 3;

// this is it								  
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentStickyNote_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : ".2", "fill" : "#000000"})
								  )   ;

		mouseMoveFlagStickyNote = true;
	}


	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale + (scaleNote*10.0));	
	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c});	


}


var mousedown_movestickynote = function(e,x,y) {


	// 3.1.21k
	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;
	scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale + (scaleNote*10.0));
	tTransform_c += "S"+(scaleNote);	
	

	var id = cvjs_StickyNoteClicked();
	var n_index = cvjs_StickyNotes_arrayIndex(id);

	vqStickyNotes[n_index].attr({'transform': tTransform_c, "fill-opacity": "0.8", 'stroke-opacity': "1" });
	vqStickyNotes[n_index].data("transform", tTransform_c );

	cvjs_removeHandleFunc_MoveStickyNote();


	tTransform_c += "t0,0S"+(scaleNote/100);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_c.attr({	fill: '#FFF', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	tRubberBand_c.remove(); // 3.1.21j


}

// END - Move StickyNote







// END - draw methods




var dragInsidePolygon = false;


function AbsDiff(a ,b)
{
	return Math.abs(a-b)
}

function DoMouseDown(x, y, active_floorplan_div_nr)
{

	cvjs_active_floorplan_div_nr = active_floorplan_div_nr;

	pdx = 0;
	pdy = 0;
	basex = 0;
	basey = 0;
	firstx = x;
	firsty = y;
	dx = 0;
	dy = 0;
//	vbx = viewBox[cvjs_active_floorplan_div_nr].X;
//	vby = viewBox[cvjs_active_floorplan_div_nr].Y;
	bMouseDown = true;
	bTempMouseDown = false;
	bPan = false;
	thumbsMode = true;

if (cvjs_debug) console.log("DoMouseDown - setup"+x+" "+y+" firstx "+firstx+"  firsty "+firsty+ "  active "+cvjs_active_floorplan_div_nr);



	var svg = document.getElementsByTagName('svg')[0];
	var box = svg.getAttribute('viewBox');
	var vbox = box.split(" ");

	vbx = parseInt(vbox[0]);
	vby = parseInt(vbox[1]);



	if (!thumb_loaded){
		thumb_loaded = true;
		try{
//			drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			//console.log(err);
		}
	}

//console.log("bMouseDown="+bMouseDown);

	//lastObj[cvjs_active_floorplan_div_nr] = null;  // 1x

}


function DoMouseOut(mx, my)
{



	if (bMouseDown)
		{
		if (bPan)
			{
			dx = mx - firstx;
			dy = my - firsty;

			pdx = dx*zoomScale;
			pdy = dy*zoomScale;
			basex = dx;
			basey = dy;

			viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
			viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

			var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
			//console.log("attr_2="+attr_2);
			var json_obj = jQuery.parseJSON(attr_2);
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

			// NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

			bTempMouseDown = true;
			}
		}



}

function DoMouseOver(mx, my)
{
	if ((bTempMouseDown) || (bMouseDown))
		{
		bTempMouseDown = false;
		bMouseDown = true;
		}
}

function DoMouseUp(x, y)
{

	bMouseDown = false;
	bTempMouseDown = false;


	if (bPan)
		{
		viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
		viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

		var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
		//console.log("attr_2="+attr_2);
		var json_obj = jQuery.parseJSON(attr_2);
		cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

		//NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy, viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);
		}


	if (bPan){

		try{

//			layer_thumb.hide();
//			layers_all.show();
//			layer_vqrooms[cvjs_active_floorplan_div_nr].show();

			if (panWithThumb){
				layers_all.attr(show);
				layer_thumb.attr(hide);
			}

			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);


		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("txx "+err);
		}

	}
	else{
		tip[cvjs_active_floorplan_div_nr].show();                    // only show tooltip if no panning

	}


		preventDrag = true;

		try{
				if (totalDragStart == 2){

					e.preventDefault();
					e.stopPropagation();

				}

		}

		catch(err){
			bPan = false;
		}



			try{

				if (totalDragStart == 2 ){


					viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
					viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
					vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
					vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
					viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
					viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
					viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
					viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

					viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
					viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


					//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
					//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

					//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
					//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

//NNN					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("x viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					//console.log("attr_2="+attr_2);
					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


					//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN					cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);

//var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);
//jQuery('#temperature').css('color', '#F000FF');
//jQuery("#temperature").html(string_X);


				}

			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				//console.log(err);
			}




			try{



				if (panWithThumb){
					layers_all.attr(show);
					layer_thumb.attr(hide);
				}

//				layer_thumb.hide();
//				layers_all.show();
//				layer_vqrooms[cvjs_active_floorplan_div_nr].show();

				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);

			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				console.log(err);
			}

	//console.log("ping! mouse up");	// moving this up breaks pan on ipad
	bPan = false;




}

var basemx=0;
var basemy=0;

function DoMouseMove(mx, my)
{




//console.log("are we here! 1 mx "+mx+" my "+my);


//console.log("bMouseDown="+bMouseDown+" mx="+mx+" bpan"+bPan);
//console.log(" totalDragStart="+totalDragStart+"  mx="+mx+" my="+my);


//string_X = "start mousemove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#FF00FF');
//jQuery("#location").html(string_X);

	if (!bPan){
		basemx=mx;
		basemy=my;
	}


	if (thumbsMode && bPan && ((basemx-mx) != 0) && ((basemy-my) != 0)){

		try{
			thumbsMode = false;

//			layer_thumb.show();
//			layers_all.hide();
//			layer_vqrooms[cvjs_active_floorplan_div_nr].hide();

			if (panWithThumb){
//				layers_all.hide();
//				layer_thumb.show();
				layers_all.attr(hide);
				layer_thumb.attr(show);
				// this is for SVG files created with TMS   2017-09-04
				all_layer_off_thumb_on();

			}
			
			// NOTE!!!
			// 2018-01-15 removed this statement, may obstruct panning
			//layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);

			
		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t1 "+err);
		}
	}


//console.log("are we here! 2");
	
	
	if (bMouseDown && !bPan){

	
	
//	console.log("are we here! 3");

		bPan = true;

		dragInsidePolygon = true;

		try{
//			thumbsMode = false;   2016-01-11

//			layer_thumb.show();
//			layers_all.hide();
//			layer_vqrooms[cvjs_active_floorplan_div_nr].hide();

/*

			if (panWithThumb){
//				layers_all.show();
//				layer_thumb.hide();
				layers_all.attr(hide);
				layer_thumb.attr(show);
			}

			layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);
*/

		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log(err);
		}


	}


		try{

//if (bMouseDown == false || totalDragStart !=0) console.log("bMouseDown="+bMouseDown+" totalDragStart="+totalDragStart);


//string_X = "before if mmove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#F0F0F0');
//jQuery("#location").html(string_X);


	if (bMouseDown && totalDragStart < 2)
		{


//string_X = "if 1 mmove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#FF00F0');
//jQuery("#location").html(string_X);


		dx = mx - firstx;
		dy = my - firsty;


//string_X = "if 2 mmove "+totalDragStart+" dx="+dx+" dy="+dy+" basex="+basex+" basey="+basey;
//jQuery('#location').css('color', '#FF00FC');
//jQuery("#location").html(string_X);


//console.log("are we here! 4 "+dx+" "+dy+ "  basex= "+basex+"  basey="+basey);

//console.log("dx="+dx+" dy="+dy+" basex="+basex+" basey="+basey);

		if ((Math.abs(basex-dx)>4) || (Math.abs(basey-dy)>4))
			{

//string_X = "before setView "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#00FFF0');
//jQuery("#location").html(string_X);

//console.log("1");

			hideOnlyPop();
//console.log("2");
			tip[cvjs_active_floorplan_div_nr].hide();
			cvjs_clearDrawing();
//console.log("3");

			hideOnlyStickyNote();
//console.log("4");
			cvjs_clearDrawingStickyNotes();
//console.log("5");

//console.log("qqq1");

			bPan = true;

//			console.log("inside drag viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+"  "+" viewBoxHeight[cvjs_active_floorplan_div_nr] "+viewBoxHeight[cvjs_active_floorplan_div_nr]);


		//	pdx = dx*zoomScale;
		//	pdy = dy*zoomScale;

			var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
			var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
			var scale = 1;
			if (xscale>yscale) {
				scale = xscale
			}
			else{
				scale = yscale;
			}
			pdx = dx*scale;
			pdy = dy*scale;


			basex = dx;
			basey = dy;

			viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
			viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

			//console.log("vbx="+vbx+" vby="+vby+" pdx="+pdx+" pdy="+pdy);
			var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
			//console.log("attr_2="+attr_2);
			var json_obj = jQuery.parseJSON(attr_2);

			//console.log("json_obj="+json_obj);
			cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);


			// NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

//string_X = "after setView "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#00FFF0');
//jQuery("#location").html(string_X);

			}
		}


		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log(err);
		}


//string_X = "last in mousemove "+totalDragStart+" mx="+mx+" my="+my;
//jQuery('#location').css('color', '#00DDEE');
//jQuery("#location").html(string_X);


}






function DoTouchMove(event, x, y)
{


// deprecated 2014-08-05
		try{
//			layer_thumb.show();
//			layers_all.hide();


			if (panWithThumb){
//				layers_all.hide();
//				layer_thumb.show();
				layers_all.attr(hide);
				layer_thumb.attr(show);
			}





		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t2 "+err);
		}





			 if (preventDrag){
			 	event.stopPropagation();
				event.preventDefault();
			 }

			// disable drag move
			if (totalDragStart == 2){
				event.stopPropagation();
				event.preventDefault();
				tip[cvjs_active_floorplan_div_nr].hide();
				hideOnlyPop();
				hideOnlyStickyNote();

			}


//string_X = "touchmove "+totalDragStart+" preventDrag="+preventDrag;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);



			if (totalDragStart == 2){


				try{


					firstFingerX = event.touches[0].pageX;
					firstFingerY = event.touches[0].pageY;

					//console.log("event.touches[0].pageX="+event.touches[0].pageX+" event.touches[0].pageY="+event.touches[0].pageY);
					totalDragStart = 1;
					preventDrag = false;

					//console.log("event.touches[1].pageX="+event.touches[1].pageX+" event.touches[1].pageY="+event.touches[1].pageY);
					secondFingerX = event.touches[1].pageX;
					secondFingerY = event.touches[1].pageY;
					totalDragStart = 2;
					preventDrag = true;


					allowPinchWithNoPolygons = false;


					deltaX= secondFingerX - firstFingerX;
					deltaY= secondFingerY - firstFingerY;

					// zoom the difference between fingers

					//
					//deltaDynamic = Math.sqrt(deltaX*deltaX + deltaY*deltaY)/deltaBase;
					deltaDynamic = Math.sqrt(deltaX*deltaX + deltaY*deltaY);


					// if deltaDynamic > 1 zoom in
					// if deltaDynamic < 1 zoom out

//var string_X = " allowPinchWithNoPolygons="+allowPinchWithNoPolygons;
//var string_X = " deltaDynamic="+deltaDynamic+" deltaDynamicPre="+deltaDynamicPre;
//	jQuery('#temperature').css('color', '#FF0000');
//	jQuery("#temperature").html(string_X);
//string_X = " deltaDynamic-deltaDynamicPre="+(deltaDynamic-deltaDynamicPre)+" flagOK="+flagOK;
//
//	jQuery('#location').css('color', '#F00F0F');
//	jQuery("#location").html(string_X);


	if ((deltaDynamic-deltaDynamicPre > 4 || deltaDynamic-deltaDynamicPre < -4 ) && flagOK){

						flagOK = false;

						deltaDynamicPre = deltaDynamic;

//console.log(" in setview loop");

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("in setview loop");


						viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
						viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("2");

						vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("3");
						viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
						viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

						viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
						viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("4");

						//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X,viewBox[cvjs_active_floorplan_div_nr].Y,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);

//NNN						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("x2 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];


						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
						//console.log("attr_2="+attr_2);
						var json_obj = jQuery.parseJSON(attr_2);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//NNN						setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
						//cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);



//	var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);

//	jQuery('#temperature').css('color', '#FF0000');
//	jQuery("#temperature").html(string_X);


//	jQuery('#location').css('color', '#F00F00');
//s	jQuery("#location").html("end of setview loop");


						var vb1X = viewBox[cvjs_active_floorplan_div_nr].X;
						var vb1Y = viewBox[cvjs_active_floorplan_div_nr].Y;


						firstFingerX1 = firstFingerX;
						firstFingerY1 = firstFingerY;

						flagOK = true;


				}




				}
				catch(err){
					//console.log("setuprooms_37 1 : " +err);
					var dummy5 = 1;
				}



			}







//	jQuery("#motion").html("Touch Move");
//	jQuery("#x").html(x);
//	jQuery("#y").html(y);



//console.log("rooms touch move!");


}






function DoTouchStart(event, x, y)
{

//string_X = "DoTouchStart ";
//jQuery('#temperature').css('color', '#0F000F');
//jQuery("#temperature").html(string_X);



		preventDrag = true;

if (cvjs_debug) console.log("touch start");

ttest=0;
		event.preventDefault();
		event.stopPropagation();

		if (!thumb_loaded){
			thumb_loaded = true;
			try{

			// console.log("before drawThumb touchstart");

//				drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				console.log("t3 "+err);
			}
//console.log("drawThumb");
		}







			try{

				firstFingerX = event.touches[0].pageX;
				firstFingerY = event.touches[0].pageY;

				//console.log("event.touches[0].pageX="+event.touches[0].pageX+" event.touches[0].pageY="+event.touches[0].pageY);
				totalDragStart = 1;
				preventDrag = false;


				//console.log("event.touches[1].pageX="+event.touches[1].pageX+" event.touches[1].pageY="+event.touches[1].pageY);
				secondFingerX = event.touches[1].pageX;
				secondFingerY = event.touches[1].pageY;
				totalDragStart = 2;
				preventDrag = true;

				allowPinchWithNoPolygons = false;


				deltaXinit= secondFingerX - firstFingerX;
				deltaYinit= secondFingerY - firstFingerY;

				// the difference between two fingers
				deltaBase = Math.sqrt(deltaXinit*deltaXinit + deltaYinit*deltaYinit);

				deltaDynamicPre = deltaBase;

				viewBoxWidthPre = viewBoxWidth[cvjs_active_floorplan_div_nr];
				viewBoxheightPre = viewBoxHeight[cvjs_active_floorplan_div_nr];

				firstFingerX1 = firstFingerX;
				firstFingerY1 = firstFingerY;
				firstFingerX_init = firstFingerX;
				firstFingerY_init = firstFingerY;


				viewBox_initX[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].X;
				viewBox_initY[cvjs_active_floorplan_div_nr] = viewBox[cvjs_active_floorplan_div_nr].Y;

				viewBoxWidth_init[cvjs_active_floorplan_div_nr] = viewBoxWidth[cvjs_active_floorplan_div_nr];
				viewBoxHeight_init[cvjs_active_floorplan_div_nr] = viewBoxHeight[cvjs_active_floorplan_div_nr];

				flagOK = true;





				//viewBoxWidth[cvjs_active_floorplan_div_nr]  = cvjs_rPaper[cvjs_active_floorplan_div_nr].width;
				//viewBoxHeight[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].height;



			}
			catch(err){
				//console.log(err);

				//console.log("setuprooms_38 2 : " +err);

				var dummy4 = 1;


			}


//console.log("touch start totalDragStart="+totalDragStart);



//console.log("x touch start event="+event);

//string_X = "touchstart "+totalDragStart;

//string_X = "allowPinchWithNoPolygons="+allowPinchWithNoPolygons;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);


}






function DoTouchEnd(event, x, y)
{

//string_X = "DoTouchEnd ";
//jQuery('#temperature').css('color', '#0F000F');
//jQuery("#temperature").html(string_X);



				preventDrag = true;


				if (totalDragStart == 2){

					event.preventDefault();
					event.stopPropagation();
					tip[cvjs_active_floorplan_div_nr].hide();
					hideOnlyPop();
					hideOnlyStickyNote();

				}




				try{


					if (totalDragStart == 2){


						viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
						viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
						vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
						viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
						viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
						viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

						viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
						viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

						//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
						//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

	//jQuery('#location').css('color', '#F00F00');
	//jQuery("#location").html("4");

//NNN						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

//console.log("x3 viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" rpWidth[cvjs_active_floorplan_div_nr] "+rpWidth[cvjs_active_floorplan_div_nr]);

						zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
						//console.log("attr_2="+attr_2);
						var json_obj = jQuery.parseJSON(attr_2);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);



						//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN						cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);

//	var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);
//	jQuery('#temperature').css('color', '#F000FF');
//	jQuery("#temperature").html(string_X);


					}



					var attr_1 = "{\"display\" : \"none\" }";
					var hide = jQuery.parseJSON(attr_1);
					var attr_2 = "{\"display\" : \"inline\" }";
					var show = jQuery.parseJSON(attr_2);

					if (panWithThumb){
						layers_all.attr(show);
						layer_thumb.attr(hide);
					}

					layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);


					//totalDragStart = 0;

				}
				catch(err){
					//  allow the code to work with both version 1.1 and 1.2
					console.log("t4 "+err);
				}

}



var currentRoomId;
var currentRoomName;

//var tooltipLast[active_floorplan_div_nr] = -1;
var tooltipLast = [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1];


var currentStickyNoteId;
var currentStickyNoteName;
var tooltipLastStickyNote = -1;



var tooltipLastHyperlink = -1;


var currentUrlId;
var currentUrlName;




function setRoomAfterPanPC(){

	tip[cvjs_active_floorplan_div_nr].html(currentRoomName);
	bMouseDown = false;
	cvjs_clearDrawing();
//console.log("4");
	change_space_fixed_location(currentRoomId);
}


function setUpVqRooms(paper, active_floorplan_div_nr)
{

var floorplan_div = "";
// 
if (active_floorplan_div_nr != undefined){

	paper = cvjs_rPaper[active_floorplan_div_nr];
	cvjs_active_floorplan_div_nr = active_floorplan_div_nr;
	floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];
}


//console.log("vqBuilding paper="+paper);
if (cvjs_debug) console.log("vqBuilding active nr="+cvjs_active_floorplan_div_nr+"  "+paper.toString().substring(0,100));



floorplan_height = jQuery(window).height()*.9;
floorplan_width = jQuery(window).width()*.9;

var current = null;
tip[active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div);
tip[active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);

var tipText = "";
var over = false;

var building = null;
var floor = null;





//console.log("vqBuilding ="+vqBuilding+" vqFloor="+vqFloor);

try{

jQuery.fn.qtip.defaults.show.event = 'click';
jQuery.fn.qtip.defaults.hide.event = null;

}
catch(err){
	// 2016-01-30
	// console.log("err="+err);
}
//console.log("vq2");


	if (vqBuilding in buildings)

//console.log("1");

		{
		building = buildings[vqBuilding];
		if (vqFloor in building.floors)
			{
			floor = building.floors[vqFloor];
			}
		}

console.log("vqBuilding ="+vqBuilding+" vqFloor="+vqFloor +" floor= "+floor);


// 2014-08-25
// NNN removed
// layer_vqrooms[cvjs_active_floorplan_div_nr] = paper.set();

//  the layer is defined as a group element
   layer_vqrooms[active_floorplan_div_nr] = paper.g();

   if (cvjs_debug) console.log("layer_vqrooms["+active_floorplan_div_nr+" is part of  "+paper.toString().substring(0,100));

//console.log("after paper.g() vqRooms="+vqRooms+" vqRooms[cvjs_active_floorplan_div_nr][0]="+vqRooms[cvjs_active_floorplan_div_nr][0]+" XX 1 "+vqRooms[cvjs_active_floorplan_div_nr][1]);
//console.log("after paper.g() vqRooms[cvjs_active_floorplan_div_nr][0]="+vqRooms[cvjs_active_floorplan_div_nr][0]+" XX 1 "+vqRooms[cvjs_active_floorplan_div_nr][1]);

//window.alert("vqrooms "+vqRooms[cvjs_active_floorplan_div_nr]+" "+floor.rooms);


for (var room in vqRooms[cvjs_active_floorplan_div_nr])
	{
	var bFound = 0;

if (cvjs_debug) console.log("first loop room=" + room);

	for (bRoom in floor.rooms)
	{
		rid = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

//if (cvjs_debug) console.log("bRoom=" + bRoom);
		
		
		if (bRoom == rid)
		{

//console.log("bRoom:" + bRoom+ " room="+room);
//console.log("rid:   vqRooms["+cvjs_active_floorplan_div_nr+"  " + rid);
	
	
	
//console.log("in assignment loop ");

			bFound = 1;

			// identify tags
			var allTags = floor.rooms[bRoom].tags;
			// loop over tags
			var ii=1;
			for (var tags in allTags){
				var tagx = "tag"+ii;
				var tagData = allTags[tags];
				while (tagData.charAt(0) == ' ')
					tagData = tagData.substr(1);
				tagData = tagData.replace(/ /gi, "&nbsp;");
				vqRooms[cvjs_active_floorplan_div_nr][room].data( tagx, tagData);
			//	vqRooms[cvjs_active_floorplan_div_nr][room].attr( tagx, tagData);
				ii++;
			}

			vqRooms[active_floorplan_div_nr][room].data("occupancy", floor.rooms[bRoom].occupancy);
			vqRooms[active_floorplan_div_nr][room].data("name", floor.rooms[bRoom].name);
			vqRooms[active_floorplan_div_nr][room].data("type", floor.rooms[bRoom].type);

			if (floor.rooms[bRoom].id == -1)
				vqRooms[active_floorplan_div_nr][room].data("id", rid);
			else
				vqRooms[active_floorplan_div_nr][room].data("id", floor.rooms[bRoom].id);


//			vqRooms[cvjs_active_floorplan_div_nr][room].data("rmid", room);    /// NOTE - NOT USED   2015-9-3

			try{

				// 2.4_40
				vqRooms[active_floorplan_div_nr][room].data("layer", floor.rooms[bRoom].layer);
				vqRooms[active_floorplan_div_nr][room].data("group", floor.rooms[bRoom].group);
				// 2.4_42
				vqRooms[active_floorplan_div_nr][room].data("attributes", floor.rooms[bRoom].attributes);
				vqRooms[active_floorplan_div_nr][room].data("attributeStatus", floor.rooms[bRoom].attributeStatus);

			if (floor.rooms[bRoom].linked != undefined){
//console.log(bRoom+" floor.rooms[bRoom].linked "+floor.rooms[bRoom].linked);
				vqRooms[active_floorplan_div_nr][room].data("linked", floor.rooms[bRoom].linked);
				vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle);  // 3.2.02e
			}
			else
				vqRooms[active_floorplan_div_nr][room].data("linked", false);
				vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle); // 3.2.02e

			}
			catch(err){
				console.log(err);
			}

//			vqRooms[cvjs_active_floorplan_div_nr][room].attr(defaultColor);  // set colors ( note: change attribute name to something more applicable


			if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
				vqRooms[active_floorplan_div_nr][room].attr(defaultColor);
			}
			else{
				if (vqRooms[active_floorplan_div_nr][room].data("linked")){
					vqRooms[active_floorplan_div_nr][room].attr(defaultColor_linked);
				}
				else{
					vqRooms[active_floorplan_div_nr][room].attr(defaultColor_unlinked);
				}
			}


			var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+floor.rooms[bRoom].id+"\');\">"+floor.rooms[bRoom].name+"</td>"+
				"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
				"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+floor.rooms[bRoom].type+"</h4></td></tr></table>";


//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

			if (dual_hbody_flag){
				if ( parseInt(floor.rooms[bRoom].id) >=-1){
					jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}else{
					jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
				}
			}

			if (!dual_hbody_flag){
					jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
						style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
						position: {my: 'bottom center', at: 'top left'},
						hideOnHTMLClick: 'false'});
			}



//console.log("before vqRoom mousedown");
			vqRooms[active_floorplan_div_nr][room].mousedown(function(e){

//console.log(this.data("id"));


//string_X = "mousedown 1";
//jQuery('#display_tip').css('color', '#FF0F0F');
//jQuery("#display_tip").html(string_X);

if (cvjs_debug) console.log("G Domousedown"+e.clientX+"  "+document.body.scrollLeft+" "+e.clientY+" "+document.body.scrollTop);		

				vqRoomMouseSelect = true;
				DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, active_floorplan_div_nr);
			}).mouseout(function(e){			

			
				jQuery("#tip"+"_"+floorplan_div_Array[active_floorplan_div_nr]).hide();
				
				//if (cvjs_debug) console.log("ÅÅÅ out with mouse");
		
				// 3.2.02h  
				//  we have to set to default color when leaving the Space
				var rm = findRoom(currentRoomId);				


				// 3.3.01c
				if (!vqRoomMouseSelect){
					

						if (!cvjs_supressPopUpModal  || cvjs_standardHighLightColors){
						if (cvjs_debug) console.log("room="+rm+" defaultcolor" );
							vqRooms[active_floorplan_div_nr][rm].attr(defaultColor);
						}
						else{
							// we need to keep highlight in Space Management Edit mode
							
							/*
						if (cvjs_debug) console.log("room="+rm+" linked part" );
							if (vqRooms[active_floorplan_div_nr][rm].data("linked")){
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_linked);
							}
							else{
								vqRooms[active_floorplan_div_nr][rm].attr(defaultColor_unlinked);
							}
							
							*/
						}
						// 3.2.02h  					
				}

				
			
			}).mousemove(function(e){


//console.log("in mousemove");

currentRoomId = this.data("id");
currentRoomName = this.data("name");

//string_X = "mousemove 1"+currentRoomId+" "+currentRoomName;
//jQuery('#tip').css('color', '#FF0F0F');
//jQuery("#tip").html(string_X);


//if (cvjs_debug)console.log("mousemove bMouseDown ="+bMouseDown+" "+currentRoomId+" "+currentRoomName+"  "+active_floorplan_div_nr);

				if ((bMouseDown) || (bTempMouseDown))
					DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
				else {
//console.log("1Q");

					var rm = findRoom(currentRoomId);

//console.log("tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast+ "cvjs_location_flag="+cvjs_location_flag);

//string_X = "tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast;
//jQuery('#display_tip').css('color', '#FF0F0F');
//jQuery("#display_tip").html(string_X);


//if (cvjs_debug) console.log(rm+"   "+lastObj[active_floorplan_div_nr]+" cvjs_location_flag="+cvjs_location_flag+"  "+tooltipLast[active_floorplan_div_nr]);



					if (rm >= 0)
					{
						if (rm != lastObj[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

//console.log("NOTE before attributes conditional statement "+tooltipLast[active_floorplan_div_nr]);
							if (tooltipLast[active_floorplan_div_nr] != lastObj[cvjs_active_floorplan_div_nr] && tooltipLast[active_floorplan_div_nr]!=-1){
								// vqRooms[cvjs_active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);

								if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
									vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor);
								}
								else{
									if (vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].data("linked")){
										vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor_linked);
									}
									else{
										vqRooms[active_floorplan_div_nr][tooltipLast[active_floorplan_div_nr]].attr(defaultColor_unlinked);
									}
								}

							}

//console.log("before highlight "+cvjs_supressPopUpModal+"  "+cvjs_standardHighLightColors);


							//vqRooms[cvjs_active_floorplan_div_nr][rm].attr(highlight);

							if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors){
								vqRooms[active_floorplan_div_nr][rm].attr(highlight);
							}
							else{
								if (vqRooms[active_floorplan_div_nr][rm].data("linked")){
									vqRooms[active_floorplan_div_nr][rm].attr(highlight_linked);
								}
								else{
									vqRooms[active_floorplan_div_nr][rm].attr(highlight_unlinked);
								}
							}

							tooltipLast[active_floorplan_div_nr] = rm;
						}
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");

				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));

					tip[active_floorplan_div_nr].html(tipText);
					tip[active_floorplan_div_nr].show();
					
					var position = jQuery('#'+floorplan_div).position();
					var floorplan_pos = jQuery('#'+floorplan_div).css('position');	


					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
					//XXYYZZ
					
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
						if (cvjs_debug) console.log("absolute "+active_floorplan_div_nr);
					   tip[active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

//							if (cvjs_debug) console.log("inside "+active_floorplan_div_nr);
						
						tip[active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
				   }

				   }).mouseup(function(e){


				// 3.3.01c
				//vqRoomMouseSelect = false;



//string_X = "bPan="+bPan;
//jQuery('#temperature').css('color', '#FF0F0F');
//jQuery("#temperature").html(string_X);


//console.log("XXXmouse up bPan="+bPan)

				if (bPan){

					DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");


					if (cvjs_customToolTip)
						tipText = cvjs_displayCustomToolTip(this.data("id"));


					//tipText = this.data("name");
					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;
//console.log("m1")
					cvjs_clearDrawing();
//console.log("m2")
					//CheckRoomOnScreen(this);
					rid = this.data("id");
//console.log("m3")
					change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);
				}
				else{
//console.log("XXX")
					try{

						layer_vqrooms[active_floorplan_div_nr].attr(show);


						if (panWithThumb){
							layers_all.attr(show);
							layer_thumb.attr(hide);
						}

						//layers_all.show();
						//layer_vqrooms[cvjs_active_floorplan_div_nr].show();
						//layer_thumb.hide();

					}
					catch(err){
						//  allow the code to work with both version 1.1 and 1.2
						console.log("t5 "+ err);
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");

					if (cvjs_customToolTip)
						tipText = cvjs_displayCustomToolTip(this.data("id"));

					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;
					cvjs_clearDrawing();
					//CheckRoomOnScreen(this);
					rid = this.data("id");
					//change_space(rid);
//console.log("m4");
					change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);

				}
				bPan = false;

			}).touchstart(function(e) {

//console.log("in touchstart");

//string_X = "touchstart 1";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);


				DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).touchend(function(e) {


//console.log("in touchend");

//string_X = "touchend 2";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);



//console.log("3Q");
				if ((!bPan) && (!locked))
					{
					rid = this.data("id");
					cvjs_change_space(rid);

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");
					//tipText = this.data("name");

					if (cvjs_customToolTip)
						tipText = cvjs_displayCustomToolTip(this.data("id"));

					tip[cvjs_active_floorplan_div_nr].html(tipText);
					}
				DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;
//console.log("m1")
				cvjs_clearDrawing();
//console.log("m2")
				//CheckRoomOnScreen(this);
				rid = this.data("id");
//console.log("touch m3")
//console.log("m6");
				change_space_fixed_location(rid, cvjs_active_floorplan_div_nr);


			}).touchmove(function(e) {

//console.log("in touchmove");

//string_X = "touchmove 1";
//jQuery('#location').css('color', '#FF0F0F');
//jQuery("#location").html(string_X);

//console.log("touch move");
				if (!bPan)
				{
					
					
				var position = jQuery('#'+floorplan_div).position();
				var floorplan_pos = jQuery('#'+floorplan_div).css('position');				

				// 3.2.01e
				tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});


				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
						
					
//				tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//				tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
				tip[cvjs_active_floorplan_div_nr].html(tipText);


				if (cvjs_customToolTip)
					tipText = cvjs_displayCustomToolTip(this.data("id"));


				}
				DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).dblclick(function(e) {
				event.preventDefault();
				event.stopPropagation();
			});
		}
	}

//console.log("before bFound== 0 bFound="+bFound);
	if (bFound == 0)
		{
		var node_vq = vqRooms[cvjs_active_floorplan_div_nr][room].data("node");

if (cvjs_debug)	console.log("room not found "+node_vq);
		vqRooms[active_floorplan_div_nr][room].data("occupancy", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("name", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("type", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("id", node_vq);
		jQuery(vqRooms[active_floorplan_div_nr][room].node).qtip({title: "Undefined", content: "", placement: 'top'});

		// 2.4_40
		vqRooms[active_floorplan_div_nr][room].data("layer", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("group", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("attributes", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("attributeStatus", "undefined");
		vqRooms[active_floorplan_div_nr][room].data("linked", false);
		vqRooms[active_floorplan_div_nr][room].data("handle", "");  // 3.2.02e

		}
//	console.log("adding: "+active_floorplan_div_nr+" "+room+" "+vqRooms[active_floorplan_div_nr][room]);
//	console.log("adding: "+active_floorplan_div_nr+" "+room+" ");
	
	layer_vqrooms[active_floorplan_div_nr].add(vqRooms[active_floorplan_div_nr][room]);
	}

	
	if (cvjs_debug) console.log("  LAYER VQROOMS We have active "+ cvjs_active_floorplan_div_nr);

	
	
//layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);	

 //  	layer_vqrooms[active_floorplan_div_nr].attr(hide);
	
//cvjs_LayerOn_AllOff("Sensors");
//cvjs_GroupOn_AllOff("3");

}



function setUpVqStickyNotes(paper){

//console.log("setup vqStickyNotes on load not yet implemented");

}


function setUpVqRedlines(paper){

//console.log("setup vqRedlines on load not yet implemented");

}


function setUpVqURLs(paper){

//console.log("setup vqURLs on load not yet FULLY implemented");


var current = null;
tip[cvjs_active_floorplan_div_nr] = jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
tip[cvjs_active_floorplan_div_nr].hide().css("left", floorplan_width).css("top", floorplan_height);

var tipText = "";
var over = false;

var building = null;
var floor = null;

try{

jQuery.fn.qtip.defaults.show.event = 'click';
jQuery.fn.qtip.defaults.hide.event = null;

}
catch(err){
	// 2016-01-30
	//console.log("err="+err);
}

	if (vqBuilding in buildings)
		{
		building = buildings[vqBuilding];
		if (vqFloor in building.floors)
			{
			floor = building.floors[vqFloor];
			}
		}

   layer_hyperlinks = paper.g();


for (var jsurl in vqURLs)
	{
	var bFound = 0;

//console.log("first loop room=" + room);

	for (bRoom in floor.rooms)
	{
//console.log("bRoom:" + bRoom+ " room="+room);
		rid = vqURLs[jsurl].data("node");

		if (bRoom == rid)
		{

//console.log("in assignment loop ");

			bFound = 1;

			vqURLs[jsurl].data("name", floor.rooms[bRoom].name);

			if (floor.rooms[bRoom].id == -1)
				vqURLs[jsurl].data("id", rid);
			else
				vqURLs[jsurl].data("id", floor.rooms[bRoom].id);

			try{
				vqURLs[jsurl].data("layer", floor.rooms[bRoom].layer);
				vqURLs[jsurl].data("group", floor.rooms[bRoom].group);
				vqURLs[jsurl].data("url", floor.rooms[bRoom].url);

			if (floor.rooms[bRoom].linked != undefined){
				vqURLs[jsurl].data("linked", floor.rooms[bRoom].linked);
				vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle);  // 3.2.02e
			}
			else
				vqURLs[jsurl].data("linked", false);
				vqRooms[active_floorplan_div_nr][room].data("handle", floor.rooms[bRoom].handle);  // 3.2.02e

			}
			catch(err){
				console.log(err);
			}

			vqURLs[jsurl].attr(defaultColor_Hyperlinks);  // set colors ( note: change attribute name to something more applicable



			if (!cvjs_supressHyperlinkColors){
				vqURLs[jsurl].attr(defaultColor_Hyperlinks);  // set colors ( note: change attribute name to something more applicable
			}
			else{
				vqURLs[jsurl].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
			}


//console.log("before vqRoom mousedown");
			vqURLs[jsurl].mousedown(function(e){

			if (cvjs_debug) console.log("H Domousedown");		
			
				vqRoomMouseSelect = true;
				DoMouseDown(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop, active_floorplan_div_nr);
			}).mouseout(function(e){			

				jQuery("#tip"+"_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
				
			}).mousemove(function(e){


//console.log("in mousemove");

currentUrlId = this.data("id");
currentUrlName = this.data("name");

//string_X = "mousemove 1"+currentRoomId+" "+currentRoomName;
//jQuery('#tip').css('color', '#FF0F0F');
//jQuery("#tip").html(string_X);


//console.log("mousemove bMouseDown ="+bMouseDown+" "+currentRoomId+" "+currentRoomName);
				if ((bMouseDown) || (bTempMouseDown))
					DoMouseMove(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
				else {
//console.log("1Q");

					var rm = findUrl(currentUrlId);

//console.log("tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast+ "cvjs_location_flag="+cvjs_location_flag);

//string_X = "tip[cvjs_active_floorplan_div_nr].css vqRoom vqRoomMouseSelect="+vqRoomMouseSelect+" before tip rm="+rm+" lastObj="+lastObj+" tooltipLast="+tooltipLast;
//jQuery('#display_tip').css('color', '#FF0F0F');
//jQuery("#display_tip").html(string_X);

					if (rm >= 0)
					{
						if (rm != lastObjHyperlink[cvjs_active_floorplan_div_nr] && cvjs_location_flag ){      // only do this when in location mode

//console.log("before attributes conditional statement "+tooltipLast+"  "+attributes+" "+highlight);
							if (tooltipLastHyperlink != lastObjHyperlink[cvjs_active_floorplan_div_nr]){

								if (!cvjs_supressHyperlinkColors){
									vqURLs[tooltipLastHyperlink].attr(defaultColor_Hyperlinks);
								}
								else{
									vqURLs[tooltipLastHyperlink].attr(defaultColor_Hyperlinks_blank);  // set colors ( note: change attribute name to something more applicable
								}
							}


							if (!cvjs_supressHyperlinkColors){
								vqURLs[rm].attr(highlight_Hyperlinks);
							}
							else{
								vqURLs[rm].attr(defaultColor_Hyperlinks_blank);
							}
							tooltipLastHyperlink = rm;
						}
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");


					tip[cvjs_active_floorplan_div_nr].html(tipText);
					tip[cvjs_active_floorplan_div_nr].show();

					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
					
					
								
					var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
					var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
					if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
					//console.log("absolute");
					   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
					}
					else{  // we have placed CV-JS inside a div and we have to make a relative position

						//console.log("inside");
						//console.log(position.left+" "+position.top+"tipText="+tipText+" e.clientX "+e.clientX+" e.clientY "+e.clientY+" "+document.documentElement.scrollLeft+" "+document.documentElement.scrollTop);
						//console.log(e.clientX-position.left+document.documentElement.scrollLeft+10);
						//console.log(e.clientY-position.top+document.documentElement.scrollTop-25);
						tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
					}
					
				}
			}).mouseup(function(e){


//console.log("in mouseup");

//string_X = "mouseup 1";
//jQuery('#display_tip').css('color', '#FF0F0F');
//jQuery("#display_tip").html(string_X);



//console.log("mouse up");
				vqRoomMouseSelect = false;



//string_X = "bPan="+bPan;
//jQuery('#temperature').css('color', '#FF0F0F');
//jQuery("#temperature").html(string_X);


//console.log("XXXmouse up bPan="+bPan)

				if (bPan){

					DoMouseUp(e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");

					//tipText = this.data("name");
					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;
//console.log("m1")
					cvjs_clearDrawingHyperlinks();
//console.log("m2")
					//CheckRoomOnScreen(this);
					rid = this.data("id");
//console.log("m3")
//					change_space_fixed_locationHyperlink(rid);
				}
				else{
//console.log("XXX")
					try{

						layer_hyperlinks.attr(show);

						if (panWithThumb){
							layers_all.attr(show);
							layer_thumb.attr(hide);
						}


						//layers_all.show();
						//layer_vqrooms[cvjs_active_floorplan_div_nr].show();
						//layer_thumb.hide();

					}
					catch(err){
						//  allow the code to work with both version 1.1 and 1.2
						console.log("t6 "+err);
					}

//					tipText = this.data("name");

					if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
						tipText = this.data("name");
					else
						tipText = this.data("id");


					tip[cvjs_active_floorplan_div_nr].html(tipText);
					bMouseDown = false;


					cvjs_clearDrawingHyperlinks();
					//CheckRoomOnScreen(this);
					rid = this.data("id");
					//change_space(rid);
//console.log("m4");
//					change_space_fixed_locationHyperlink(rid);

				}
				bPan = false;

			}).touchstart(function(e) {

//console.log("in touchstart");

//string_X = "touchstart 1";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);


				DoTouchStart(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).touchend(function(e) {


//console.log("in touchend");

//string_X = "touchend 2";
//jQuery('#location').css('color', '#FFFF0F');
//jQuery("#location").html(string_X);
//try{
//console.log("1 here.........."+bPan+"  "+locked);
//}catch(err){console.log(err);}
				if ((!bPan) && (!locked))
					{
					rid = this.data("id");
					try{
						cvjs_change_space(rid);
					}catch(err){var i=0;}

					if (!cvjs_supressHyperlinkColors)
						tipText = this.data("name");
					else
						tipText = this.data("name");    // we only let the "name" appear

					//tipText = this.data("name");

					tip[cvjs_active_floorplan_div_nr].html(tipText);
					}

				DoTouchEnd(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);

				if (!cvjs_supressPopUpModal || cvjs_standardHighLightColors)
					tipText = this.data("name");
				else
					tipText = this.data("id");

//				tipText = this.data("name");
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				bMouseDown = false;


// need to work through a general case to detect a threshold for move
/// ENCAPSULATED URLs


//console.log("3Q");


//console.log("1");

				// for touch devices where there is no move...

//console.log("1");

				rid = this.data("id");

				var rm = findUrl(rid);


//console.log(rm);


//console.log(totalDragStart);

				if (totalDragStart == 1){

					if (rm.indexOf("http://")==-1){

						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

							change_space_fixed_locationHyperlink(rid);
						}
						else{


							change_space_fixed_locationHyperlink(rid);

	//						if (openHyperlinkInNewWindow)
	//							window.open( current_FileNamePath + vqURLs[rm].data("url"), "CADViewerJS", "width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
	//						else
	//							document.location.href = current_FileNamePath + vqURLs[rm].data("url");
						}
					}
					else{
						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

							change_space_fixed_locationHyperlink(rid);

						}
						else{

							change_space_fixed_locationHyperlink(rid);

	//						if (openHyperlinkInNewWindow)
	//							window.open( vqURLs[rm].data("url"), "CADViewerJS","width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
	//						else
	//							document.location.href = vqURLs[rm].data("url");
						}

					}

			 	}

			//console.log("m1")
//						cvjs_clearDrawingHyperlinks();
		//console.log("m2")
						//CheckRoomOnScreen(this);
//						rid = this.data("id");
		//console.log("touch m3")
		//console.log("m6");
//						change_space_fixed_locationHyperlink(rid);





			}).touchmove(function(e) {

//console.log("in touchmove");

//string_X = "touchmove 1";
//jQuery('#location').css('color', '#FF0F0F');
//jQuery("#location").html(string_X);

//console.log("touch move");
				if (!bPan)
				{
	

					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});

	
				var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
				var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
				if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
				//console.log("absolute");
				   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
				}
				else{  // we have placed CV-JS inside a div and we have to make a relative position
					//console.log("inside");
					tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
				}
						
					
					
//				tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.body.scrollLeft+20).css("top", e.clientY+document.body.scrollTop-20);
//				tip[cvjs_active_floorplan_div_nr].css("left", e.screenX+20).css("top", e.screenY-20);
				tip[cvjs_active_floorplan_div_nr].html(tipText);
				}
				DoTouchMove(e, e.clientX+document.body.scrollLeft, e.clientY+document.body.scrollTop);
			}).dblclick(function(e) {


// parse depending om method call or external URL

				if (cvjs_Url_click_control==2){
					// for touch devices where there is no move...
					currentUrlId = this.data("id");
					currentUrlName = this.data("name");

					var rm = findUrl(currentUrlId);

					if (rm.indexOf("http://")==-1){

						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( current_FileNamePath + vqURLs[rm].data("url"), "CADViewerJS", "width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = current_FileNamePath + vqURLs[rm].data("url");
						}
					}
					else{
						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( vqURLs[rm].data("url"), "CADViewerJS","width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = vqURLs[rm].data("url");
						}

					}



		//console.log("m1")
						cvjs_clearDrawingHyperlinks();
		//console.log("m2")
						//CheckRoomOnScreen(this);
						rid = this.data("id");
		//console.log("touch m3")
		//console.log("m6");
						change_space_fixed_locationHyperlink(rid);

					//console.log("here we follow the hyperlink!");
				}
				vqRoomMouseSelect = false;

//				event.preventDefault();
//				event.stopPropagation();
			}).click(function(e) {

				if (cvjs_Url_click_control==1){

					// for touch devices where there is no move...
					currentUrlId = this.data("id");
					currentUrlName = this.data("name");

					var rm = findUrl(currentUrlId);

					if (rm.indexOf("http://")==-1){

						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( current_FileNamePath + vqURLs[rm].data("url"), "CADViewerJS", "width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = current_FileNamePath + vqURLs[rm].data("url");
						}
					}
					else{
						if (cvjs_Url_encapsulate_callback){

							cvjs_Url_callback(vqURLs[rm].data("url"));

						}
						else{

							if (openHyperlinkInNewWindow)
								window.open( vqURLs[rm].data("url"), "CADViewerJS","width="+hyperlinkNewWindowWidth+", height="+hyperlinkNewWindowHeight);
							else
								document.location.href = vqURLs[rm].data("url");
						}

					}


		//console.log("m1")
						cvjs_clearDrawingHyperlinks();
		//console.log("m2")
						//CheckRoomOnScreen(this);
						rid = this.data("id");
		//console.log("touch m3")
		//console.log("m6");
						change_space_fixed_locationHyperlink(rid);




					//console.log("here we follow the hyperlink!");

				}
				vqRoomMouseSelect = false;


				//console.log("URL click");

//				event.preventDefault();
//				event.stopPropagation();
			});
		}
	}

//console.log("before bFound== 0 bFound="+bFound);
	if (bFound == 0){
		var node_vq = vqURLs[jsurl].data("node");
if (cvjs_debug)	console.log("room not found "+node_vq);
		vqURLs[jsurl].data("name", "undefined");
		vqURLs[jsurl].data("id", node_vq);
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("layer", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("group", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("url", "undefined");
		vqRooms[cvjs_active_floorplan_div_nr][jsurl].data("linked", false);
		vqRooms[active_floorplan_div_nr][room].data("handle", "");  // 3.2.02e
		}

   	layer_hyperlinks.add(vqURLs[jsurl]);
	}

}



///BEGIN METHOD TO DRAW CALIBRATION LINE

var calibrate_first_point = true;
var calibrate_first_point_x = 1;
var calibrate_first_point_y = 1;



var calibrate_Triangle;
var calibrate_Triangle2;
var calibrate_color = "#ED1E05";
var calibrate_lineWidth_base = 1;
var calibrate_lineWidth = 1;


function cvjs_calibrateMeasurement_RedlinePolyline(){

	calibrate_lineWidth = cvjs_redlineThickness_scaleFactor*calibrate_lineWidth_base;

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	calibrate_first_point = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: calibrate_color, "stroke-width": calibrate_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: calibrate_color, "stroke-width": calibrate_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;




//  	var triangle_design= -10+","+10.0+" "+0+","+-10.0+" "+10+","+10.0;
  	var triangle_design= (-10*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+0+","+(-10.0*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+(10*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*calibrate_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor);




  	calibrate_Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	calibrate_Triangle2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_polygon_calibrate);
	handleGroup.mousemove(mousemove_polygon_calibrate);
}


function cvjs_removeHandleFunc_CalibrateMeasurementPolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");
}


function finish_calibrate() {

// console.log(tRubberBand_poly_redline1);
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
//	tPolygon_redline1.attr({'path': polyPath_redline1});

	calibrate_x2 = (lastX_poly_redline1-delta_x)/global_scale;
	calibrate_y2 = (lastY_poly_redline1-delta_y)/global_scale;

	cvjs_removeHandleFunc_CalibrateMeasurementPolyline();

	//console.log("update database!! "+tPolygon);
//	tRubberBand_poly_redline1.attr({'path': "M0,0"});


// not now!
//	tPolygon_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	cvjs_calibrate_end = true;

	//console.log(tPolygon_redline1);

	//cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	//cvjs_graphicalObjectCreated('RedlinePolyline');
}



var mousedown_polygon_calibrate = function() {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
			 finish_calibrate();

		 	//polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			//tPolygon_redline1.attr({'path': polyPath_redline1});
			//firstX_poly_redline1 = lastX_poly_redline1;
			//firstY_poly_redline1 = lastY_poly_redline1;




			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: calibrate_color, "stroke-width": calibrate_lineWidth, fill: "#FFF", "fill-opacity" : "0.01"});

			calibrate_x1 = (firstX_poly_redline1-delta_x)/global_scale;
			calibrate_y1 = (firstY_poly_redline1-delta_y)/global_scale;

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;

			 cvjs_calibrate_end = false;
		 }

}

var mousemove_polygon_calibrate = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



	if (draw_poly_redline1){

		//console.log("mousemove");

		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}

			if (calibrate_first_point){
				calibrate_first_point = false;

				tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});

				calibrate_x1 = (firstX_poly_redline1-delta_x)/global_scale;
				calibrate_y1 = (firstY_poly_redline1-delta_y)/global_scale;

				calibrate_first_point_x = calibrate_x1;
				calibrate_first_point_y = calibrate_y1;
			}
			else{

				calibrate_x1 = calibrate_first_point_x;
				calibrate_y1 = calibrate_first_point_y;

				var dX = (lastX_poly_redline1-delta_x)/global_scale - calibrate_x1;
				var dY = (lastY_poly_redline1-delta_y)/global_scale - calibrate_y1;

				//console.log(dX+" "+dY);
				var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
				var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);


				var angle = Math.atan2(dY,dX);
				var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*calibrate_lineWidth_base*0.333;
				var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*calibrate_lineWidth_base*0.333;

				var Ttrans = 'r' + (angleInDegrees-270)+ 'T' + ((lastX_poly_redline1-delta_x)/global_scale-deltax)+ "," + ((lastY_poly_redline1-delta_y)/global_scale-deltay);
				var Ttrans2 = 'r' + (angleInDegrees-90) +""+ 'T' + (calibrate_x1+deltax) + "," + (calibrate_y1+deltay) ;

				calibrate_Triangle.attr({
					fill: measurement_color,
					transform: Ttrans
				});

				calibrate_Triangle2.attr({
					fill: measurement_color,
					transform: Ttrans2
				});


				tPath_poly_redline1 = "M" + (calibrate_first_point_x+deltax) + "," + (calibrate_first_point_y+deltay);
				tPath_poly_redline1 += "L" + ((lastX_poly_redline1-delta_x)/global_scale-deltax) + "," + ((lastY_poly_redline1-delta_y)/global_scale-deltay);
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});
			}

	}
}

///END METHOD TO DRAW CALIBRATION LINE



/**
 * Sets measurements to be echoed through method cvjs_measurementCallback(cvjs_currentMeasurementLength, cvjs_units[cvjs_active_floorplan_div_nr]);
 * @param {boolean} callbackMode - false is default, true if measurement shall be echoed through method
 */

function cvjs_setCallbackMeasurement(callbackMode){

	cvjs_callbackMeasurement = callbackMode;
	
}

///BEGIN METHOD TO DRAW MEASUREMENT LINE


var measurement_first_point = true;
var measurement_first_point_x = 1;
var measurement_first_point_y = 1;

var measurement_Triangle;
var measurement_Triangle2;
var measurement_color = "#ED1E05";
var measurement_lineWidth = 1;
var measurement_lineWidth_base = 1;


function cvjs_Measurement_RedlinePolyline(){

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');

	measurement_lineWidth = cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base;
	measurement_first_point = true;

	tPath_poly_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tRubberBand_poly_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_poly_redline1).attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});
	polyPath_redline1 = "M" + firstX_poly_redline1 + "," + firstY_poly_redline1;
	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity": "0.01"});

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	var scaleTriangle = 3 ;

//  	var triangle_design= -15+","+15.0+" "+0+","+-15.0+" "+15+","+15.0;
//  	var triangle_design= -10+","+10.0+" "+0+","+-10.0+" "+10+","+10.0;
  	var triangle_design= (-10*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+0+","+(-10.0*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+" "+(10*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor)+","+(10.0*measurement_lineWidth_base*0.333*cvjs_redlineThickness_scaleFactor);


    measurement_Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	measurement_Triangle2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);
	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	
	handleGroup.mousedown(mousedown_polygon_measurement);
	handleGroup.mousemove(mousemove_polygon_measurement);
	//handleGroup.dblclick( polygon_finish_redline1_calibrate);
}


function cvjs_removeHandleFunc_MeasurementPolyline(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

}


function finish_measurement() {


	// 3.1.20i
	if (cvjs_callbackMeasurement) cvjs_measurementCallback(cvjs_currentMeasurementLength, 0, cvjs_units[cvjs_active_floorplan_div_nr]);


//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale;
//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
//	tPolygon_redline1.attr({'path': polyPath_redline1});


//window.alert(" cvjs_measureArea"+cvjs_measureArea);

	// 3.2.01f
	if (cvjs_measureArea){		
		tRubberBand_poly_redline1.attr({'path': "M0,0"});
		cvjs_removeHandleFunc_MeasurementFilledPolygon()			
	}
	else 
		cvjs_removeHandleFunc_MeasurementPolyline();

//	tRubberBand_poly_redline1.attr({'path': "M0,0"});


// not now!
//	tPolygon_redline1.attr({'path': "M0,0"});

	draw_poly_redline1 = false;
	first_point_poly_redline1 = true;

	cvjs_measurement_end = true;



	//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(measurement_x2,measurement_y2, " Hello");
	//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(measurement_x2,measurement_y2,["Hel", "l","oooo"]);
	//var text = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(measurement_x2,measurement_y2,["Hel", "l","oooo"]);
	//console.log(text);


	//console.log(tPolygon_redline1);

	//cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	//cvjs_graphicalObjectCreated('RedlinePolyline');
}



var mousedown_polygon_measurement = function() {

	//console.log("mousedown draw_poly="+draw_poly);
		 if (draw_poly_redline1){
			 finish_measurement();

		 	//polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
			//tPolygon_redline1.attr({'path': polyPath_redline1});
			//firstX_poly_redline1 = lastX_poly_redline1;
			//firstY_poly_redline1 = lastY_poly_redline1;


			//console.log("firstX_poly="+firstX_poly);
		 }
		 else{

			polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," +(firstY_poly_redline1-delta_y)/global_scale;
		 	tPolygon_redline1.attr({'path': polyPath_redline1});
		 	tPolygon_redline1.attr({stroke: measurement_color, "stroke-width": measurement_lineWidth, fill: "#FFF", "fill-opacity" : "0.01"});

			//tPolygon.attr({fill: "none", "fill-opacity": "0.01", stroke: '#0b0000', 'stroke-opacity': "1"});
			 draw_poly_redline1 = true;
			 //cvjs_measurement_end = true;

			 cvjs_measurement_end = false;


		 }

}

var mousemove_polygon_measurement = function(e,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];
	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



	if (draw_poly_redline1){

		//console.log("mousemove");
		//var text = x+" "+y+" dx="+dx+" dy="+dy;
//		var text = e+" "+x+" "+y;
//		myText.attr({'text': text});

				if (first_point_poly_redline1){
					first_point_poly_redline1 = false;
					firstX_poly_redline1 = x;
					firstY_poly_redline1 = y;
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
					originX_poly_redline1 = x;
					originY_poly_redline1 = y;

					polyPath_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
				}
				else{
					lastX_poly_redline1 = x;
					lastY_poly_redline1 = y;
				}



			if (measurement_first_point){

				measurement_first_point = false;

				measurement_x1 = (firstX_poly_redline1-delta_x)/global_scale;
				measurement_y1 = (firstY_poly_redline1-delta_y)/global_scale;

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;

				var dX = measurement_x2 -measurement_x1;
				var dY = measurement_y2 - measurement_y1;

				//console.log(dX+" "+dY);
				var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
				var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);

				var angle = Math.atan2(dY,dX);
				var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;
				var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;

				tPath_poly_redline1 = "M" + (measurement_x1+deltax) + "," + (measurement_y1+deltay);
				tPath_poly_redline1 += "L" + (measurement_x2-deltax)  + "," + (measurement_y2-deltay);


//				tPath_poly_redline1 = "M" + (firstX_poly_redline1-delta_x)/global_scale + "," + (firstY_poly_redline1-delta_y)/global_scale;
//				tPath_poly_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});


			}else{

				measurement_x2 = (lastX_poly_redline1-delta_x)/global_scale;
				measurement_y2 = (lastY_poly_redline1-delta_y)/global_scale;


				var dX = measurement_x2 -measurement_x1;
				var dY = measurement_y2 - measurement_y1;

				//console.log(dX+" "+dY);
				var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
				var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);


				var angle = Math.atan2(dY,dX);
				var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;
				var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;


				tPath_poly_redline1 = "M" + (measurement_x1+deltax) + "," + (measurement_y1+deltay);
				tPath_poly_redline1 += "L" + (measurement_x2-deltax)  + "," + (measurement_y2-deltay);
				tRubberBand_poly_redline1.attr({'path': tPath_poly_redline1});

			}

    var dX = measurement_x2 -measurement_x1;
	var dY = measurement_y2 - measurement_y1;

    //console.log(dX+" "+dY);
    var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);
    var angleInDegrees2 = ( Math.atan2(dY,dX) / Math.PI * 180.0);


    var angle = Math.atan2(dY,dX);
    var deltax = Math.cos(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;
    var deltay = Math.sin(angle)*10.0*cvjs_redlineThickness_scaleFactor*measurement_lineWidth_base*0.333;

	var Ttrans = 'r' + (angleInDegrees-270)+ 'T' + (measurement_x2-deltax)+ "," + (measurement_y2-deltay);
	var Ttrans2 = 'r' + (angleInDegrees-90) +""+ 'T' + (measurement_x1+deltax) + "," + (measurement_y1+deltay) ;

	measurement_Triangle.attr({
		fill: measurement_color,
		transform: Ttrans
	});

	measurement_Triangle2.attr({
		fill: measurement_color,
		transform: Ttrans2
	});

	var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))

	var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);

	// 3.1.20i
	cvjs_currentMeasurementLength = mLength;
	

	if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

		var lint = Math.floor(mLength);
		var fraction = mLength - Math.floor(mLength);
		fraction = Math.round(fraction*16);
		if (fraction == 16){
			lint+=1;
			fraction = 0;
		}
		jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+lint+"\'"+" "+fraction+"/16\"");
	}
	else
		jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+mLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]);








//console.log(mLength);

	}
}

///END METHOD TO DRAW MEASUREMENT LINE










///BEGIN METHOD TO DRAW REDLINE TEXT

var tRubberBand_text1;
var text_move1;
var text_move1_noscale;
var tText_redline1;
var cvjs_text_redline;
var cvjs_text_redline_size;

var cvjs_text_insert_x1;
var cvjs_text_insert_y1;

var tArr;
var cvjs_redline_boundingBoxElement;
var cvjs_redline_Boxwidth;
var cvjs_redline_Boxheight;

var cvjs_reference_font_size = 40;
var global_textString


var cvjs_current_font_size = 40;


function cvjs_insertRedlineText(textString, fontSize){
		
	cvjs_current_font_size = cvjs_reference_font_size*fontSize/11.0;

//window.alert(fontSize+"   "+cvjs_current_font_size);	
	
	//textString = textString.replace(/(\n)/gm, '<br>');
	global_textString = textString;

	tArr = textString.split('\n');
	//console.log(tArr[0]+"  "+tArr[1]);
	//tArr = new Array()
	//tArr[0] = textString;

	// console.log(textString);

	cvjs_text_redline = textString;

	//cvjs_redlineThickness_scaleFactor = 0.25;

//	tArr[0]="<tspan>tspan line 1</tspan><tspan dy=\"10\">tspan line 2</tspan>";


	try{

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,120, '');


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	tRubberBand_text1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

	for (var i=1; i<tArr.length; i++){
		var eml = i+"em";
		tRubberBand_text1.selectAll("tspan")[i].attr({ x:0 , dy: '1em' });
	}


	cvjs_redline_boundingBoxElement = tRubberBand_text1.getBBox();

	var x = cvjs_redline_boundingBoxElement.x;
	var y = cvjs_redline_boundingBoxElement.y;
	cvjs_redline_Boxwidth = cvjs_redline_boundingBoxElement.width;
	cvjs_redline_Boxheight = cvjs_redline_boundingBoxElement.height;

//	console.log(cvjs_redline_Boxwidth +"  "+cvjs_redline_Boxheight);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_redline_text);
	handleGroup.mousemove(mousemove_redline_text);

	}
	catch(err){ console.log(err);}
}


function cvjs_removeHandleFunc_RedlineText(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}
}




var mousedown_redline_text = function() {

	console.log("tRubberBand_text1 "+tRubberBand_text1+" text_move1  "+text_move1+"  ");

	var minimize_rubberband = "M0,0S0";
	
//	console.log("remove rubberband!");
	
//	tRubberBand_text1.attr({'transform': minimize_rubberband});
	// 3.0.13f 	
	tRubberBand_text1.remove();

	
	trans = text_move1;
	// we split Text Move next
	
	

//	tText_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': reference_font_size, 'aligment-baseline' : 'text-before-edge'});

	tText_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(0,0, tArr).attr({stroke: cvjs_currentRedline_color, fill: cvjs_currentRedline_color, 'font-size': cvjs_current_font_size });

	for (var i=1; i<tArr.length; i++){
		var eml = i+"em";
		tText_redline1.selectAll("tspan")[i].attr({ x:0 , dy: '1em' });
	}

	tText_redline1.attr({'transform': text_move1});
	cvjs_removeHandleFunc_RedlineText();

	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);

//	console.log("tText_redline1 "+tText_redline1);

	var textString = global_textString.replace(/(\n)/gm, '<br>');

	//console.log("textString: " +textString);

	cvjs_addVqRedlinesGraphics_newNodeText(cvjs_currentRedline_underbar, tText_redline1, text_move1, textString );
	cvjs_graphicalObjectCreated('RedlineText');

}

var mousemove_redline_text = function(e,x,y) {

try{

	//cvjs_redlineThickness_scaleFactor=1;

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];
	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;
	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;



//	var factor =  1.0/tArr.length;
	var tx;
	var ty;

	tx = - cvjs_redline_Boxwidth/2*(1-cvjs_redlineThickness_scaleFactor);
	ty = + cvjs_redline_Boxheight/2*(1-cvjs_redlineThickness_scaleFactor)

	tx=0;
	ty=0;

	var transx,transy;
	transx = ((x-delta_x)/global_scale )+tx;
	transy = ((y-delta_y)/global_scale )+ty;

	//text_move1 = "T" + transx + "," + transy +"S"+cvjs_redlineThickness_scaleFactor+","+transx+","+transy;
	// 3.0.1f
	text_move1 = "T" + transx + "," + transy +"S"+cvjs_redlineThickness_scaleFactor;

	//console.log("m "+text_move1);
	
	

	text_move1_noscale = "T" + (((x-delta_x)/global_scale )+tx) + "," + (((y-delta_y)/global_scale)+ty);


//jQuery("#mark1").html(factor);	//console.log(text_move1);
//jQuery("#mark2").html(cvjs_redline_Boxwidth);	//console.log(text_move1);
//jQuery("#mark3").html(cvjs_redline_Boxheight);	//console.log(text_move1);
//jQuery("#mark4").html(tArr.length );	//console.log(text_move1);
//jQuery("#mark5").html(tx);	//console.log(text_move1);
//jQuery("#mark6").html(ty);	//console.log(text_move1);

	cvjs_text_insert_x1 = (x-delta_x)/global_scale;
	cvjs_text_insert_y1 = (y-delta_y)/global_scale;

	tRubberBand_text1.attr({'transform': text_move1});

}
catch(err){ console.log(err);}


}

///END METHOD TO DRAW REDLINE TEXT



var cvjs_currentIconPage = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
var cvjs_MaxIconPages = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2];
var cvjs_userControlled_MaxIconPages = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3];


function cvjs_changeNextIconPage(floorplan_div){


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_currentIconPage[cvjs_active_floorplan_div_nr]++;

//	console.log("change page "+floorplan_div);
	
	
	if (cvjs_currentIconPage[cvjs_active_floorplan_div_nr]>cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr])
		cvjs_currentIconPage[cvjs_active_floorplan_div_nr] = 1;

	var iconmap;
	var imagemap;

	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
		}
		jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_"+floorplan_div;
			jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu

				if (cvjs_version_3_2_modal){  // modal with line thickness
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
				}
				else{
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
				}
				jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}

	}

	
	console.log('#gMenu_'+floorplan_div+"  "+jQuery('#gMenu_'+floorplan_div).html());
	
}


function cvjs_changePreviousIconPage(floorplan_div){


	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	cvjs_currentIconPage[cvjs_active_floorplan_div_nr]--;

	if (cvjs_currentIconPage[cvjs_active_floorplan_div_nr]<1)
		cvjs_currentIconPage[cvjs_active_floorplan_div_nr] = cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr];

	
	console.log("change page "+floorplan_div);
	
	
	var iconmap;
	var imagemap;

	
	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
		}
		jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_"+floorplan_div;
			jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu

				if (cvjs_version_3_2_modal){  // modal with line thickness
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
				}
				else{
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
				}
				jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}

	}

	
	console.log('#gMenu_'+floorplan_div+"  "+jQuery('#gMenu_'+floorplan_div).html());

	
	
	/*
	
	
	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8";
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3";
		}
		jQuery('#gMenu').html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr];
			jQuery('#gMenu').html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu
			if (cvjs_version_3_2_modal){  // modal with line thickness
				iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
				imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8";
			}
			else{
				iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
				imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3";
			}
			jQuery('#gMenu').html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
	}
*/

}


function cvjs_changeToIconPage(pageNr, floorplan_div){


	if (floorplan_div == undefined){
		
		cvjs_active_floorplan_div_nr = 0;
	}
	else{
		if (!floorplan_div.endsWith("_svg")) floorplan_div = floorplan_div +"_svg";
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	}

	cvjs_currentIconPage[cvjs_active_floorplan_div_nr] = pageNr;


	
	var iconmap;
	var imagemap;

	
	if (pageChangeInterface){
		if (cvjs_version_3_2_modal){  // modal with line thickness
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
		}
		else{
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
		}
		jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
	}
	else{
		if (!pageChangeInterfaceFalse_noIconNavigation){ // we want to use the icon menu with navigation buttons now pageChange is disables
			iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_2.png";
			imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_"+floorplan_div;
			jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"303\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}
		else{  // we have single page drawings, so we wont need the navigation buttons in the icon menu

				if (cvjs_version_3_2_modal){  // modal with line thickness
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_8"+"_"+floorplan_div;
				}
				else{
					iconmap = cvjs_imagesLocation+"cvjsToolbar_dra_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3.png";
					imagemap = "#cvjsToolbarMap_p"+cvjs_currentIconPage[cvjs_active_floorplan_div_nr]+"_3"+"_"+floorplan_div;
				}
				jQuery('#gMenu_'+floorplan_div).html("<img src=\""+iconmap+"\" style=\"margin-left: 10px; margin-top: 10px;\" usemap=\""+imagemap+"\" border=\"0\" height=\"276\" width=\"62\" class=\"map\" hidefocus=\"true\">");
		}

	}

	console.log('page change  #gMenu_'+floorplan_div+"  "+jQuery('#gMenu_'+floorplan_div).html());

}






/**
 * Sets the icon interface for viewing, layerhanding, measurement, etc. only
  * @param {string} floorplan_div - name of div containing CADViewer JS canvas
*/
function cvjs_setIconInterfaceControls_ViewingOnly(floorplan_div){


	if (floorplan_div == undefined){
		
		cvjs_active_floorplan_div_nr = 0;
	}
	else {
		floorplan_div = floorplan_div +"_svg";
		
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
	}

	cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr] = 1;

}


/**
 * Sets the icon interface for enabling space management
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
function cvjs_setIconInterfaceControls_SpaceManagement(floorplan_div){

	if (floorplan_div == undefined){
		
		cvjs_active_floorplan_div_nr = 0;
	}
	else {
		floorplan_div = floorplan_div +"_svg";
		
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
		
	}

	cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr] = 5;

	// HERE WE ALSO MAKE SURE THAT WE HAVE THE DRAWING JS AS A STRING DOCUMENT FOR PUBLISHING

	cvjs_loadCurrentLoadedDrawingAsString = true;

//	window.alert("max pages "+cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr]);
	
}


/**
 * Sets the icon interface for enabling image insert
 */
function cvjs_setIconInterfaceControls_ImageInsert(){

	cvjs_userControlled_MaxIconPages[cvjs_active_floorplan_div_nr] = 4;

}







function cvjs_initiateInsertRedlineText(floorplan_div){

	var text = jQuery('#redline_text').val();
	var fontSize = jQuery('#cvjs_redlineFontSizeInput_'+floorplan_div).val();

//	window.alert(text+"   and fontSize      "+fontSize+"XXX");
	
	//console.log(text);
	jQuery("#redlinetextModal_"+floorplan_div).hide();
	cvjs_insertRedlineText(text, fontSize);

}

var interactive_text_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];

var image_encapsulate_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



function cvjs_interactiveSearchText(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	

	if (interactive_text_offset_flag[cvjs_active_floorplan_div_nr]){
		interactive_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#textsearchModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#textsearchModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	textSearchPre = "";
	jQuery( "#textsearchModal_"+floorplan_div ).show();
}


function cvjs_interactiveSearchText_zoomLevel(zoomlevel){

	if (interactive_text_offset_flag[cvjs_active_floorplan_div_nr]){
		interactive_text_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#textsearchModal").css({position: "fixed"});
		jQuery("#textsearchModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});  //.offset({left:150, top: 50});
	}
	textSearchPre = "";

	jQuery('#cvjs_percentageLevelFromModal').val(zoomlevel);
	jQuery("#textsearchModal").show();

}




function cvjs_exitSearchTextModal(){

	jQuery( cvjs_textSearchPreElement ).css("fill" , cvjs_textSearchPreFill);
	cvjs_textSearchPreElement = "";
	cvjs_textSearchPreFill = "";

//	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery( "#textsearchModal" ).hide();
}




var cvjs_currentImageLink_id = 0;
var cvjs_currentImageLink_underbar = 0;
var currentImageNoteId;


var defaultColor_ImageNotes = {
            fill: '#DCCCFF' //,
        }

var highlightColor_ImageNotes = {
            fill: '#DC05FF' //,
        }


/**
 * Insert image link
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_insertImageLink(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



//	cvjs_currentStickyNote_name = "Bob Hope";
//	cvjs_currentStickyNote_id = "N1";

	cvjs_currentImageLink_id = vqImageNotes.length-1;

	if (isNaN(cvjs_currentImageLink_id) || cvjs_currentImageLink_id<0 ) cvjs_currentImageLink_id = 0;

	//console.log(cvjs_currentImageLink_id)

	cvjs_currentImageLink_id = cvjs_currentImageLink_underbar +1;

	//console.log(" before _ImageLink "+cvjs_currentImageLink_id+"  "+cvjs_currentImageLink_underbar);

	cvjs_addHandleFunc_ImageLink();
}


function cvjs_addHandleFunc_ImageLink(){

//console.log("1 ");

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});



	handleGroup.mousedown(mousedown_imagelink);
	mouseMoveStickyNote = false;
	handleGroup.mousemove(mousemove_imagelink);

}

function cvjs_removeHandleFunc_ImageLink(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	
	
	//ÅÖÄ   2018-05-09  we save the screen as a pdf  - this has problems if the user decide not to save redlines, part implementation, 
	try { // 3.1.21j
		if (FileName.indexOf(".pdf")>-1 && cvjs_customPdfFolderFlag ) savepageaspdf(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	}
	catch(err){ console.log("pdf 12: "+err);}

}


var mousemove_imagelink = function(e,x,y) {

	if (mouseMoveStickyNote == false){

		var rightadjustment = 0;
		if (cvjs_currentImageLink_id<10) rightadjustment = 3;

		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2 M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentImageLink_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000"}))   ;

								  
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M-24,-24h24v24h-24v-24Z").attr({stroke: "#FFF", "stroke-width" : "0.01","fill" : "none", 'stroke-opacity': "0.01" }), cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2 M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill" : "none"}),
//								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentImageLink_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000"}))   ;

								  
								  
		mouseMoveStickyNote = true;
	}

//console.log("check");

	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	// 3.1.21k
	var scaleNote = 1;
	var scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y-delta_y)/global_scale + (scaleNote*10.0));
			
	tTransform_c += "S"+(scaleNote);
	tRubberBand_sn.attr({'transform': tTransform_c});
//	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.5"});
}


var mousedown_imagelink = function(e,x,y) {

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	tRubberBand_sn.remove();  // 3.1.21j
	
	
	var rightadjustment = 0;
	if (cvjs_currentImageLink_id<10) rightadjustment = 3;

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+cvjs_currentImageLink_id).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill": "#000000"}))   ;

	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;


	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y-delta_y)/global_scale + (scaleNote*10.0));
		
	
	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

//console.log("tTransform_c"+tTransform_c);

	tRubberBand_c.attr({	fill: '#DCCCFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	cvjs_currentStickyNote_transform = tTransform_c;
	cvjs_removeHandleFunc_ImageLink();

	var cImageNoteItemX = tRubberBand_c.data("node", cvjs_currentImageLink_underbar);
	vqImageNotes.push(cImageNoteItemX);


	currentImageNoteId = vqImageNotes.length-1;

	//console.log("after push"+currentImageNoteId);

	vqImageNotes[currentImageNoteId].data("id", currentImageNoteId+1);
	vqImageNotes[currentImageNoteId].data("name", "object"+(currentImageNoteId+1));
	vqImageNotes[currentImageNoteId].data("layer", "objectLayer");
	vqImageNotes[currentImageNoteId].data("group", "unassigned");
	vqImageNotes[currentImageNoteId].data("username", cvjs_currentRedline_username);
	vqImageNotes[currentImageNoteId].data("userid", cvjs_currentRedline_userid);
	vqImageNotes[currentImageNoteId].data("currentPage", multiPages[cvjs_active_floorplan_div_nr].currentPage);
	vqImageNotes[currentImageNoteId].data("imageObject", "");
	vqImageNotes[currentImageNoteId].data("imageHeight", 450);
	vqImageNotes[currentImageNoteId].data("imageWidth", 600);
	vqImageNotes[currentImageNoteId].data("transform", tTransform_c);


	jQuery('#cvjs_floorPlanInsertImage').html("");


/*
					OBJECT_1: {
						name: "object1",
						id: "1",
						layer: "ObjectLayer",
						group: "unassigned",
						username: "James Smith",
						userid: "user_01",
						currentPage: 1,
						insertX: 200,
						insertY: 300,
						imageObject: "",
						imageHeight: 450,
						imageWidth: 600
					}
*/



	vqImageNotes[cvjs_currentImageLink_underbar].mousedown(function(e){
		var currentImageNoteId = this.data("node");

		jQuery('#cvjs_imageObject').html("<b>"+lTable.languages[cvjs_currentLanguage].ImageObjectModal.Header+(currentImageNoteId+1)+"</b>");

		if (vqImageNotes[currentImageNoteId].data("imageObject")=="" ){
			jQuery('#cvjs_floorPlanInsertImage').html("");
		}else{			
			// 3.1.21l
			if (cvjs_buildFolderTree_crossDomain)
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");
			else
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");	
			//jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[imageNoteId].data("imageHeight")+"' />");		
//			jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");


			jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).css("width", vqImageNotes[currentImageNoteId].data("imageWidth")+8);
			jQuery('#cvjs_floorPlanInsertImage').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
			jQuery('#cvjs_floorPlanInsertImageTop').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
		}

		//console.log("mousedown "+currentImageNoteId );

/***  this is for generating the data arrays based on loaded data

		for (var imageObject in cvjs_insertImageObjects){
//			console.log(imageObject+"  "+ cvjs_insertImageObjects[imageObject].id+"  "+currentImageNoteId);
				if (cvjs_insertImageObjects[imageObject].id == (currentImageNoteId+1)){
					if (cvjs_insertImageObjects[imageObject].imageObject=="" ){
						jQuery('#cvjs_floorPlanInsertImage').html("");
					}else{
						jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+cvjs_insertImageObjects[imageObject].imageObject+"' height='"+cvjs_insertImageObjects[imageObject].imageHeight+"' />");
						jQuery('#cvjs_floorPlanInsertImageEncapsulate').css("width", cvjs_insertImageObjects[imageObject].imageWidth+8);
						jQuery('#cvjs_floorPlanInsertImage').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
						jQuery('#cvjs_floorPlanInsertImageTop').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
					}
				}
		}

*****/

		// 3.1.21k
		
		
		
		if (image_encapsulate_offset_flag[cvjs_active_floorplan_div_nr]){
			image_encapsulate_offset_flag[cvjs_active_floorplan_div_nr] = false;
			// 3.1.21j .appendTo('body');
			jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).css({position: "fixed"});
//			window.alert("here"+jQuery('#'+floorplan_div).position().left+"  "+jQuery('#'+floorplan_div).position().top);
			jQuery("#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});  //.offset({left:150, top: 50});
		}
		
		jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div ).show();
	
	}).mousemove(function(e){
		//console.log(cvjs_currentImageLink_underbar);
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(highlightColor_ImageNotes);
	}).mouseout(function(e){
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(defaultColor_ImageNotes);
	}).mouseup(function(e){


	}).touchstart(function(e){
	}).touchmove(function(e){
	}).touchend(function(e){
	}).dblclick(function(e){
	});

	cvjs_currentImageLink_underbar++;

//	cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentStickyNote_underbar, tRubberBand_c);
//	cvjs_setUpVqImageLink_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentStickyNote_underbar);
//	cvjs_graphicalObjectCreated('StickyNote');


}

// END - ImageLink


var cvjs_quickCountCounter = 0;
var vqQuickCount = new Array();

var cvjs_callbackQuickCount = false;


/**
 * Sets quickcounts to be echoed through method cvjs_QuickCountCallback(cvjs_quickCountCounter);
 * @param {boolean} callbackMode - false is default, true if Quick Counts shall be echoed through method
 */

function cvjs_setCallbackQuickCount(callbackMode){

	cvjs_callbackQuickCount = callbackMode;

}




/**
 * Show number of quick counts 
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 

function cvjs_showMeCounts(floorplan_div){


 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


//window.alert("show me counts "+floorplan_div);


	var status = "";
	
	if (cvjs_quickCountCounter == 0 || cvjs_quickCountCounter == 1)
		status =lTable.languages[cvjs_currentLanguage].InfoMessageModal.QuickCountSingle+cvjs_quickCountCounter;  //
	else
		status =lTable.languages[cvjs_currentLanguage].InfoMessageModal.QuickCountMultiple+cvjs_quickCountCounter;

	cvjs_displayInformationModal(floorplan_div, status);

	
/*		
window.alert(status);
	
	
	jQuery('#cvjs_informationModalText_2_'+floorplan_div).html(status);

window.alert("1");

	jQuery('#info_messageModal_2_'+floorplan_div).modal('show');

	
window.alert("2");
*/
	
}


/**
 * Clear the quick counts counter 
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 
function cvjs_clearQuickCounts(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	if (vqQuickCount.length>0){
		for (var i=0; i<vqQuickCount.length; i++){
					//console.log("delete "+i);
			vqQuickCount[i].data("deleted", true);
			var dTransform = "S0.001";
			vqQuickCount[i].attr({'transform': dTransform, "opacity" : "0.01"});
		}
		vqQuickCount.length = 0;
	}
	cvjs_quickCountCounter = 0;

}


/*
function cvjs_quickCount(){

	cvjs_quickCountCounter = 0;

	if (vqQuickCount.length>0){
		for (var i=0; i<vqQuickCount.length; i++){
					//console.log("delete "+i);
			vqQuickCount[i].data("deleted", true);
			var dTransform = "S0.001";
			vqQuickCount[i].attr({'transform': dTransform, "opacity" : "0.01"});
		}
		vqQuickCount.length = 0;
	}
	cvjs_quickCountCounter = 0;
	cvjs_addHandleFunc_QuickCount();
}
*/




/**
 * Activate quick count, 
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 
function cvjs_quickCount(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	cvjs_quickCountCounter = 0;

		if (vqQuickCount.length>0){
			for (var i=0; i<vqQuickCount.length; i++){
						//console.log("delete "+i);
				vqQuickCount[i].data("deleted", true);
				var dTransform = "S0.001";
				vqQuickCount[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqQuickCount.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;


	cvjs_quickCountCounter = 0;
	cvjs_addHandleFunc_QuickCount();
}

var oldKeyDown;
var cvjs_quickCount_started = false;

function cvjs_addHandleFunc_QuickCount(){

//console.log("1 ");

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	mouseMoveStickyNote = false;

	cvjs_quickCount_started = true;

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});




	handleGroup.dblclick(dblclick_quickcount);
	handleGroup.mousedown(mousedown_quickcount);
	handleGroup.mousemove(mousemove_quickcount);

	handleGroup.mouseup(mouseup_quickcount);
	
	
	
	oldKeyDown = jQuery(document).keydown().bind({});
	jQuery(document).keydown(function(e) {

		if (e.keyCode == 27) {

			if (cvjs_quickCount_started){
				var scaleNote = 1;
				tTransform_c = "t0,0S"+(scaleNote/100);
				tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
				tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
				cvjs_removeHandleFunc_QuickCount();
				
				//cvjs_quickCountCounter--;

				jQuery(document).keydown() == oldKeyDown;
			}
		}
		//console.log("X key pressed document");
	});

}

/**
 * Exit quick count, alternative method to double click or Esc 
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_exitQuickCount(floorplan_div){

	var scaleNote = 1;
	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	cvjs_removeHandleFunc_QuickCount();

}




function cvjs_removeHandleFunc_QuickCount(){
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	cvjs_quickCount_started = false;
	//console.log("removed handler");

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	try{
		if (cvjs_callbackQuickCount) 
			cvjs_QuickCountCallback(cvjs_quickCountCounter);
	
	}
	catch(err){
		console.log(err);
	}
	
	
	
}


var mousemove_quickcount = function(e,x,y) {

	x_quickcount_move = x;
	y_quickcount_move = y;

	if (mouseMoveStickyNote == false){
	
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-4 4,0 12,-8 11,-9 4,-2 1,-5 0,-4 4,0").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-24 4,-20 12,-28 11,-29 4,-22 1,-25 0,-24 4,-20").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
// 3.0.13g
// 3.0.13g
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-14 4,-10 12,-18 11,-19 4,-12 1,-15 0,-14 4,-10").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
//		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-9 4,-5 12,-13 11,-14 4,-7 1,-10 0,-9 4,-5").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
		mouseMoveStickyNote = true;
	}

//console.log("check");

	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	tTransform_c = "t" + (x-delta_x)/global_scale + "," + (y-delta_y)/global_scale;
	var scaleNote = 1;
	var scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	tTransform_c += "S"+(scaleNote);
	tRubberBand_sn.attr({'transform': tTransform_c});
//	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.5"});
}


var dblclick_quickcount = function(e,x,y) {

//console.log("doubleclick");

	var scaleNote = 1;
	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	cvjs_removeHandleFunc_QuickCount();
	
	//3.2.02f
	//cvjs_quickCountCounter--;

}

// 3.1.20i
var mousedown_quickcount = function(e,x,y) {

//	console.log("mousedown ");

}

var x_quickcount_last = 0; 
var y_quickcount_last = 0;


var mouseup_quickcount = function(e,x,y) {

//	console.log("mouseup ");

	// 3.1.20i
	if ((Math.abs(x-x_quickcount_last)<3) && (Math.abs(y-y_quickcount_last)<3)){	
		//console.log("on top of other note");
		return;
	}
	

	//console.log(e.which);

	if (e.which == 3){  // right click so we leave the method

		tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
		tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
		cvjs_removeHandleFunc_QuickCount();
		return;

	}

	//tTransform_c = "t0,0S"+(scaleNote/100);

	//tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	//tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });

//	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-24 4,-20 12,-28 11,-29 4,-22 1,-25 0,-24 4,-20").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;

	//tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-4 4,0 12,-8 11,-9 4,-2 1,-5 0,-4 4,0").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;

	
// 3.0.13g
		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-14 4,-10 12,-18 11,-19 4,-12 1,-15 0,-14 4,-10").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
//		tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,-9 4,-5 12,-13 11,-14 4,-7 1,-10 0,-9 4,-5").attr({stroke: "#FF7F27", "stroke-width" : "0.5", "fill" : "#FF7F27"}))   ;
	
	
	
	// 2016-04-11
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	// 2016-04-11 translating 6 "pixels" only
	tTransform_c = "t" + (x+global_scale-delta_x)/global_scale + "," + (y+global_scale-delta_y)/global_scale;    // 2*global_scale, adjusting for location change in mousemove


//console.log(tTransform_c);

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	tTransform_c += "S"+(scaleNote);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

	tRubberBand_c.attr({	fill: '#DCCCFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	cvjs_currentStickyNote_transform = tTransform_c;

	//cvjs_removeHandleFunc_ImageLink();

	var cImageNoteItemX = tRubberBand_c.data("node", cvjs_currentImageLink_underbar);
	vqQuickCount.push(cImageNoteItemX);
	cvjs_quickCountCounter++;

	
	x_quickcount_last = x; 
	y_quickcount_last = y;
	
	
	
//	console.log("cvjs_quickCountCounter"+cvjs_quickCountCounter);
	
}



/**
 * On the Room Layer designated by the Space Management list, it searches for the encapsulating polygon at the location of mouse-click. If polygon is found
 * a room object is created.
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 
function cvjs_setSpacePolygonOnLayer(floorPlan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_findSVGcoordinate_setPolygonOnLayer();
}


function cvjs_findSVGcoordinate_setPolygonOnLayer() {

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});


	handleGroup.mousedown(mousedown_cvjs_svgCoord_polygonfind);
}



// A C++ program to check if a given point lies inside a given polygon
// Refer http://www.geeksforgeeks.org/check-if-two-given-line-segments-intersect/
// for explanation of functions onSegment(), orientation() and doIntersect()
//struct Point
//{
//    int x;
//    int y;
//};

// Given three colinear points p, q, r, the function checks if
// point q lies on line segment 'pr'
function onSegment(p_x, p_y, q_x, q_y, r_x, r_y)
{
    if (q_x <= Math.max(p_x, r_x) && q_x >= Math.min(p_x, r_x) &&
            q_y <= Math.max(p_y, r_y) && q_y >= Math.min(p_y, r_y))
        return true;
    return false;
}

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
function orientation(p_x, p_y, q_x, q_y, r_x, r_y)
{
    var val = (q_y - p_y) * (r_x - q_x) -
              (q_x - p_x) * (r_y - q_y);

    if (val == 0) return 0;  // colinear
    return (val > 0)? 1: 2; // clock or counterclock wise
}

// The function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
function doIntersect(p1_x, p1_y, q1_x, q1_y, p2_x, p2_y, q2_x, q2_y)
{
    // Find the four orientations needed for general and
    // special cases
    var o1 = orientation(p1_x, p1_y, q1_x, q1_y, p2_x, p2_y);
    var o2 = orientation(p1_x, p1_y, q1_x, q1_y, q2_x, q2_y);
    var o3 = orientation(p2_x, p2_y, q2_x, q2_y, p1_x, p1_y);
    var o4 = orientation(p2_x, p2_y, q2_x, q2_y, q1_x, q1_y);

    // General case
    if (o1 != o2 && o3 != o4)
        return true;

    // Special Cases
    // p1, q1 and p2 are colinear and p2 lies on segment p1q1
    if (o1 == 0 && onSegment(p1_x, p1_y, p2_x, p2_y, q1_x, q1_y)) return true;

    // p1, q1 and p2 are colinear and q2 lies on segment p1q1
    if (o2 == 0 && onSegment(p1_x, p1_y, q2_x, q2_y, q1_x, q1_y)) return true;

    // p2, q2 and p1 are colinear and p1 lies on segment p2q2
    if (o3 == 0 && onSegment(p2_x, p2_y, p1_x, p1_y, q2_x, q2_y)) return true;

     // p2, q2 and q1 are colinear and q1 lies on segment p2q2
    if (o4 == 0 && onSegment(p2_x, p2_y, q1_x, q1_y, q2_x, q2_y)) return true;

    return false; // Doesn't fall in any of the above cases
}

// Returns true if the point p lies inside the polygon[] with n vertices
function isInside(X, Y, n, p_x, p_y)
{
    // There must be at least 3 vertices in polygon[]
    if (n < 3)  return false;

    // Create a point for line segment from p to infinite
    p_extreme_x = 100000;
    p_extreme_y = p_y;

    // Count intersections of the above line with sides of polygon
    var count = 0, i = 0;
    do
    {
        var next = (i+1)%n;

        // Check if the line segment from 'p' to 'extreme' intersects
        // with the line segment from 'polygon[i]' to 'polygon[next]'
        if (doIntersect(X[i], Y[i], X[next], Y[next], p_x, p_y, p_extreme_x, p_extreme_y))
        {
            // If the point 'p' is colinear with line segment 'i-next',
            // then check if it lies on segment. If it lies, return true,
            // otherwise false
            if (orientation(X[i], Y[i], p_x, p_y, X[next], Y[next]) == 0)
               return onSegment(X[i], Y[i], p_x, p_y, X[next], Y[next]);

            count++;
        }
        i = next;
    } while (i != 0);

    // Return true if count is odd, false otherwise
    return count&1;  // Same as (count%2 == 1)
}







var mousedown_cvjs_svgCoord_polygonfind = function(e,x,y) {

	var svg_x = (x - delta_x)/global_scale;
	var svg_y = (y - delta_y)/global_scale;

if (cvjs_debug)		console.log("SVG coordinates: " + svg_x+"  "+svg_y+" RoomLayer "+cvjs_convertRoomLayer);

	handleGroup.selectAll('handler').remove();
	handleGroup.remove();

	//window.alert("now we have to find the polygon");

	var pathString = "";

	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
		// console.log(i+"  "+layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName+"  "+cvjs_convertRoomLayer);

		if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertRoomLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertRoomLayer.length ){
			//window.alert("setting Pathstring "+layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName);
			pathString = layerTable[cvjs_active_floorplan_div_nr].layers[i].layer.toString();

			//console.log("in pathString loop XXXX"+pathString+"XXXX");
			// SVG file
			if (pathString.indexOf("layer_") == 0){
				// the actual layer is the layer name and not the layer content itself, therefore it is an SVG file
				pathString = jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[i].layer).html();
			}
			//checkFlag = true;
		}
		// no roomlayer selected message needs to be given
	}

	//console.log(cvjs_convertRoomLayer+" after loop "+pathString+" "+layerTable[cvjs_active_floorplan_div_nr].numberOfLayers);

	pathString = pathString.substring( pathString.indexOf("<path"));
	pathString = pathString.substring(0, pathString.indexOf(">"));
	//console.log("1 pathString "+ pathString);

	//pathString = pathString.substring(pathString.indexOf("d=")+3);
	pathString = pathString.substring(pathString.indexOf(" d=")+4);   // 2017-08-15, for SVG where there is an id=" , we change to get the d=
	pathString = pathString.substring(0, pathString.indexOf('"'));

	//console.log("2 pathString "+ pathString);

	var i=0;
	var loopFlag=true;

	// test of insertion point
	cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(svg_x, svg_y, 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});


	while (pathString.indexOf("M")>-1 && loopFlag){

		// test
		//loopFlag = false;

		if (pathString.indexOf("M")==0){
			pathString = pathString.substring(1);

			var tempString  =  pathString;
			var polygonPath = "M"+tempString.substring(0, tempString.indexOf("M")); //+"Z";

			//if (polygonPath.indexOf("Z")==-1)
			//	polygonPath = polygonPath + "Z";

			var myPath = polygonPath.substring(1);

			var coord = myPath.split('l');
			var X = new Array();
			var Y = new Array();

			//console.log("coord split l "+coord.length);

			for (var j=0; j<coord.length; j++){
				var point = coord[j].split(',');
				//console.log(coord[j]+" point "+point[0]+" "+point[1]);

				if(j==0){
					X[j] = Number(point[0]);
					Y[j] = Number(point[1]);
				}
				else{

					X[j] = X[j-1] + Number(point[0]);
					Y[j] = Y[j-1] + Number(point[1]);

				}
				cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(X[j], Y[j], 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(0,255,0)"});
			}
			cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({"stroke-width" : "0.01"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});

			var polyFlag = false;
			var flag_inside = isInside(X, Y, X.length, svg_x, svg_y)

			if (flag_inside != 0){ if (cvjs_debug)	console.log("FLAG="+flag_inside); polyFlag = true;}

			pathString = pathString.substring(pathString.indexOf("M"));

			//window.alert("pathString "+pathString);
//			var polyFlag = Snap.path.isPointInside(polygonPath, svg_x, svg_y);

			//console.log(i+" "+polyFlag+" ");

			if (polyFlag) console.log("polyFlag IS NOW TRUE");

			//try{
			//tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.8", stroke: '#009900', 'stroke-opacity': "0.8", "stroke-width" : 0.1 });
			//}
			//catch (err){
			//	console.log("err"+i+" "+polygonPath);
			//}


			if (polyFlag){
//				window.alert("we got it  "+i+"  "+polygonPath);

				//cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill:"rgb(255,124,165)", "fill-opacity":"0.7", stroke:"rgb(255,124,165)", "stroke-width" : 4 });

				Node_id = cvjs_currentMaxNodeId();
				//console.log("xurrent Node_id="+Node_id);

				Node_id++;
				currentNode_underbar = Node_underbar+Node_id;
				currentNode_id = "NODE_"+Node_id;
				currentNode_name = "unassigned";
				currentNode_layer = "unassigned";
				currentNode_group = "unassigned";
				currentNode_attributes = "unassigned";
				currentNode_attributeStatus = "unpopulated";  // 3.2.02b
				currentNode_type = "unassigned";
				currentNode_tags = "unassigned";
				currentNode_tags = "unassigned";
				currentNode_linked = false;

				cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);

				var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

				cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
				cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

				cvjs_graphicalObjectCreated('Polygon');
				loopflag = false;

			}
		}
		i++;

	}
}







function cvjs_combineRoomTextlayer() {

	var svg_x = 500;
	var svg_y = 500;

if (cvjs_debug)		console.log("SVG coordinates: " + svg_x+"  "+svg_y+" RoomLayer "+cvjs_convertRoomLayer+" "+cvjs_convertTextLayer);

	//window.alert("now we have to find the polygon");

	var pathString = "";

	var textLayerName = "";

	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
		if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertTextLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertTextLayer.length ){
			textLayerName = layerTable[cvjs_active_floorplan_div_nr].layers[i].layer.toString();
		}
	}

if (cvjs_debug)		console.log(textLayerName);


	for (i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){
		if ((layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).indexOf(cvjs_convertRoomLayer) > -1 && (layerTable[cvjs_active_floorplan_div_nr].layers[i].layerName).length == cvjs_convertRoomLayer.length ){
			pathString = layerTable[cvjs_active_floorplan_div_nr].layers[i].layer.toString();
			if (pathString.indexOf("layer_") == 0){
				pathString = jQuery("#"+layerTable[cvjs_active_floorplan_div_nr].layers[i].layer).html();
			}
		}
	}




	//console.log(cvjs_convertRoomLayer+" after loop "+pathString+" "+layerTable[cvjs_active_floorplan_div_nr].numberOfLayers);

	pathString = pathString.substring( pathString.indexOf("<path"));
	pathString = pathString.substring(0, pathString.indexOf(">"));
	//console.log("1 pathString "+ pathString);

	//pathString = pathString.substring(pathString.indexOf("d=")+3);
	pathString = pathString.substring(pathString.indexOf(" d=")+4);   // 2017-08-15, for SVG where there is an id=" , we change to get the d=
	pathString = pathString.substring(0, pathString.indexOf('"'));

	//console.log("2 pathString "+ pathString);

	var i=0;
	var loopFlag=true;

	// test of insertion point
	cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(svg_x, svg_y, 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});

	//textLayerName = "#"+textLayerName;
	//console.log(textLayerName);

var writeflag = true;

	while (pathString.indexOf("M")>-1 && loopFlag){

// for test, only one polygons is processed
//loopFlag=false;

		// test
		//loopFlag = false;

		if (pathString.indexOf("M")==0){
			pathString = pathString.substring(1);

			var tempString  =  pathString;
			var polygonPath = "M"+tempString.substring(0, tempString.indexOf("M")); //+"Z";

			//if (polygonPath.indexOf("Z")==-1)
			//	polygonPath = polygonPath + "Z";

			var myPath = polygonPath.substring(1);

			var coord = myPath.split('l');
			var X = new Array();
			var Y = new Array();

			//console.log("coord split l "+coord.length);

			for (var j=0; j<coord.length; j++){
				var point = coord[j].split(',');
				//console.log(coord[j]+" point "+point[0]+" "+point[1]);

				if(j==0){
					X[j] = Number(point[0]);
					Y[j] = Number(point[1]);
				}
				else{

					X[j] = X[j-1] + Number(point[0]);
					Y[j] = Y[j-1] + Number(point[1]);

				}
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(X[j], Y[j], 0.1).attr({"stroke-width" : "0.06"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(0,255,0)"});
			}
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({"stroke-width" : "0.01"}).attr({"fill" : "none"}).attr({"stroke" : "rgb(255,0,0)"});

			// here we loop over all text objects in the cvjs_convertTextLayer

			var polyFlag = false;
			jQuery("text").each(function( index ) {

			  if (!polyFlag){   // if we have a match we do not search anymore
//				var parentLayer = jQuery(this).parents().find('#layer_Level_33').eq(0).attr('id');
				var textLayerN = "#"+textLayerName;
				var parentLayer = "";
				parentLayer = jQuery(this).parents().find(textLayerN).eq(0).attr('id');


				var parentEls = jQuery( this ).parents()
				  .map(function() {
				    return ( this.tagName+" "+this.id);
				  })
				  .get()
  				.join( ", " );
				// if the text is inside a block, we do not want to match against the RoomLayer
  				if (parentEls.indexOf("Block_")>-1) {
					parentLayer = "NONE";
				}

				if (writeflag) console.log("TEXT:"+jQuery( this ).text()+" parent layer "+parentLayer +"  all parents "+parentEls);


				//console.log(jQuery( this ).text()+": "+parentEls+" XXXX");
				if (parentLayer == undefined) parentLayer = "NONE";

				if (parentLayer.indexOf(textLayerName)==0 && (jQuery( this ).text().indexOf("1W")==0  || jQuery( this ).text().indexOf("1Z")==0 || jQuery( this ).text().indexOf("1U")==0 || jQuery( this ).text().indexOf("6E")==0 || jQuery( this ).text().indexOf("6T")==0 )){

					var xx = jQuery( this ).attr('x');
					var yy = jQuery( this ).attr('y')

					polyFlag = isInside(X, Y, X.length, xx, yy);

					if (polyFlag){
		//				console.log("polyFlag IS NOW TRUE "+jQuery(this).text()+"  parentLayer "+parentLayer+" "+"#"+textLayerName);


		//				window.alert("we got it  "+i+"  "+polygonPath);

						//cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill:"rgb(255,124,165)", "fill-opacity":"0.7", stroke:"rgb(255,124,165)", "stroke-width" : 4 });

						Node_id = cvjs_currentMaxNodeId();
						//console.log("xurrent Node_id="+Node_id);

						Node_id++;
						currentNode_underbar = Node_underbar+Node_id;
						currentNode_id = "NODE_"+Node_id;
						currentNode_name = jQuery(this).text();
						currentNode_layer = "Y";
						currentNode_group = "X";
						currentNode_attributes = "1";
						currentNode_attributeStatus = "populated";  // 3.2.02b
						currentNode_type = "Door Box";
						currentNode_tags = "Door Box";
						currentNode_linked = false;

						cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);

						var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

						cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
						cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

						cvjs_graphicalObjectCreated('Polygon');
						loopflag = false;

					}

				  }
			    }
			});



			pathString = pathString.substring(pathString.indexOf("M"));


			writeflag = false;
			//window.alert("pathString "+pathString);
//			var polyFlag = Snap.path.isPointInside(polygonPath, svg_x, svg_y);

			//console.log(i+" "+polyFlag+" ");


			//try{
			//tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polygonPath).attr({fill: '#ff9999', "fill-opacity": "0.8", stroke: '#009900', 'stroke-opacity': "0.8", "stroke-width" : 0.1 });
			//}
			//catch (err){
			//	console.log("err"+i+" "+polygonPath);
			//}

		}

	}
}














// 	Variables for setting up space management
//  ZZZ

var icon_command_active = 0;  // CH
var currentLinkId = -1; // CH



var load_waitflag_files = 0;
var load_waitflag_overlay = 0;
var load_waitflag_cluster = 0;
var load_waitflag_linklist = 0;

var edit_cancel_flag = false;







var fArr_Name = new Array();  // CH
var fArr_Id = new Array();  // CH
var fArr_PolygonNr = new Array();  // CH
var fArr_PolygonLayerName = new Array();  // CH
var fArr_Occupancy = new Array();  // CH
var fArr_Tags = new Array();  // CH
var fArr_Type = new Array();  // CH
var fArr_Layer = new Array();  // CH

var fArr_Maximo_Datafield1 = new Array();  // CH
var fArr_Maximo_Datafield2 = new Array();  // CH
var fArr_Maximo_Datafield3 = new Array();  // CH

var fArr_Name_fixtures = new Array();  // CH
var fArr_Id_fixtures = new Array();  // CH
var fArr_PolygonNr_fixtures = new Array();  // CH
var fArr_PolygonLayerName_fixtures = new Array();  // CH
var fArr_Occupancy_fixtures = new Array();  // CH
var fArr_Tags_fixtures = new Array();  // CH
var fArr_Type_fixtures = new Array();  // CH
var fArr_Layer_fixtures = new Array();  // CH


var overlay_flag = 0;
var save_drawing_flag = 0;

var fnArr_FileName = new Array();  // load from .rw file
var fnArr_ShortName = new Array();  // load from .rw file
var fnArr_listdirectory_FileName = new Array();   // generate from list directory at load time of Add/Edit
var fnArr_listdirectory_ShortName = new Array();  // generate from list directory at load time of Add/Edit


var searchListType = new Array();  // CH
var searchListOccupancy = new Array();  // CH
var searchListTags = new Array();  // CH

var new_linkList = "";




function cvjs_getSizeOfLinkedObjects(){

	return (vqRooms[cvjs_active_floorplan_div_nr].length);

}





function generate_new_linkList_fixtures(){

//window.alert("generate_new_linkList_fixtures fArr_Name_fixtures.length ="+fArr_Name_fixtures.length);

	var k=0;
	new_linkList_fixtures = "";


	for (var i=0;i<fArr_Name_fixtures.length;i++)
	{

		if (fArr_PolygonNr_fixtures[i] == -1){
			// there is no association between a space and a polygon, therefore the space
			// is selectable and part of the list

			var fixtureName = "";

			if (fArr_Name_fixtures[i] == "")
				fixtureName = fArr_Id_fixtures[i];
			else
				fixtureName = fArr_Name_fixtures[i];

			new_linkList_fixtures = new_linkList_fixtures + "<li><a href=\"javascript:change_link_fixtures('"+fArr_Id_fixtures[i]+"')\">"+fixtureName+"</a></li>";

		}
		else{

		// window.alert("we have something different from -1 "+fArr_PolygonNr_fixtures[i]);

		}

	}

//window.alert("new_linkList_fixtures :"+new_linkList_fixtures);

	jQuery("#fixtures_drawing").html(new_linkList_fixtures);  // CH


// autocomplete on lists is not done


}



function generate_new_linkList()     // list of spaces that are unoccupied and can be linked
{

//window.alert("generate_new_linkList ");

	var k=0;

	new_linkList = "";
	//window.alert("generate_new_linkList "+fArr_Name.length);


if (cvjs_debug)		console.log("generate_new_linklist ");


	for (var i=0;i<fArr_Name.length;i++)
	{

		if (fArr_PolygonNr[i] == -1){
			// there is no association between a space and a polygon, therefore the space
			// is selectable and part of the list

			//console.log(i+" no association ");

			new_linkList = new_linkList + "<li><a href=\"javascript:change_link_space('"+fArr_Id[i]+"')\">"+fArr_Name[i]+"</a></li>";

		}
		else{
			//window.alert(i+" this space is occupied and is not included in the list");
			// this space is occupied, so we need to use this for the Type, Occupancy and Tags autocomplete lists


			// have to figure out if the item is already in the autocomplete list or not

if (cvjs_debug)				console.log(i+" association! ");


			var flag = true;
			for (var j=0;j<searchListType.length;j++){
				if (searchListType[j] == fArr_Type[i]){ flag = false;}
			}
			if (flag == true) { searchListType.push(fArr_Type[i]);  }

			flag = true;
			for (var j=0;j<searchListOccupancy.length;j++){
				if (searchListOccupancy[j] == fArr_Occupancy[i]){ flag = false;}
			}
			if (flag == true) { searchListOccupancy.push(fArr_Occupancy[i]);  }


			flag = true;
			for (var j=0;j<searchListTags.length;j++){
				if (searchListTags[j] == fArr_Tags[i]){ flag = false;}
			}
			if (flag == true) { searchListTags.push(fArr_Tags[i]);  }


		}

	}


	searchListType.sort();
	searchListOccupancy.sort();
	searchListTags.sort();


// we do this in the modal
//	jQuery("#spaces_drawing").html(new_linkList);  // CH


//windows.alert("linklist 1");

	load_waitflag_linklist = 1;
	if ( load_waitflag_files == 1 && load_waitflag_cluster == 1 && load_waitflag_overlay == 1 && load_waitflag_linklist == 1)
		jQuery("#loadpane_small").hide();



//window.alert("spaces_drawing is updated!");

// 2017-05-30
// generate the pulldown menu
//		window.alert("new_linkList "+new_linkList);

		jQuery("#spaces_drawing").html(new_linkList);  // CH




}






// void legacy method
function reset_color_on_selected_space()
{
	var j = -1;
	if (selectedLinkUnlinkLayer.indexOf("NODE_")>=0){

		for (var i=0;i<fArr_Name.length;i++)		{
			if (fArr_PolygonLayerName[i].indexOf(selectedLinkUnlinkLayer)>=0){
				j = i;  // bingo, the layer is actually linked
			}
		}

		for (var i=0;i<fArr_Name_fixtures.length;i++)		{
			if (fArr_PolygonLayerName_fixtures[i].indexOf(selectedLinkUnlinkLayer)>=0){
				j = i;  // bingo, the layer is actually linked
			}
		}

	}

	if (j>-1){
		// the layer is linked therefore it must be colored in blue

	}
	else{
		// the layer is unlinked therefore it must be colored in gray
		if (selectedLinkUnlinkLayer.indexOf("NODE_")>=0){
		}
	}
}



function cvjs_createSpaceLocationArrays(nameArray, idArray){

	var j=0;
	//window.alert("length="+data.length);

//	for (i=0; i < data.length; i++){
	for (i=0; i < nameArray.length; i++){
			//		for (i=0; i < 6; i++){
//		fArr_Name[j] = data[i].LOCATION;  // name of space
//		fArr_Id[j] = data[i].LOCATIONSID;     // if of space
		fArr_Name[j] = nameArray[i];  // name of space
		fArr_Id[j] = idArray[i];     // if of space


		fArr_PolygonNr[j] = -1;    // no association with room polygons yet
		fArr_PolygonLayerName[j] = "none"; // no association with room polygons yet
		fArr_Type[j] = -1;
		fArr_Occupancy[j] = -1;
		fArr_Tags[j] = -1;

		//window.alert(i+" "+data[i].LOCATION+" "+data[i].LOCATIONSID+" "+fArr_Name[j]+"  "+fArr_Id[j]+"  "+data[i][maximo_includecols1]);
		j++;
	}


		// do the sort alphabetically

		var t1 = "";
		var t2 = "";

		var t3 = "";
		var t4 = "";
		var t5 = "";



		for (var k=0; k < fArr_Name.length-1; k++){

			for (var l=k+1; l < fArr_Name.length; l++){

				if ( fArr_Name[k].toLowerCase() > fArr_Name[l].toLowerCase() ){

					t1 = fArr_Name[l];
					t2 = fArr_Id[l];


					fArr_Name[l] = fArr_Name[k];  // name of space
					fArr_Id[l] =  fArr_Id[k];     // if of space

					fArr_Name[k] = t1;   // name of space
					fArr_Id[k] =  t2;    // if of space


					// fArr_PolygonNr[j] = -1;        // no association with room polygons yet
					// fArr_PolygonLayerName[j] = ""; // no association with room polygons yet

				}

			}
		}



//window.alert("length of vqRooms ="+vqRooms.length);

		for (var k=0; k < fArr_Name.length; k++){

			fArr_PolygonNr[k] = -1;    // no association with room polygons yet
			fArr_PolygonLayerName[k] = "none"; // no association with room polygons yet
			fArr_Type[k] = -1;
			fArr_Occupancy[k] = -1;
			fArr_Tags[k] = -1;

			var l=0;

// we have changed the loop to be based on vqRooms information, rather than what is in the fArr arrays

			for (spc in vqRooms[cvjs_active_floorplan_div_nr]){

				//if (k==5) window.alert(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+" "+fArr_Id[k]);

				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == fArr_Id[k]){

//window.alert(vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"   "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+" "+fArr_Id[k]);

						fArr_PolygonNr[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
						fArr_PolygonLayerName[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
						fArr_Layer[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");

						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("type").indexOf("undefined")>=0){
							// do nothing
						}
						else{

							fArr_Type[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("type");
						}
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy").indexOf("undefined")>=0){
							// do nothing
						}
						else{

							fArr_Occupancy[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy");
						}
// we dont know how to read in tags properly at this time....
						fArr_Tags[k] = "";
//								if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags").indexOf("tags")>=0){
//									// do nothing
//								}
//								else{
//									fArr_Tags[k] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags");
//								}


				}


			}


		}

if (cvjs_debug)			console.log("generate_new_linkList");

		generate_new_linkList();

}



function change_link_space(rmid)
{

//window.alert("change link space "+rmid);

	currentLinkId = rmid;
	for (var i=0;i<fArr_Name.length;i++)
	{
		if (fArr_Id[i] == rmid){
			// this is the room id selected
			jQuery("#drop_link_spaces").html(fArr_Name[i]+'<b class="caret"></b>');

		}
	}
}



function change_objects_generic(object){

	window.alert("I have selected this from the list "+object);

//	jQuery("#drop_locations_sensors").html(lTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[object]+' <span class="caret"></span>');

}

var cvjs_dataMapsHeaderArray = null;

function cvjs_createDataMapsHeaders(headerArray){

	cvjs_dataMapsHeaderArray = headerArray;

if (cvjs_debug)		console.log("cvjs_dataMapsHeaderArray "+cvjs_dataMapsHeaderArray);


	var new_datamap_forms = "<div class=\"dropdown-content\">";
	for (var i=0; i<4; i++){
		new_datamap_forms = new_datamap_forms  + "<li><a href=\"javascript:cvjs_change_datamaps('"+i+"')\">"+headerArray[i]+"</a></li>";

	}
	new_datamap_forms = new_datamap_forms  + "</div>"
	 jQuery("#select_datamaps").html(new_datamap_forms);


}

/////   DRAWINGS OVERLAY METHODS START

// internal methods to handle compare drawings
var cvjs_compareDrawingsFirstDrawing = "";
var cvjs_compareDrawingsSecondDrawing = "";

var cvjs_compareDrawings = false;

var colorFlag=true;

var firstOverlayCompareFile = true;

var layers_all_overlay;
var layers_all_overlay2;
var fileOverlay = false;

function allocateLayer(layer){

	layers_all_overlay = layer;

}

function allocateLayer2(layer){

	layers_all_overlay2 = layer;

}



var cvjs_fileOverlay = false;

var cvjs_firstInLineDrawingContent = "";


var secondLoading = false;

function cvjs_OnLoadEndCompareDrawings(){



	if (cvjs_debug) console.log("XXXXXXXXXXXX  Compare       "+cvjs_loadCompareDrawingSwitch+"  "+cvjs_fileOverlay+" second drawing "+cvjs_compareDrawingsSecondDrawing+"  first drawing"+cvjs_compareDrawingsFirstDrawing);

	

if (cvjs_loadSecondCompareDrawing){
	cvjs_loadSecondCompareDrawing = false;
	cvjs_compareDrawingsSecondDrawing = current_jsFloorNames;
	cvjs_compareDrawingsSecondDrawing = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];
	
	
	// 4.1.01b
	var secondfile = cvjs_compareDrawingsSecondDrawing
	if (secondfile.lastIndexOf("/")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("/")+1);
	
	//4.1.01e
	if (secondfile.lastIndexOf("&filename=")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("&filename=")+10);
	

	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	
	//window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsSecondDrawing)>-1)
				secondfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}

	
	jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(secondfile);  
	

	if (cvjs_debug)		console.log(current_jsFloorNames+"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP   cvjs_compareDrawingsSecondDrawing="+cvjs_compareDrawingsSecondDrawing);
}

if (cvjs_debug)	console.log("YYYYYYYYYYYY cvjs_loadSecondCompareDrawing "+cvjs_loadSecondCompareDrawing+" cvjs_OnLoadEndCompareDrawings "+cvjs_fileOverlay);

	//4.1.02c
	try{

		cvjs_changeToIconPage(3);

	}
	catch(err){
		
		console.log("Page change fails "+err);
	
	}
	
	// change to third icon page
	//cvjs_changeNextIconPage();
	//cvjs_changeNextIconPage();

	

//		for (var j=0; j<1; j++){
			if (cvjs_fileOverlay){
				
				var searchPart = "";
				if (!secondLoading){
					searchPart= "#main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr];
				}
				else{
					searchPart= "#main_master_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"_secondfile";	
					secondLoading = false;   // we have to reset the parameter so that coloring of masterground is set back to the main one
				}


console.log(searchPart);
				
//				jQuery("body").find("g").each(function (){
				jQuery(searchPart).find("g").each(function (){
					
				
	//				console.log(jQuery(this).hasClass('firstOverlayCompareFile'));

					for (var i=0; i<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; i++){

	//						console.log(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass);

							if (jQuery(this).hasClass(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass)){

							//console.log(firstOverlayCompareFile+" parsing second file  ");

									// make an overlay file
									if (firstOverlayCompareFile)
										jQuery(this).addClass('firstOverlayCompareFile').removeClass(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass);

									//console.log(layerTable[cvjs_active_floorplan_div_nr].layers[i].layerClass);

									jQuery(this).find("path").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});


									jQuery(this).find("text").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});


									jQuery(this).find("circle").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});


									jQuery(this).find("ellipse").each(function (){

										//console.log("path "+jQuery(this));
										if (colorFlag){
											jQuery(this).css("stroke","#f00");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#f00");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;
										}
										else {
											jQuery(this).css("stroke","#00f");
											if (!(jQuery(this).css("fill")=="none")) jQuery(this).css("fill","#00f");
											jQuery(this).css("opacity","1.0");
											//flag = !flag;

										}
									});





							}
					}

				});
			}

if (cvjs_debug)			console.log("TRY AGAIN");

//		}


	if (!firstOverlayCompareFile && fileOverlay){

if (cvjs_debug)			console.log("add layers_all_overlay");
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr] = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//		cvjs_rPaper[cvjs_active_floorplan_div_nr].add(layers_all_overlay);

//window.alert("now we try to massage the content");
//		layers_all.before(layers_all_overlay);

//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all_overlay);
//		cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(layers_all);

	//	cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({fill: "#fff", "fill-opacity":"0.01", "stroke-width": 0});

		fileOverlay = false;
	}


	if (cvjs_loadCompareDrawingSwitch==1){


		fileOverlay = true;
		allocateLayer(layers_all);
if (cvjs_debug)			console.log(layers_all_overlay);
		cvjs_setInitMasterBackgroundMode(false);



		colorFlag = false;
		firstOverlayCompareFile = false;

if (cvjs_debug)	console.log("XXX1 cvjs_loadCompareDrawingSwitch="+cvjs_loadCompareDrawingSwitch+" cvjs_compareDrawingsSecondDrawing="+cvjs_compareDrawingsSecondDrawing);


		cvjs_loadCompareDrawingSwitch = 0;
		
		//window.alert("we just load the first drawing");
		secondLoading = true;
		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_compareDrawingsSecondDrawing );
	}


	if (cvjs_loadCompareDrawingSwitch==2){

		fileOverlay = true;
		allocateLayer(layers_all);
if (cvjs_debug)			console.log(layers_all_overlay);
		cvjs_setInitMasterBackgroundMode(false);

		colorFlag = true;
		firstOverlayCompareFile = false;

if (cvjs_debug)	console.log("XXXX2 cvjs_loadCompareDrawingSwitch="+cvjs_loadCompareDrawingSwitch+" cvjs_compareDrawingsFirstDrawing="+cvjs_compareDrawingsFirstDrawing);

		cvjs_loadCompareDrawingSwitch = 0;
		secondLoading = true;
		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_compareDrawingsFirstDrawing );
	}


	if (cvjs_drawingLoadCounter == 1){
		cvjs_drawingLoadCounter = 0;

		//cvjs_compareDrawingsFirstDrawing = currentLoadedDrawingFullName;

if (cvjs_debug)			console.log("LLLLLLLLLLLL we have loaded the first file again as js cvjs_compareDrawingsFirstDrawing "+cvjs_compareDrawingsFirstDrawing);


		colorFlag = false;
		cvjs_openFileLoadToServer(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		cvjs_loadSecondCompareDrawing = true;
		//console.log("here we colour the current drawing blue, have to store the name of current drawing and load in a new drawing, that drawing is colored red");


	}






//if (cvjs_debug)		console.log("OnLoadEnd compare drawings rpaper "+cvjs_rPaper[cvjs_active_floorplan_div_nr]);
if (cvjs_debug)		console.log("OnLoadEnd compare drawings rpaper ");

}

var cvjs_loadSecondCompareDrawing = false;

var cvjs_drawingLoadCounter = 0;



// 3.3.04d
var cvjs_loadSecondCompareDrawingDirect = false;
var cvjs_loadSecondCompareDrawingDirect_fileName = "../content/drawings/dwg_compare_drawings/hq17-2.dwg";


// 3.3.04b
// make method to set SecondCompare§DrawingDirect_fileName
/**
 * Sets the name of the second drawing for compare load, bypassing load modal  
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {string} fileName - name of drawing
 */
function cvjs_setCompareDrawings_LoadSecondDrawingDirect(floorplan_div, fileName){

	cvjs_loadSecondCompareDrawingDirect = true;
	cvjs_loadSecondCompareDrawingDirect_fileName = fileName;
	
	
	//4.1.01b
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).show();	
	
	
	
}

/**
 * Second drawing in compare files are set to be loaded via modal - default action  
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
function cvjs_setCompareDrawings_StandardModal(floorplan_div){

	cvjs_loadSecondCompareDrawingDirect = false;
	
}




/**
 * Loads the second drawing for compare with drawing currently loaded 
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_compareDrawings_LoadSecondDrawing(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	
	if (cvjs_debug) console.log("cvjs_compareDrawings_LoadSecondDrawing(");
	
	//4.1.01b
	//window.alert("#floatCompareDrawingMenu"+"_"+floorplan_div);
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).show();	
	var floorplan = floorplan_div;
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
		floorplan = floorplan_div.substring(0, floorplan_div.length-4);
	}
	// 4.1.01b
	var pos = jQuery("#"+floorplan).position();
	var posmenu_x = pos.top+jQuery("#"+floorplan_div).height()-75
	var posmenu_y = pos.left+jQuery("#"+floorplan_div).width()-325;	
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).offset({ top: posmenu_x, left: posmenu_y});  
	
	var firstfile = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];
	if (firstfile.lastIndexOf("/")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("/")+1);
	
	//4.1.01e
	if (firstfile.lastIndexOf("&filename=")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("&filename=")+10);
	
	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	



	if (cvjs_debug) console.log("cvjs_CompareFiles_CustomFileModalContent_flag ="+cvjs_CompareFiles_CustomFileModalContent_flag);


//	window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			
			if (cvjs_debug){
				console.log(jj+" originating file "+cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]);
				console.log(jj+" Content[jj].url "+cvjs_CompareFiles_CustomFileModalContent[jj].url);
				console.log(jj+" Content[jj].text "+cvjs_CompareFiles_CustomFileModalContent[jj].filenameText);	
			}	

			var orig_first_chunk = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ].indexOf("/wopi/files");
			if ( orig_first_chunk>0){				
				var new_first = cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ].substring(0,orig_first_chunk+1);
				var custom_file_content =  cvjs_CompareFiles_CustomFileModalContent[jj].url.substring(cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf("/wopi/files")+1);
				cvjs_CompareFiles_CustomFileModalContent[jj].url = new_first + custom_file_content;
			}
			
			if (cvjs_debug){
				console.log(jj+"NEW NEW Content[jj].url "+cvjs_CompareFiles_CustomFileModalContent[jj].url);
			}	
	
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ])>-1)
				firstfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}

// 5.1.03k      

// we check out the difference between source and the table entry and simply modify the table entry to the initial port + url

//0 originating file https://nginx:9999/wopi/files/ce616683-14dd-48c0-ac91-e912cae204f5/contents?access_token=5f8e5ab2-9e61-4b24-ba51-28dea391e30f12c1dea2-1f7e-497b-9c7f-1f287e14fb1b:999999999999999&filename=hq17-1.dwg
//0 Content[jj].url http://192.168.1.4:8080/wopi/files/ce616683-14dd-48c0-ac91-e912cae204f5/contents?access_token=5f8e5ab2-9e61-4b24-ba51-28dea391e30f12c1dea2-1f7e-497b-9c7f-1f287e14fb1b:1579859385926&filename=hq17-1.dwg
	
	
	
	
if (cvjs_debug) console.log("We have firstFile "+firstfile+"  here before setting cvjs_compareDrawings="+cvjs_compareDrawings);

	jQuery("#compareDrawingMenuText1_"+floorplan_div).html(firstfile);  
	jQuery("#compareDrawingMenuText2_"+floorplan_div).html("");  

	// 4.4.01b
	
	if (cvjs_compareDrawings) {if (cvjs_debug)	console.log("exit! currentLoadedDrawingFullName="+currentLoadedDrawingFullName); return;}



	// we store the first drawing on file
	cvjs_compareDrawingsFirstDrawing = currentLoadedDrawingFullName; // this is the converted .js name or .svg name
	
	cvjs_compareDrawingsFirstDrawing =	cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ];   // 2018-05-05
	
	cvjs_compareDrawings = true;
	cvjs_fileOverlay = true;

	cvjs_toggleFlag = false;
	// we color the first drawing red
	colorFlag = true;

	// we load the first file again in red - convert it to js on the server
	// cvjs_loadCompareDrawingSwitch = 1;
	cvjs_drawingLoadCounter = 0;

	if (cvjs_debug)	console.log(currentLoadedDrawingFullName);

//	if (currentLoadedDrawingFullName.indexOf(".js")>-1){  // 2018-05-06
	// we have a .js file that we just use
	cvjs_OnLoadEndCompareDrawings();
	colorFlag = false;
	// open the modal to fetch the second drawing
	cvjs_loadSecondCompareDrawing = true;

	
if (cvjs_debug) console.log("Here we load the drawing "+cvjs_loadSecondCompareDrawingDirect_fileName);

	
	
	// 3.3.04d
	if(!cvjs_loadSecondCompareDrawingDirect)  // this is the standard modal menu generated	
		cvjs_openFileLoadToServer(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	else									  // this is the direct load of second drawing
		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_loadSecondCompareDrawingDirect_fileName );
	
	
	if (cvjs_debug)			console.log("here we colour the current drawing blue, have to store the name of current drawing and load in a new drawing, that drawing is colored red");

}


var cvjs_toggleFlag = false;
var cvjs_toggeDrawings = false;
var cvjs_loadCompareDrawingSwitch = 0;




/**
 * Toggles the overlaid drawings
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_compareDrawings_ToggleDrawingOverlay(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);


			cvjs_toggleFlag = !cvjs_toggleFlag;

	


	//4.1.01c
	var firstfile = cvjs_compareDrawingsFirstDrawing
	if (firstfile.lastIndexOf("/")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("/")+1);
	//4.1.01e
	if (firstfile.lastIndexOf("&filename=")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("&filename=")+10);
	

	var secondfile = cvjs_compareDrawingsSecondDrawing
	if (secondfile.lastIndexOf("/")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("/")+1);
	//4.1.01e
	if (secondfile.lastIndexOf("&filename=")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("&filename=")+10);


	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	
	//window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsFirstDrawing)>-1)
				firstfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsSecondDrawing)>-1)
				secondfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	
	//4.1.01c	
	if (cvjs_toggleFlag){	
		jQuery("#compareDrawingMenuText1_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&darr; "+firstfile);  
		jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&uarr; "+secondfile);  
	}else{	
		jQuery("#compareDrawingMenuText1_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&uarr; "+firstfile);  
		jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("&darr; "+secondfile);  
	} 
		

	

			if (cvjs_toggleFlag){

				colorFlag = true;
				FileName = cvjs_compareDrawingsFirstDrawing;
				cvjs_loadCompareDrawingSwitch = 1;

				cvjs_LoadDrawing(floorPlan_div, FileName );


			}


			if (!cvjs_toggleFlag){

				colorFlag = false;
				FileName = cvjs_compareDrawingsSecondDrawing;
				cvjs_loadCompareDrawingSwitch = 2;

				cvjs_LoadDrawing(floorPlan_div, FileName );
			}
if (cvjs_debug)		console.log("here we have to toggle the drawings with overlay in red and blue to see the difference");

}


/**
 * Toggles the drawings individually
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_compareDrawings_ToggleDrawings(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

		
	// reset arrows
	//4.1.01c
	var firstfile = cvjs_compareDrawingsFirstDrawing
	if (firstfile.lastIndexOf("/")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("/")+1);

	//4.1.01e
	if (firstfile.lastIndexOf("&filename=")>-1) firstfile = firstfile.substring(firstfile.lastIndexOf("&filename=")+10);
	

	var secondfile = cvjs_compareDrawingsSecondDrawing
	if (secondfile.lastIndexOf("/")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("/")+1);
	// 4.4.01e
	if (secondfile.lastIndexOf("&filename=")>-1) secondfile = secondfile.substring(secondfile.lastIndexOf("&filename=")+10);

	
	//4.1.01f
/**	
	var my_custom_modal_dir_listing = [
		{ filenameText: "Version 1 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-1.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
		{ filenameText: "Version 2 - hq17-1.dwg", filename: "hq17-1.dwg" ,   url: "http://localhost/cadviewer_4_1_0/content_dev/hq17-2.dwg", path: ""  },
	];			
**/	
	//window.alert("here!"+cvjs_CompareFiles_CustomFileModalContent_flag);
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsFirstDrawing)>-1)
				firstfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		for (jj=0; jj<cvjs_CompareFiles_CustomFileModalContent.length; jj++){
			//window.alert(cvjs_conversion_originatingFile[cvjs_active_floorplan_div_nr ]+" "+cvjs_CompareFiles_CustomFileModalContent[jj].url)
			if (cvjs_CompareFiles_CustomFileModalContent[jj].url.indexOf(cvjs_compareDrawingsSecondDrawing)>-1)
				secondfile = cvjs_CompareFiles_CustomFileModalContent[jj].filenameText;
		}
	}
	

	jQuery("#compareDrawingMenuText1_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(firstfile);  
	jQuery("#compareDrawingMenuText2_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(secondfile);  
	

	
	
	

			cvjs_loadCompareDrawingSwitch = 0;

			cvjs_toggleFlag = !cvjs_toggleFlag;

			if (cvjs_toggleFlag){
				colorFlag = true;
				FileName = cvjs_compareDrawingsFirstDrawing;
				cvjs_LoadDrawing(floorPlan_div, FileName );
			}


			if (!cvjs_toggleFlag){
				colorFlag = false;
				FileName = cvjs_compareDrawingsSecondDrawing;
				cvjs_LoadDrawing(floorPlan_div, FileName );
			}

}


/**
 * Exit compare drawing and returns to base drawing
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_exitCompareDrawings(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);


if (cvjs_debug)		console.log("here we exit the compare drawings methods");
	cvjs_fileOverlay = false;
	cvjs_compareDrawings = false;
	firstOverlayCompareFile = true;
	// load first drawing again
	cvjs_LoadDrawing(floorPlan_div, cvjs_compareDrawingsFirstDrawing );

	
 // 3.3.06d
 cvjs_CompareFiles_CustomFileModalContent_flag = false;
 
 
 
 	//4.1.01b
	jQuery("#floatCompareDrawingMenu"+"_"+floorplan_div).hide();	

	
}


/////   DRAWINGS OVERLAY METHODS END


////    COLLABORATION METHODS START



var cvjs_collabServerUrl =	"../php/collaboration/";
var cvjs_collabServerFolder = "C:\\xampp\\htdocs\\CV-JS_2_4_1\\php\\collaboration\\";

var cvjs_collabSessionName = "session01"


/**
 * Sets the sessions name for the collaboration session
 * @param {string} sessions_name : name of the session. This name will be a server entity of same name containing all content relevant to the session
 */
function cvjs_setCollaborationSessionName(session_name){

	cvjs_collabSessionName = session_name;

}


/**
 * Sets the server Url for collaboration content
 * @param {string} url_name : default is "../php/collaboration/";
 */
function cvjs_setCollaborationServerUrl(url_name){

	cvjs_collabServerUrl = url_name;

}


/**
 * Sets the server path for collaboration content
 * @param {string} server_path : default is "C:\\xampp\\htdocs\\CV-JS_2_4_1\\php\\collaboration\\";
 */
function cvjs_setCollaborationServerFolder(server_path){

	cvjs_collabServerFolder = server_path;

}



function cvjs_collab_timer(){

	if (cvjs_debug) console.log("collab_timer");

	if (!cvjs_collab_mode) return;

		if (!cvjs_collabPresenter){

			// if not presenter
			// go to folder and read content

if (cvjs_debug)	console.log("load redline");

			// jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).show();
			cvjs_setStickyNoteRedlineUrl(cvjs_collabServerUrl+"redlines/"+cvjs_collabSessionName+".js");
			cvjs_loadStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

			// load the viewBox settings

			var file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+cvjs_collabServerUrl+"viewports/"+cvjs_collabSessionName+".js";

			jQuery.ajax({
			  url:file,
			  type: 'post',
			  cache: false,
			  success: function(viewPortString){

				if (viewPortString.indexOf("viewBox_X:") == -1){
					// do nothing, there is no content yet
				}else{

					var str1 = viewPortString.substring(viewPortString.indexOf("viewBox_X:")+11);
					var str2 = str1.substring(0,str1.indexOf(","));
					viewBox[cvjs_active_floorplan_div_nr].X = parseFloat(str2);

if (cvjs_debug)						console.log("XX"+str2+"YY");
					str1 = viewPortString.substring(viewPortString.indexOf("viewBox_Y:")+11);
					str2 = str1.substring(0,str1.indexOf(","));
if (cvjs_debug)						console.log("XX"+str2+"YY");
					viewBox[cvjs_active_floorplan_div_nr].Y = parseFloat(str2);

					str1 = viewPortString.substring(viewPortString.indexOf("viewBoxWidth[cvjs_active_floorplan_div_nr]:")+14);
					str2 = str1.substring(0,str1.indexOf(","));
if (cvjs_debug)						console.log("XX"+str2+"YY");
					viewBoxWidth[cvjs_active_floorplan_div_nr] = parseFloat(str2);

					str1 = viewPortString.substring(viewPortString.indexOf("viewBoxHeight[cvjs_active_floorplan_div_nr]:")+15);
					str2 = str1.substring(0,str1.indexOf(","));
if (cvjs_debug)						console.log("XX"+str2+"YY");
					viewBoxHeight[cvjs_active_floorplan_div_nr] = parseFloat(str2);


					var attr_1 = "{ \"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					var pan_x = jQuery.parseJSON(attr_1);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(pan_x);
				}

			  }  // end success load file names

			});

		}


		if (cvjs_collabPresenter){

			// define my username/ID as active settings
			cvjs_setCurrentStickyNoteValues_NameUserId(user_name, user_id );
			cvjs_setCurrentRedlineValues_NameUserid(user_name, user_id);


			// if presenter
			// go to folder and save redline and viewport

if (cvjs_debug)				console.log("presenter save redline");

			cvjs_setStickyNoteSaveRedlineUrl(cvjs_collabServerFolder+"redlines/"+cvjs_collabSessionName+".js");
			cvjs_saveStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

			//  let us find the ViewPort

			var viewBoxString = "var cvjs_collaborationViewport = { \n viewBox_X: "+viewBox[cvjs_active_floorplan_div_nr].X+", \n viewBox_Y: "+viewBox[cvjs_active_floorplan_div_nr].Y+", \n viewBoxWidth[cvjs_active_floorplan_div_nr]: "+viewBoxWidth[cvjs_active_floorplan_div_nr]+", \n viewBoxHeight[cvjs_active_floorplan_div_nr]: "+viewBoxHeight[cvjs_active_floorplan_div_nr]+", \n}";

if (cvjs_debug)				console.log(viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+" "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y);
if (cvjs_debug)				console.log(viewBoxString);


			// save the viewbox Settings


					var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //	var saveSettingsUrl = settings_data_url+'save-file-p1.php';
					var settings_data_location = cvjs_collabServerFolder+"viewports/"+cvjs_collabSessionName+".js";

					var settings_data = {};
					settings_data['file'] = settings_data_location;
					settings_data['file_content'] = viewBoxString;
if (cvjs_debug)	console.log(settings_data['file_content']+" "+settings_data['file']+"  "+saveSettingsUrl);
					jQuery.ajax({
					  url:saveSettingsUrl,
					  type: 'post',
					  data: settings_data,
					  success: function(html){

					  }  // end success

					});







		}



	if (cvjs_collab_mode==true)
		setTimeout(function(){cvjs_collab_timer()},500);

}

var collaboration_start_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];



/**
 * Start a collaboration session
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

	function cvjs_start_collab(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	
	
		if (collaboration_start_offset_flag[cvjs_active_floorplan_div_nr]){
			collaboration_start_offset_flag[cvjs_active_floorplan_div_nr] = false;
			
//			jQuery("#collabStartModal_"+floorplan_div).offset({ top: 50, left: 150 });
			// 3.1.21j .appendTo('body');
			jQuery("#collabStartModal_"+floorplan_div).css({position: "fixed"});
			jQuery("#collabStartModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top}).appendTo('body');

		}

		jQuery("#collabStartModal_"+floorplan_div).show();

	}

	function cvjs_exit_startcollabmodal(floorplan_div){


		jQuery("#collabStartModal_"+floorplan_div).hide();

	}

	function cvjs_start_collab_button(floorplan_div){

		jQuery("#collabStartModal_"+floorplan_div).hide();

		// window.alert(jQuery("#cvjs_collabSessionInput").val());

		cvjs_collabSessionName = jQuery("#cvjs_collabSessionInput").val();

		cvjs_collabPresenter = false;
		cvjs_collab_mode = true;
		// start timer
		cvjs_collab_timer();

	}


/**
 * Leave the collaboration session
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

	function cvjs_stop_collab(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	
		cvjs_collab_mode = false;
		cvjs_collabPresenter = false;
		cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
		console.log("leaving collab session");

		// stop timer
		// remove username from server list

	}

	
	
/**
 * Clear the redlines in collaboration session
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

	function cvjs_clear_collab_redline(floorPlan_div){

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	
	
		// if presenter

		if (cvjs_collabPresenter){
			// clear redline
if (cvjs_debug)			console.log("clear redline");

			cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
			cvjs_saveStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);



		}


	}


	
/**
 * Take control and become the presenter in collab sessiojn
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
		
	function cvjs_make_collab_presenter(floorPlan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	

		// make presenter internally
		// change presenter into server list

		cvjs_collabPresenter= !cvjs_collabPresenter

		// load server content


	}

////    COLLABORATION METHODS END




function cvjs_GetURLParameter(sParam)
{
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }

	return("");
}



function cvjs_downloadFile(filePath) {

   window.location.href = filePath;

//  var link = document.createElement('a');
//  link.href = filePath;
//  link.download = filePath.substr(filePath.lastIndexOf('/') + 1);
//  link.click();
}



	/// NOTE: BELOW CALLBACK METHODS FOR SVG CLICK HANDLERS

	function cvjs_SVGtoOriginal_X_coord(x, page){
	
		//console.log("Hello: "+actualLLX[cvjs_active_floorplan_div_nr]+"  "+actualLLY[cvjs_active_floorplan_div_nr]+"  "+rpWidth[cvjs_active_floorplan_div_nr]+"  "+rpHeight[cvjs_active_floorplan_div_nr])

		var spaceX = (x-actualLLX[cvjs_active_floorplan_div_nr])/(rpWidth[cvjs_active_floorplan_div_nr]);
		//var spaceY = (y-actualLLY[cvjs_active_floorplan_div_nr])/(rpHeight[cvjs_active_floorplan_div_nr]);
		//console.log(spaceX+"  "+spaceY);

		var llx = Number(cvjs_drawingCoordinates[page].lowerLeft.x);
		var lly = Number(cvjs_drawingCoordinates[page].lowerLeft.y);			
		var urx = Number(cvjs_drawingCoordinates[page].upperRight.x);
		var ury = Number(cvjs_drawingCoordinates[page].upperRight.y);
		var deltax = urx-llx;
		//var deltay = ury-lly;
		
		//console.log(llx+"  "+lly+"  "+urx+"  "+ury+" "+deltax+" "+deltay);
		
		var xcoord = llx + spaceX*deltax
		//var ycoord = lly + spaceY*deltay;

		return xcoord;
	

	}
	

	function cvjs_SVGtoOriginal_Y_coord(y, page){

		//console.log("Hello: "+actualLLX[cvjs_active_floorplan_div_nr]+"  "+actualLLY[cvjs_active_floorplan_div_nr]+"  "+rpWidth[cvjs_active_floorplan_div_nr]+"  "+rpHeight[cvjs_active_floorplan_div_nr])

		//var spaceX = (x-actualLLX[cvjs_active_floorplan_div_nr])/(rpWidth[cvjs_active_floorplan_div_nr]);
		var spaceY = (y-actualLLY[cvjs_active_floorplan_div_nr])/(rpHeight[cvjs_active_floorplan_div_nr]);
		//console.log(spaceX+"  "+spaceY);

		var llx = Number(cvjs_drawingCoordinates[page].lowerLeft.x);
		var lly = Number(cvjs_drawingCoordinates[page].lowerLeft.y);			
		var urx = Number(cvjs_drawingCoordinates[page].upperRight.x);
		var ury = Number(cvjs_drawingCoordinates[page].upperRight.y);
		//var deltax = urx-llx;
		var deltay = ury-lly;
		
		//console.log(llx+"  "+lly+"  "+urx+"  "+ury+" "+deltax+" "+deltay);
		
		//var xcoord = llx + spaceX*deltax
		var ycoord = lly + spaceY*deltay;

		return ycoord;
	
	}

	
	
var cvjs_currentSVGHyperLinkID = "";
var cvjs_currentSVGHyperLinkCSS = new Array();
var cvjs_currentSVGHyperLinkClassList = new Array();

var cvjs_SVGHyperLinkCSSAll = new Array();
var cvjs_SVGHyperLinkCSSAll_Org = new Array();

/****
var cvjs_SVGHyperLinkCSSAll_Drag = false;
var cvjs_SVGHyperLinkCSSAll_XDrag = 0;
var cvjs_SVGHyperLinkCSSAll_YDrag = 0;
var cvjs_SVGHyperLinkCSSAll_XDragW = 0;
var cvjs_SVGHyperLinkCSSAll_YDragW = 0;

var cvjs_SVGHyperLinkCSSAll_dx = 0;
var cvjs_SVGHyperLinkCSSAll_dy = 0;
var cvjs_SVGHyperLinkCSSAll_DragClick = false;
*****/


var cvjs_SVGHyperLinkCSSAll_XDrag = 0;
var cvjs_SVGHyperLinkCSSAll_YDrag = 0;
var cvjs_SVGHyperLinkCSSAll_Drag = false;
var cvjs_SVGHyperLinkCSSAll_MouseDown = false;

var cvjs_SVGHyperLinkCSSAll_MouseMoveFirst = true;


var cvjs_SVGHyperLink_firstFingerX = 0;
var cvjs_SVGHyperLink_firstFingerY = 0;
var cvjs_SVGHyperLink_firstFingerX_m = 0;
var cvjs_SVGHyperLink_firstFingerY_m = 0;


var cvjs_SVGHyperLink_secondFingerX = 0;
var cvjs_SVGHyperLink_secondFingerY = 0;
var cvjs_SVGHyperLink_secondFingerX_m = 0;
var cvjs_SVGHyperLink_secondFingerY_m = 0;
var cvjs_SVGHyperLink_pinch = false;


var cvjs_SVGHyperLink_deltaXinit;
var cvjs_SVGHyperLink_deltaYinit; 

// the difference between two fingers
var cvjs_SVGHyperLink_deltaBase;
var cvjs_SVGHyperLink_deltaDynamicPre;
var cvjs_SVGHyperLink_deltaDynamic;

var cvjs_SVGHyperLink_viewBoxWidthPre;
var cvjs_SVGHyperLink_viewBoxHeightPre;
								
var cvjs_SVGHyperLink_pinch_touchend = false;

var cvjs_SVGHyperLink_vboxX = 0;
var cvjs_SVGHyperLink_vboxY = 0;


var cvjs_SVGHyperLink_moveX = 0;
var cvjs_SVGHyperLink_moveY = 0;

var cvjs_SVGHyperLink_current = 0;


var cvjs_SVGHyperLink_deltaPinchRedraw = 50;


var cvjs_floorplan_div = "";


/**
 * Initialize xlink SVG Hyperlinks with click handler so mouse click are caught, and adds a tooltip with the xlink <id> displayed. The return method on mouseclick is:  cvjs_OnHyperlinkClick(xlink_id);
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_InitializeSVGHyperlinkClick(floorplan_div){


	
	var jj=0;
	cvjs_SVGHyperLinkCSSAll = Array();
	cvjs_SVGHyperLinkCSSAll_Changed = Array();
	
	uItem = Array();

	cvjs_floorplan_div = floorplan_div;
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	
	
	isSmartPhoneOrTablet = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Touch/i.test(navigator.userAgent);
	// first click is actually mouseover
	
	
	// we want to build the array with css content
	jQuery("a.hyperlink").each(function(){
		try{
		//do something with the element here.
		
		// shall we try to make a copy onto the masterBackground
		
			
		
		var id = jQuery(this).attr('id');
		var xlink = jQuery(this).attr('xlink:href');

		
		
		var child = jQuery(this).children();
		var path_id=child[0].id;

		//console.log(path_id);
		cvjs_SVGHyperLinkCSSAll[jj] = new Array();
		cvjs_SVGHyperLinkCSSAll[jj][0] = path_id;
		cvjs_SVGHyperLinkCSSAll[jj][1] = jQuery("#"+path_id).css('fill');
		cvjs_SVGHyperLinkCSSAll[jj][2] = jQuery("#"+path_id).css('fill-opacity');
		cvjs_SVGHyperLinkCSSAll[jj][3] = jQuery("#"+path_id).css('stroke');
		cvjs_SVGHyperLinkCSSAll[jj][4] = jQuery("#"+path_id).css('stroke-width');
		cvjs_SVGHyperLinkCSSAll[jj][5] = jQuery("#"+path_id).css('stroke-opacity');
		cvjs_SVGHyperLinkCSSAll[jj][6] = jQuery("#"+path_id).css('opacity');

		//if (jj<5) alert(path_id+" "+jQuery("#"+path_id).attr('d'));
		//if (jj==1) alert(cvjs_currentSVGHyperLinkCSS[4]);
		
		// 13a					
		uItem[jj]=cvjs_rPaper[cvjs_active_floorplan_div_nr].path(jQuery("#"+path_id).attr('d')).attr({fill:"#FFFFFF", stroke:"#BBBBBB", "fill-opacity":"0.01", "stroke-opacity": 1.0, "stroke-width": 0.8*cvjs_redlineThickness_scaleFactor }).data("node", jj);						
		cvjs_SVGHyperLinkCSSAll[jj][7] = uItem[jj];
		cvjs_SVGHyperLinkCSSAll[jj][8] = id;
		cvjs_SVGHyperLinkCSSAll[jj][9] = xlink;

		
		cvjs_SVGHyperLinkCSSAll[jj][10] = jQuery("#"+path_id).css('fill');                 // external highlight  3.0.13c
		cvjs_SVGHyperLinkCSSAll[jj][11] = jQuery("#"+path_id).css('fill-opacity');;
		cvjs_SVGHyperLinkCSSAll[jj][12] = false;

		
		cvjs_SVGHyperLinkCSSAll[jj][7].mousedown(function(e){
			
			console.log("mousedown");

			if (!cvjs_SVGHyperLinkCSSAll_Drag && !isSmartPhoneOrTablet){
				cvjs_SVGHyperLinkCSSAll_Drag = true;
				cvjs_SVGHyperLinkCSSAll_XDrag = e.pageX;
				cvjs_SVGHyperLinkCSSAll_YDrag = e.pageY;
				
				cvjs_SVGHyperLink_vboxX = viewBox[cvjs_active_floorplan_div_nr].X;
				cvjs_SVGHyperLink_vboxY = viewBox[cvjs_active_floorplan_div_nr].Y;
				
				
			};
			
			
			
			
		}).mouseover(function(e){
			
			console.log("mouseover");
			var testVar = "mouseover "+e.clientX+" "+e.clientY;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});


			cvjs_SVGHyperLink_current = this.data("node");			
			cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: highlight_Hyperlinks.fill, "fill-opacity":"0.8" });
	
			// we remove all other highlights
			for (i=0; i<cvjs_SVGHyperLinkCSSAll.size; i++){						
						if (cvjs_SVGHyperLink_current!=i){
							// 3.0.13c
							if (cvjs_SVGHyperLinkCSSAll[i][12]){
								
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: cvjs_SVGHyperLinkCSSAll[i][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[i][11]});
							}
							else
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
						}
			}
			
			if (cvjs_SVGHyperLink_pinch_touchend){
				// clear everything if pinch
				cvjs_SVGHyperLink_pinch_touchend = false;	
				cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
				
			}
			
	
	
	
	
			var id = cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][8];

			// We use CADViewer JS tooltip to show the ID

			
					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
			
			
			var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
			var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
			if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
			//console.log("absolute");
			   tip[cvjs_active_floorplan_div_nr].css("left", e.clientX+document.documentElement.scrollLeft+10).css("top", e.clientY+document.documentElement.scrollTop-25);
			}
			else{  // we have placed CV-JS inside a div and we have to make a relative position
				//console.log("inside");
				tip[cvjs_active_floorplan_div_nr].css("left", e.clientX-position.left+document.documentElement.scrollLeft+10).css("top", e.clientY-position.top+document.documentElement.scrollTop-25);
			}
			tip[cvjs_active_floorplan_div_nr].html(id);
			tip[cvjs_active_floorplan_div_nr].show();
	

		}).mouseout(function(e){
			var testVar = "mouseout "+e.clientX+" "+e.clientY;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
			console.log("mouseout");

			var currentHyperlink = this.data("node");			
			//cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

			// 3.0.13c
			if (cvjs_SVGHyperLinkCSSAll[currentHyperlink][12]){
				
				cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: cvjs_SVGHyperLinkCSSAll[currentHyperlink][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[currentHyperlink][11]});
			}
			else
				cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
			
			
			
			
			tip[cvjs_active_floorplan_div_nr].hide();

		}).mousemove(function(e){
			
			var testVar = "mousemove "+e.clientX+" "+e.clientY+"  "+cvjs_SVGHyperLinkCSSAll_Drag+"  "+isSmartPhoneOrTablet;
			
			
			if (cvjs_SVGHyperLinkCSSAll_Drag && !isSmartPhoneOrTablet){
								
				console.log("dragging this component");
				testVar = "drag "+e.clientX+" "+e.clientY+"  "+cvjs_SVGHyperLinkCSSAll_XDrag+" "+cvjs_SVGHyperLinkCSSAll_YDrag;
				console.log(testVar);
				
				
				
				var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
				var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
				var scale = 1;
				if (xscale>yscale) {
					scale = xscale
				}
				else{
					scale = yscale;
				}
				pdx = (e.clientX-cvjs_SVGHyperLinkCSSAll_XDrag)*scale;
				pdy = (e.clientY-cvjs_SVGHyperLinkCSSAll_YDrag)*scale;

				viewBox[cvjs_active_floorplan_div_nr].X = cvjs_SVGHyperLink_vboxX  - pdx;
				viewBox[cvjs_active_floorplan_div_nr].Y = cvjs_SVGHyperLink_vboxY  - pdy;
				
				var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
				var json_obj = jQuery.parseJSON(attr_2);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

			};
			
						
						
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				console.log("mousemove");
		}).mouseup(function(e){
			
			//e.preventDefault();  //k    // removing in n
			
			
			var testVar = "mouseup "+e.clientX+" "+e.clientY;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				console.log("mouseup");

			cvjs_SVGHyperLinkCSSAll_Drag = false

			if (!isSmartPhoneOrTablet){	
				
				var delta = Math.sqrt( Math.pow(e.clientX-cvjs_SVGHyperLinkCSSAll_XDrag, 2)+ Math.pow(e.clientY-cvjs_SVGHyperLinkCSSAll_YDrag, 2));
				//window.alert(delta);
				if (delta<4  && !isSmartPhoneOrTablet){	
					var currentHyperlink = this.data("node");	
					cvjs_OnHyperlinkClick(cvjs_SVGHyperLinkCSSAll[currentHyperlink][9]);
				}
			}
			

			if (isSmartPhoneOrTablet){
								
				var delta = Math.sqrt( Math.pow(cvjs_SVGHyperLink_moveX-cvjs_SVGHyperLinkCSSAll_XDrag, 2)+ Math.pow(cvjs_SVGHyperLink_moveY-cvjs_SVGHyperLinkCSSAll_YDrag, 2));
//				window.alert(delta);	
				if (delta<4){
					var currentHyperlink = this.data("node");
					//alert("mouse move click!");
								// we remove all other highlights
								
					for (i=0; i<cvjs_SVGHyperLinkCSSAll.length; i++){	

						if (currentHyperlink!=i){
							// 3.0.13c
							if (cvjs_SVGHyperLinkCSSAll[i][12]){
								
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: cvjs_SVGHyperLinkCSSAll[i][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[i][11]});
							}
							else
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
						}
					/********
								if (i!=currentHyperlink){
								cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});
								}
					********/
					}
					cvjs_OnHyperlinkClick(cvjs_SVGHyperLinkCSSAll[currentHyperlink ][9]);
					
					cvjs_SVGHyperLink_current = currentHyperlink;  // l 
					
					
				}else{
					
					
					var currentHyperlink = this.data("node");			

					if (currentHyperlink!=cvjs_SVGHyperLink_current){						
						//alert("clear old object color if drag")						
						////cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

						// 3.0.13c
						if (cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][12]){
							
							cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][11]});
						}
						else
							cvjs_SVGHyperLinkCSSAll[cvjs_SVGHyperLink_current][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

						// and we need to swap over to new hyperlink
						cvjs_SVGHyperLink_current = currentHyperlink;
					}

					
									
				}

				
			}


			
			
		}).touchstart(function(e){
			
			
			// isSmartPhoneOrTablet , coordinates for mouse up
			cvjs_SVGHyperLink_moveX = e.touches[0].pageX;
			cvjs_SVGHyperLink_moveY = e.touches[0].pageY;
		
			cvjs_SVGHyperLink_firstFingerX = e.touches[0].pageX;
			cvjs_SVGHyperLink_firstFingerY = e.touches[0].pageY;	
	
	
			try{
				
				cvjs_SVGHyperLink_secondFingerX = e.touches[1].pageX;
				cvjs_SVGHyperLink_secondFingerY = e.touches[1].pageY;	
				cvjs_SVGHyperLink_pinch = true; 
					
				cvjs_SVGHyperLink_deltaXinit= cvjs_SVGHyperLink_secondFingerX - cvjs_SVGHyperLink_firstFingerX;
				cvjs_SVGHyperLink_deltaYinit= cvjs_SVGHyperLink_secondFingerY - cvjs_SVGHyperLink_firstFingerY;

				// the difference between two fingers
				cvjs_SVGHyperLink_deltaBase = Math.sqrt(cvjs_SVGHyperLink_deltaXinit*cvjs_SVGHyperLink_deltaXinit + cvjs_SVGHyperLink_deltaYinit*cvjs_SVGHyperLink_deltaYinit);
				cvjs_SVGHyperLink_deltaDynamicPre = cvjs_SVGHyperLink_deltaBase;

				cvjs_SVGHyperLink_viewBoxWidthPre = viewBoxWidth[cvjs_active_floorplan_div_nr];
				cvjs_SVGHyperLink_viewBoxHeightPre = viewBoxHeight[cvjs_active_floorplan_div_nr];
				
				cvjs_SVGHyperLink_vboxX = viewBox[cvjs_active_floorplan_div_nr].X;
				cvjs_SVGHyperLink_vboxY = viewBox[cvjs_active_floorplan_div_nr].Y;
						

			var testVar = "PINCH!!";
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});

				
			}catch(err){
								
				cvjs_SVGHyperLink_pinch = false; 

			var testVar = "No PINCH";
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				
				
				
			}
	
	
	
			if (!cvjs_SVGHyperLinkCSSAll_Drag){
				cvjs_SVGHyperLinkCSSAll_Drag = true;
				cvjs_SVGHyperLinkCSSAll_XDrag = cvjs_SVGHyperLink_firstFingerX ;
				cvjs_SVGHyperLinkCSSAll_YDrag = cvjs_SVGHyperLink_firstFingerY ;
				
				cvjs_SVGHyperLink_vboxX = viewBox[cvjs_active_floorplan_div_nr].X;
				cvjs_SVGHyperLink_vboxY = viewBox[cvjs_active_floorplan_div_nr].Y;		
			};
			
	
			var testVar = "touchstart "+cvjs_SVGHyperLink_firstFingerX+" "+cvjs_SVGHyperLink_firstFingerY+"  "+cvjs_SVGHyperLinkCSSAll_Drag;
			//alert(testVar);
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
			//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
			console.log("touchstart");
			
			
			var currentHyperlink = this.data("node");			
			cvjs_SVGHyperLinkCSSAll[currentHyperlink][7].attr({fill: highlight_Hyperlinks.fill, "fill-opacity":"0.8" });
	
			var id = cvjs_SVGHyperLinkCSSAll[currentHyperlink][8];

			// We use CADViewer JS tooltip to show the ID

			
					// 3.2.01e
					tip[cvjs_active_floorplan_div_nr].css({ position:'fixed'});
			
			
			var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
			var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
			if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
			//console.log("absolute");
			   tip[cvjs_active_floorplan_div_nr].css("left", cvjs_SVGHyperLink_firstFingerX+document.documentElement.scrollLeft+10).css("top", cvjs_SVGHyperLink_firstFingerY+document.documentElement.scrollTop-25);
			}
			else{  // we have placed CV-JS inside a div and we have to make a relative position
				//console.log("inside");
				tip[cvjs_active_floorplan_div_nr].css("left", cvjs_SVGHyperLink_firstFingerX-position.left+document.documentElement.scrollLeft+10).css("top", cvjs_SVGHyperLink_firstFingerY-position.top+document.documentElement.scrollTop-25);
			}
			tip[cvjs_active_floorplan_div_nr].html(id);
			tip[cvjs_active_floorplan_div_nr].show();

			
		}).touchend(function(e){

			tip[cvjs_active_floorplan_div_nr].hide();

			cvjs_SVGHyperLink_firstFingerX_m = e.touches[0].pageX;
			cvjs_SVGHyperLink_firstFingerY_m = e.touches[0].pageY;	

			if (cvjs_SVGHyperLink_pinch){
				
				cvjs_SVGHyperLink_pinch = false; 	
				cvjs_SVGHyperLink_pinch_touchend = true;

				
				for (i=0; i<cvjs_SVGHyperLinkCSSAll.length; i++){						
					// cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});

					// 3.0.13c
					if (cvjs_SVGHyperLinkCSSAll[i][12]){
						
						cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: cvjs_SVGHyperLinkCSSAll[i][10], "fill-opacity": cvjs_SVGHyperLinkCSSAll[i][11]});
					}
					else
						cvjs_SVGHyperLinkCSSAll[i][7].attr({fill: "#FFFFFF", "fill-opacity":"0.01"});


				}
				
	

			}
			

			var testVar = "touchend "+cvjs_SVGHyperLink_firstFingerX_m+" "+cvjs_SVGHyperLink_firstFingerY_m;
				//alert(testVar);
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				console.log("touchend");

				
				
		
		}).touchmove(function(e){
		
			cvjs_SVGHyperLink_firstFingerX_m = e.touches[0].pageX;
			cvjs_SVGHyperLink_firstFingerY_m = e.touches[0].pageY;	

			// isSmartPhoneOrTablet , coordinates for mouse up
			cvjs_SVGHyperLink_moveX = e.touches[0].pageX;
			cvjs_SVGHyperLink_moveY = e.touches[0].pageY;


			try{
				
				cvjs_SVGHyperLink_secondFingerX_m = e.touches[1].pageX;
				cvjs_SVGHyperLink_secondFingerY_m = e.touches[1].pageY;	
				
				cvjs_SVGHyperLink_pinch = true; 
			
			 	e.stopPropagation();
				e.preventDefault();			

			var testVar = cvjs_SVGHyperLinkCSSAll_Drag+" pinch "+cvjs_SVGHyperLink_pinch+" "+cvjs_SVGHyperLink_firstFingerX_m+" "+cvjs_SVGHyperLink_secondFingerX_m+" "+cvjs_SVGHyperLink_firstFingerY_m+" "+cvjs_SVGHyperLink_secondFingerY_m+" ";
				//alert(testVar);
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
				
			}catch(err){
								
				
			}


			
			var testVar = "touchmove "+(cvjs_SVGHyperLink_firstFingerX_m)+" "+(cvjs_SVGHyperLink_firstFingerY_m-cvjs_SVGHyperLink_firstFingerY);
//			var testVar = "touchmove "+(cvjs_SVGHyperLink_firstFingerX_m-cvjs_SVGHyperLink_firstFingerX)+" "+(cvjs_SVGHyperLink_firstFingerY_m-cvjs_SVGHyperLink_firstFingerY);
				//alert(testVar);
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
					console.log("touchmove");
					
			if (cvjs_SVGHyperLinkCSSAll_Drag){
																
				if (cvjs_SVGHyperLink_pinch){

						cvjs_SVGHyperLink_deltaX =  cvjs_SVGHyperLink_secondFingerX_m - cvjs_SVGHyperLink_firstFingerX_m;
						cvjs_SVGHyperLink_deltaY =  cvjs_SVGHyperLink_secondFingerY_m - cvjs_SVGHyperLink_firstFingerY_m;
				
						cvjs_SVGHyperLink_deltaDynamic = Math.sqrt(cvjs_SVGHyperLink_deltaX*cvjs_SVGHyperLink_deltaX + cvjs_SVGHyperLink_deltaY*cvjs_SVGHyperLink_deltaY);

// no speed increase, removing  13a
/*						
						var deltaP = Math.abs(cvjs_SVGHyperLink_deltaDynamic-cvjs_SVGHyperLink_deltaDynamicPre);

			//var testVar = "tmove "+cvjs_SVGHyperLink_deltaDynamic+" ";
			var testVar = "tmove "+deltaP+" ";
				//alert(testVar);
				cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
				cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});
			var testVar = " "+cvjs_SVGHyperLink_deltaDynamicPre+" "+cvjs_SVGHyperLink_deltaPinchRedraw+"  "+Math.abs(cvjs_SVGHyperLink_deltaDynamic-cvjs_SVGHyperLink_deltaDynamicPre);;
				cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.18, testVar ).attr({fill:"rgb(000,000,250)", stroke:"rgb(000,000,250)", "fill-opacity":"1"});

	*/					
						// only do pinch in increments				
						//if ( deltaP>cvjs_SVGHyperLink_deltaPinchRedraw){
				
							//alert("pinch");
							cvjs_SVGHyperLink_deltaDynamicPre = cvjs_SVGHyperLink_deltaDynamic;
				
							viewBox[cvjs_active_floorplan_div_nr].X = cvjs_SVGHyperLink_vboxX;
							viewBox[cvjs_active_floorplan_div_nr].Y = cvjs_SVGHyperLink_vboxY;

							vBHo = cvjs_SVGHyperLink_viewBoxHeightPre;
							vBWo = cvjs_SVGHyperLink_viewBoxWidthPre;

							viewBoxWidth[cvjs_active_floorplan_div_nr] = cvjs_SVGHyperLink_viewBoxWidthPre;
							viewBoxHeight[cvjs_active_floorplan_div_nr] = cvjs_SVGHyperLink_viewBoxHeightPre;
							viewBoxWidth[cvjs_active_floorplan_div_nr] /= cvjs_SVGHyperLink_deltaDynamic/cvjs_SVGHyperLink_deltaBase;
							viewBoxHeight[cvjs_active_floorplan_div_nr]/= cvjs_SVGHyperLink_deltaDynamic/cvjs_SVGHyperLink_deltaBase;

							viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
							viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;

							
							var testVar = "pinch "+cvjs_SVGHyperLink_deltaDynamic+" "+cvjs_SVGHyperLink_deltaBase+" "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" ";

							zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/rpWidth[cvjs_active_floorplan_div_nr];

							var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
	//console.log("x4 attr_2="+attr_2);
							var json_obj = jQuery.parseJSON(attr_2);
							cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

						//}     13a
				
				}
				else{
								
					console.log("dragging this component");
					testVar = "drag "+cvjs_SVGHyperLink_firstFingerX_m+" "+cvjs_SVGHyperLink_firstFingerY_m+"  "+cvjs_SVGHyperLinkCSSAll_XDrag+" "+cvjs_SVGHyperLinkCSSAll_YDrag;
					console.log(testVar);
					var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
					var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
					var scale = 1;
					if (xscale>yscale) {
						scale = xscale
					}
					else{
						scale = yscale;
					}
					pdx = (cvjs_SVGHyperLink_firstFingerX_m-cvjs_SVGHyperLinkCSSAll_XDrag)*scale;				
					pdy = (cvjs_SVGHyperLink_firstFingerY_m-cvjs_SVGHyperLinkCSSAll_YDrag)*scale;

					viewBox[cvjs_active_floorplan_div_nr].X = cvjs_SVGHyperLink_vboxX  - pdx;
					viewBox[cvjs_active_floorplan_div_nr].Y = cvjs_SVGHyperLink_vboxY  - pdy;
					
					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";
					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);
								
				}

			};
			

			
					
		});

		
		
		cvjs_SVGHyperLinkCSSAll_Org[jj] = new Array();
		cvjs_SVGHyperLinkCSSAll_Org[jj][0] = path_id;
		cvjs_SVGHyperLinkCSSAll_Org[jj][1] = jQuery("#"+path_id).css('fill');
		cvjs_SVGHyperLinkCSSAll_Org[jj][2] = jQuery("#"+path_id).css('fill-opacity');
		cvjs_SVGHyperLinkCSSAll_Org[jj][3] = jQuery("#"+path_id).css('stroke');
		cvjs_SVGHyperLinkCSSAll_Org[jj][4] = jQuery("#"+path_id).css('stroke-width');
		cvjs_SVGHyperLinkCSSAll_Org[jj][5] = jQuery("#"+path_id).css('stroke-opacity');
		cvjs_SVGHyperLinkCSSAll_Org[jj][6] = jQuery("#"+path_id).css('opacity');

		
				
		
		jj++;
		}catch(err){console.log(err);}
	});
	
	
	// 3.0.13b
	// turning the URL layer off, after copy to polygon array
	
/*	
	
		for (id=0; id<layerTable[cvjs_active_floorplan_div_nr].numberOfLayers; id++){
			window.alert("XXX"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layerName+"XXXX"+layerTable[cvjs_active_floorplan_div_nr].layers[id].layer);
		}
*/		
	
	cvjs_LayerOff("URLs");
	
	
		
}


/**
 * Add color to an xlink SVG hyperlinks to have it behave like a dynamic highlight
 * @param {string} hyperlinkId - the <id> element of the xlink hyperlink
 * @param {string} hyperFill - the new fill color, of type #00FF00
 * @param {float} hyperOpacity - the opacity of the fill, a value between 0.0 and 1.0.
 */


function cvjs_colorSingleSVGHyperlink(hyperlinkId, hyperFill, hyperOpacity){

		jQuery("a.hyperlink").each(function(){
		    //do something with the element here.
				var id = jQuery(this).attr('id');
				var pid= "#"+id;

				//console.log("XX"+hyperlinkId+"XX"+id+"XX "+id.indexOf(hyperlinkId)+"  "+hyperlinkId.length+"  "+id.length);

				if (id.indexOf(hyperlinkId)==0 && hyperlinkId.length == id.length  ){

					//console.log("single color: "+id+"  "+pid);
					// find the path id that defines the hyperlink!

					// THIS IS A TMS STRUCTURE WITH A PATH INSIDE THE <A>
					var child = jQuery(this).children();
					var path_id=child[0].id;


					var myPos = -1;
					for (var i=0; i<cvjs_SVGHyperLinkCSSAll.length; i++){
						if (cvjs_SVGHyperLinkCSSAll[i][0] == path_id){
							myPos = i;
							
							// 3.0.13c
							cvjs_SVGHyperLinkCSSAll[myPos][7].attr({fill: hyperFill, "fill-opacity": hyperOpacity })	

							cvjs_SVGHyperLinkCSSAll[myPos][10] = hyperFill;                 // external highlight  3.0.13c
							cvjs_SVGHyperLinkCSSAll[myPos][11] = hyperOpacity;
							cvjs_SVGHyperLinkCSSAll[myPos][12] = true;
							

						}
					}
		
					cvjs_SVGHyperLinkCSSAll[myPos][1] =  hyperFill;
					cvjs_SVGHyperLinkCSSAll[myPos][2] =  hyperOpacity;
					cvjs_SVGHyperLinkCSSAll[myPos][3] =  hyperFill;
					cvjs_SVGHyperLinkCSSAll[myPos][5] =  hyperOpacity;
					cvjs_SVGHyperLinkCSSAll[myPos][6] =  hyperOpacity;

					if (cvjs_debug) console.log("path_id "+path_id+" mypos "+myPos);

					// Update the cvjs_SVGHyperLinkCSSAll Array with the new colors

					cvjs_currentSVGHyperLinkID = path_id;
					var pid="#"+path_id;

					// here we need to use the predefined values
					jQuery(pid).css('fill', hyperFill);
					jQuery(pid).css('fill-opacity', hyperOpacity);
					jQuery(pid).css('stroke', hyperFill);
					jQuery(pid).css('stroke-opacity', hyperOpacity);
					jQuery(pid).css('opacity', hyperOpacity);

					if (cvjs_debug) console.log(id+"  "+pid+" "+hyperFill+"  "+hyperOpacity);

				}
		});
}


/**
 * Reset colors on xlink SVG Hyperlinks. The hyperlinks are typically transparent, but can be controlled to do interactive highlight.-
 */

function cvjs_resetSVGHyperlinkColors(){

		var jj=0;

		jQuery("a.hyperlink").each(function(){
			try{
			var child = jQuery(this).children();
			var path_id=child[0].id;
			cvjs_SVGHyperLinkCSSAll[jj][1] = cvjs_SVGHyperLinkCSSAll_Org[jj][1];
			cvjs_SVGHyperLinkCSSAll[jj][2] = cvjs_SVGHyperLinkCSSAll_Org[jj][2];
			cvjs_SVGHyperLinkCSSAll[jj][3] = cvjs_SVGHyperLinkCSSAll_Org[jj][3];
			cvjs_SVGHyperLinkCSSAll[jj][4] = cvjs_SVGHyperLinkCSSAll_Org[jj][4];
			cvjs_SVGHyperLinkCSSAll[jj][5] = cvjs_SVGHyperLinkCSSAll_Org[jj][5];
			cvjs_SVGHyperLinkCSSAll[jj][6] = cvjs_SVGHyperLinkCSSAll_Org[jj][6];

			// 3.0.13c
			cvjs_SVGHyperLinkCSSAll[jj][7].attr({fill: "FFFFFF", "fill-opacity": 0.01 })						
			
			// no color on object
			cvjs_SVGHyperLinkCSSAll[jj][12] = false;

	
			
			
			jQuery("#"+path_id).css('fill', cvjs_SVGHyperLinkCSSAll[jj][1]);
			jQuery("#"+path_id).css('fill-opacity', cvjs_SVGHyperLinkCSSAll[jj][2]);
			jQuery("#"+path_id).css('stroke', cvjs_SVGHyperLinkCSSAll[jj][3]);
			jQuery("#"+path_id).css('stroke-width', cvjs_SVGHyperLinkCSSAll[jj][4]);
			jQuery("#"+path_id).css('stroke-opacity', cvjs_SVGHyperLinkCSSAll[jj][5]);
			 jQuery("#"+path_id).css('opacity', cvjs_SVGHyperLinkCSSAll[jj][6]);

			jj++;
			}catch(err){console.log(err);}
		});





}


/**
 * Make a legend in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string[]} legendColorArr - Array with the hex colors of the color box associated with each legend text
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {Object} highlight_handles_style_object - object with the styles used for highlight
 */

 function cvjs_makeLegendUpperRightDiv(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerString, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, legendColorArr, floorplan_div, highlight_handles_style_object){

	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
  
	cvjs_makeLegendUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerString, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, legendColorArr, highlight_handles_style_object);
 }




/**
 * Make a legend in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string[]} legendColorArr - Array with the hex colors of the color box associated with each legend text
*/

 function cvjs_makeLegendUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerString, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, legendColorArr){
 
	var x1 = actualLLX[cvjs_active_floorplan_div_nr]+rpWidth[cvjs_active_floorplan_div_nr]*(1+upperRightDeltaX);
	var y1 = actualLLY[cvjs_active_floorplan_div_nr]+rpHeight[cvjs_active_floorplan_div_nr]*(upperRightDeltaY);

	var fontheight = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1 - (rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[0]*1.6), y1, headerString).attr(headerStyle);
	roomLayer.add(txt);
	txt.attr({'font-size' : fontheight});
	txt.attr({'fill' : headerHexColor});
	y1 += fontheight*1.01;

	// headerString, headerStyle, headerScale
	
	var styleString = JSON.stringify(highlight_handles_style_object);
	styleString = styleString.toString();
	var splitString = styleString.split(",");
	var fillopacity_var = 0.5;
	
	for (var i=0; i<splitString.length; i++){
		var styleObject = splitString[i];
		if (styleObject.indexOf('"fill-opacity"')>-1){
			fillopacity_var = styleObject.substring(styleObject.indexOf(':')+1);
			if (fillopacity_var.indexOf('}')>-1)
				fillopacity_var = fillopacity_var.substring(0, fillopacity_var.indexOf('}'));
		}

	}
	fillopacity_var = fillopacity_var.substring(1);
	fillopacity_var = fillopacity_var.substring(0, fillopacity_var.length-1);
	fillopacity_var = Number(fillopacity_var);
	
	for	(i = 0; i < textStringArr.length; i++) {

		var fontheight = rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[i];

		if (i>0) y1 += fontheight*1.05;
		txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1,y1, textStringArr[i]).attr(textStylesArr[i]);
		roomLayer.add(txt);
		txt.attr({'font-size' : fontheight});
		txt.attr({'fill' : hexColorTextArr[i]});

		
		rect = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(x1-(fontheight*1.5), y1 -fontheight*0.75, fontheight*0.8, fontheight*0.8).attr({fill: legendColorArr[i], "fill-opacity": fillopacity_var });  // we are making the opacity similar to the highlight
		roomLayer.add(rect);
	}


	cvjs_addedObjectsToExtents = true;
	cvjs_resetZoomPan();
	
}


	
/**
 * Changes visible text attribute objects on a block, referenced through its block handle
 * @param {string} handle - AutoCAD block handle referecen
 * @param {string[]} textArr - Array with the text objects to be replaced. The lenght of the array determines how many objects are replaced
 */

	
function cvjs_changeText_On_BlockHandle(handle, textArr){

 //window.alert("first in change");
   var oArr = {};
   jQuery(".cvjs_block").each(function() {
	   var id = jQuery(this).attr('id');
	   if (!oArr[id]) oArr[id] = true;
   });


   for (var prop in oArr){
	//console.log("oArr  prop"+prop);
				try{
					var target = "#"+prop;
					var cvjsId = "";
					jQuery(target).each(function() {
					  jQuery.each(this.attributes, function() {
						if(this.specified) {
						  //console.log(this.name, this.value);
						  var cvname = (this.name).toString().toLowerCase();
						  if (cvname == "cvjs:handle")
							cvjsId = this.value;
						  else
							cvjsId = "";
						  if (cvjsId.indexOf(handle)==0){

							var htmlString = jQuery(target).html();
							var idArr = new Array();
							var i = 0;
							while ( htmlString.indexOf("id=")>-1){

								var substring1 = htmlString.substring(htmlString.indexOf("id=")+4);
								var textId = "#"+substring1.substring(0, substring1.indexOf('"'));
								jQuery(textId).text(textArr[i]);
								jQuery(textId).css("visibility","visible");
								htmlString = htmlString.substring(htmlString.indexOf("id=")+4);

								i++;

								if (i==textArr.length) return
							}
							return;
						  }

						}
					  });
					});

				}
				catch(err){
					console.log(err);
				}
			   // alert(prop);
		}
}





/**
 * Changes visible text attribute objects on a block, referenced through its block handle
 * @param {string} handle - AutoCAD block handle reference
 * @param {string[]} textArr - Array with the text objects to be replaced. The lenght of the array determines how many objects are replaced
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @return {boolean} false if handle not found otherwise true
 */
	
function cvjs_changeText_On_BlockHandleDiv(handle, textArr, floorplan_div){


	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

 //window.alert("first in change");
   
   var returnflag = false;
   
   var oArr = {};
   jQuery(".cvjs_block").each(function() {

   		var id = jQuery(this).attr('id');

// new 2018-01-09
		var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
		var svgID = jQuery("#"+id).parents(searchString).attr('id');
		floorplan_div_Array[cvjs_active_floorplan_div_nr]
		
		if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])		
		   if (!oArr[id]) oArr[id] = true;
   });


   for (var prop in oArr){
	//console.log("oArr  prop"+prop);
				try{
					var target = "#"+prop;
					var cvjsId = "";
					jQuery(target).each(function() {
					  jQuery.each(this.attributes, function() {
						if(this.specified) {
						  //console.log(this.name, this.value);
						  var cvname = (this.name).toString().toLowerCase();
						  if (cvname == "cvjs:handle")
							cvjsId = this.value;
						  else
							cvjsId = "";
						  if (cvjsId.indexOf(handle)==0){

							var htmlString = jQuery(target).html();
							var idArr = new Array();
							var i = 0;
							while ( htmlString.indexOf("id=")>-1){

								var substring1 = htmlString.substring(htmlString.indexOf("id=")+4);
								var textId = "#"+substring1.substring(0, substring1.indexOf('"'));
								jQuery(textId).text(textArr[i]);
								jQuery(textId).css("visibility","visible");
								htmlString = htmlString.substring(htmlString.indexOf("id=")+4);
								i++;
//window.alert(i+" here?"+textArr.length);
								returnflag = true;
								if (i==textArr.length) return(true);							
//window.alert(i+" 2 here?"+textArr.length);
							}
							returnflag = true;
//							window.alert("here?");
							return(true);
//							window.alert("after return here?");
						  }

						}
					  });
					});

				}
				catch(err){
					console.log(err);
				}
			   // alert(prop);
		}
		
//window.alert("end of loop "+returnflag);		
	if (returnflag) return (true);
	return(false);	
}



	



/**
 * Make a stamp in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {string} roomLayer - name of layer to draw stamp
 * @param {float} headerScale - Header text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} headerStringArrr - Array with the header text to be displayed on a per line basis
 * @param {object} headerStyle - Style array of the header text
 * @param {string} headerHexColor - Hex color of header text
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string} hexColorFrame - Hex color of the frame
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

 function cvjs_makeStampUpperRightDiv(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerStringArr, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, hexColorFrame, floorplan_div){

	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
 
	window.alert(floorplan_div+" "+cvjs_active_floorplan_div_nr);
 
	cvjs_makeStampUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerStringArr, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr, hexColorFrame);
 }


 
var cvjs_customLayerContentAdded = false;
var cvjs_customLayerContent;
 
/**
 * Make a stamp in the upper right location of the drawings with color codes and text description
 * @param {float} upperRightDeltaX - delta x value, the Legend is moved this relative value to the right of drawing extents, value between 0 and 1
 * @param {float} upperRightDeltaX - delta y value, the Legend is moved this relative value from the top of the drawing extents, value between 0 and 1
 * @param {float[]} scaleTextArr - Array with the legends text heigth, on a per line basis, value between 0 and 1 as the relative value of the drawing height
 * @param {string[]} textStringArr - Array with the legends text to be displayed on a per line basis
 * @param {string[]} textStylesArr- Array with the text styles of each legend
 * @param {string[]} hexColorTextArr - Array with the hex colors on each text legends
 * @param {string[]} legendColorArr - Array with the hex colors of the color box associated with each legend text
 */

 function cvjs_makeStampUpperRight(upperRightDeltaX, upperRightDeltaY,  roomLayer,  headerScale, headerStringArr, headerStyle,  headerHexColor, scaleTextArr, textStringArr, textStylesArr, hexColorTextArr , hexColorFrame){

	var x1 = actualLLX[cvjs_active_floorplan_div_nr]+rpWidth[cvjs_active_floorplan_div_nr]*(1+upperRightDeltaX);
	var y1 = actualLLY[cvjs_active_floorplan_div_nr]+rpHeight[cvjs_active_floorplan_div_nr]*(upperRightDeltaY);
	var y1_base = actualLLY[cvjs_active_floorplan_div_nr]+rpHeight[cvjs_active_floorplan_div_nr]*(upperRightDeltaY);
	

//console.log(x1+" "+y1+" "+y1_base);	


	if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){   // 2018-03-21 
		var bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
		// we have to add the extents of the stamp later
			//indow.alert("bbox is SVG");
		x1 = bbox.x + bbox.width*(1+upperRightDeltaX);
		y1 = bbox.y + bbox.height*(upperRightDeltaY);
		y1_base = bbox.y + bbox.height*(upperRightDeltaY);		
	}

//console.log(x1+" "+y1+" "+y1_base);
	
	
	var fontheightHeader = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	var fontheight = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	var fontheightBase = rpHeight[cvjs_active_floorplan_div_nr]*headerScale;
	var width = rpWidth[cvjs_active_floorplan_div_nr]*(0.2);
	var height = fontheight*1.6;	
	var stampstrokewidth = fontheight*0.1;
	
	if (cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr]){   // 2018-03-21 
		var bbox = cvjs_SVGGroup[cvjs_active_floorplan_div_nr].getBBox();
		// we have to add the extents of the stamp later
			//indow.alert("bbox is SVG");
		fontheightHeader = bbox.height*headerScale;
		fontheight = bbox.height*headerScale;
		fontheightBase = bbox.height;
		width = bbox.width*(0.2);
		height = fontheight*1.5;
	}

//console.log(fontheightHeader+" "+width+" "+height);
		
	var x0 = x1 -(fontheight*0.2);
	var y0 = y1 - (fontheight*1.5);
	
	for	(i = 0; i < headerStringArr.length; i++) {
		txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1, y1, headerStringArr[i]).attr(headerStyle);
		roomLayer.add(txt);
		txt.attr({'font-size' : fontheightHeader*0.95});   // 3.3.01e
		txt.attr({'fill' : headerHexColor});
		y1 += fontheight*1.05;
	}

	
// 3.3.01e 	
// we standardise back from the fontheightHeader
	fontheightBase = fontheightHeader/headerScale;

	
	for	(i = 0; i < textStringArr.length; i++) {
//console.log("text loop "+i+"  "+textStylesArr[i]);
		var fontheight = fontheightBase*scaleTextArr[i];
		if (i>0) y1 += fontheight*1.05;
		for	(j = 0; j < textStringArr[i].length; j++) {
//console.log("textstring "+j+"  "+x1 + fontheight*5*j +"  "+y1+"  "+textStringArr[i][j]+"  "+fontheight);			
			txt = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(x1 + fontheight*5*j , y1 , textStringArr[i][j]).attr(textStylesArr[i]);
			roomLayer.add(txt);
			txt.attr({'font-size' : fontheight*0.95});  // 3.3.01e
			txt.attr({'fill' : hexColorTextArr[i]});
		}
	}


	
	var boundingBoxElement = roomLayer.getBBox();

	var x = boundingBoxElement.x - boundingBoxElement.width*0.02;
	var y = boundingBoxElement.y - boundingBoxElement.height*0.02;
	var width = boundingBoxElement.width * (1.04);
	var height = boundingBoxElement.height * (1.04);

	rect = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(x, y, width, height).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
	roomLayer.add(rect);
		
	y1 = y1_base;
	
	for	(i = 0; i < headerStringArr.length; i++) {

		fontheight = fontheightHeader; // rpHeight[cvjs_active_floorplan_div_nr]*headerScale;  // fontheight is already been calculated
	
		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
//		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: "#FF0000", "fill-opacity":"0.1", fill: "none", "stroke-width": 4});
		roomLayer.add(line);
		y1 += fontheight*1.05;	
	}
	
	var y1first = y1 - fontheight*1.05;
		
	for	(i = 0; i < textStringArr.length-1; i++) {

//		fontheight = rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[i];
		fontheight = fontheightBase*scaleTextArr[i];

		if (i>0) y1 += fontheight*1.05;

		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
//		line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x, y1+(fontheight*0.15), x+width, y1+(fontheight*0.15)).attr({stroke: "#FF0000", "fill-opacity":"0.1", fill: "none", "stroke-width": 4});
		roomLayer.add(line);
				
	}
		
//	if( textStringArr.length==1) fontheight = rpHeight[cvjs_active_floorplan_div_nr]*scaleTextArr[0];
	if( textStringArr.length==1) fontheight = fontheightBase*scaleTextArr[0];

	line = cvjs_rPaper[cvjs_active_floorplan_div_nr].line(x+(fontheight*5), y1first+(fontheight*0.15), x+(fontheight*5) , y+height).attr({stroke: hexColorFrame, "fill-opacity":"0.1", fill: "none", "stroke-width": stampstrokewidth});
	roomLayer.add(line);
				
		
	//layers_all.add(roomLayer);	
	cvjs_customLayerContentAdded = true;				
	cvjs_customLayerContent = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	cvjs_customLayerContent.add(roomLayer);	
		
	cvjs_addedObjectsToExtents = true;
	cvjs_resetZoomPan();
	
}




/**
 * Saves a stamp layer to a file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {object} layer - Layer with custom information , roomLayer
 */
function cvjs_saveStamp(fileName, floorplan_div, layer){

	cvjs_saveCustomSVGLayer(fileName, floorplan_div, layer);
}


/**
 * Saves a custom layer as SVG file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {object} layer - Layer with custom information 
 */
	
function cvjs_saveCustomSVGLayer(fileName, floorplan_div, layer){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	var myStamp = header + layer + "</svg>";		

	var cvjs_phpSaveStampUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	js_data['file'] = fileName;
	js_data['file_content'] = myStamp;

	jQuery.ajax({
	  url:cvjs_phpSaveStampUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save stamp: "+html;
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}


var cvjs_serverSVGtoPDFConverterController = "convert-svg-to-pdf.php"


/**
 * Saves a floorplan with overlays as PDF file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
	
function cvjs_saveFloorplanAsPDF(fileName, floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	
	
	var counter = fileName.lastIndexOf(".");
	
	var svgFile = fileName.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	
if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		if (cvjs_debug) console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = fileName;
		filelist_data['svg_file'] = svgFile;
	
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF file is now created: "+html);
				
				// we have to load again since the folder structure is done
				
				// cvjs_LoadDrawing(floorplan_div, cvjs_currentFileFromJSTreeFolder);
				
				
				
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




/**
 * Saves a floorplan with overlays as PDF file, upload to SharePoint folder
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {string} sharepointFolder - name of SharePoint upload folder
 * @param {string} sharepointUserName - name of SharePointUser
 */
	
function cvjs_saveFloorplanAsPDFtoSharePoint(fileName, floorplan_div, sharepointFolder, sharepointUserName){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
		
	var counter = fileName.lastIndexOf(".");
	
	var svgFile = fileName.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	
	
	// LET US GET THE SAVE MODAL UP
	
	
		jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_4\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.Thumbnails+'</div></td></tr></table>');

		cvjs_setLooperPosition();

		jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(100);
	
	
	
	
if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = fileName;
		filelist_data['svg_file'] = svgFile;
	
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF created on server: "+html);
				
				// here we have to call the upload php method

							
					var finalUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_uploadfile.php";
	
					var filelist_data = {};

					filelist_data['localfilename'] = fileName;
					filelist_data['targetUrl'] = sharepointFolder;   //
					filelist_data['user_name'] = sharepointUserName;
				
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("PDF file is now uploaded to SharePoint server: "+html);
	

							jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();

	
							// We have also updated the path settings
							
							// therefore we must now reload CV-JS
							//window.alert("before reload!");
							location.reload();
															
					  }
					});
					
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




function getByteLen(normal_val) {
    // Force string type
    normal_val = String(normal_val);

    var byteLen = 0;
    for (var i = 0; i < normal_val.length; i++) {
        var c = normal_val.charCodeAt(i);
        byteLen += c < (1 <<  7) ? 1 :
                   c < (1 << 11) ? 2 :
                   c < (1 << 16) ? 3 :
                   c < (1 << 21) ? 4 :
                   c < (1 << 26) ? 5 :
                   c < (1 << 31) ? 6 : Number.NaN;
    }
    return byteLen;
}











/**
 * Saves a floorplan with overlays as SVG file
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
	
function cvjs_saveFloorplanAsSVG(fileName, floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveStampUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	js_data['file'] = fileName;
	js_data['file_content'] = myFloorPlan;

	jQuery.ajax({
	  url:cvjs_phpSaveStampUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
				
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




/**
 * Saves a floorplan with overlays as SVG file
 * @param {string} filePath - location of the files to be merged, server side
 * @param {string} urlPath - url location of the files to be merged
 * @param {string} fileName - name of the pdf document to be merged, _red pdf pages will be merged into a document _red_merged
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
	
function cvjs_mergePDFwithRedlines(filePath, urlPath, fileName, floorplan_div){


	var cvjs_phpMergeUrlLocation = cvjs_serverHandlersPath + cvjs_serverMergePHPFileController;

	var js_data = {};
	js_data['filePath'] = filePath;
	js_data['fileName'] = fileName;

	jQuery.ajax({
	  url:cvjs_phpMergeUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Merged floorplan: "+html;
				
		//if (cvjs_debug) window.alert(status);
		
				var filelocation= urlPath + "/" + fileName+"_merged.pdf";
				var xfilelocation= urlPath + "/" + fileName+"_merged.pdf";

		
				var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);

				var printWindow = window.open('', 'CADViewer JS - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);

//window.alert(printWindow);

				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer JS - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer JS - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

///window.alert(printWindow);
				
				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=

				//printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				//text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

				
				printWindow.document.write('</head><body><div id="pdf">');
				text = text + '</head><body><div id="pdf">';

//				printWindow.document.write('<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>';

				printWindow.document.write('<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>');
				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>';
								
				//console.log(text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();
		
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});

}




/**
 * Loads an stamp file into a custom layer
 * @param {string} fileName - name and path of SVG file to load
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {object} layer - Layer on which to place the file content 
 */

function cvjs_loadStamp(fileName, floorplan_div, layer){


	cvjs_customLayerContentAdded = true;				
	cvjs_customLayerContent = cvjs_rPaper[cvjs_active_floorplan_div_nr].g();
	cvjs_customLayerContent.add(layer);	

	
	cvjs_loadCustomSVGLayer(fileName, floorplan_div, layer);
	
}


/**
 * Loads a SVG file into a custom layer
 * @param {string} fileName - name and path of SVG file to load
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {object} layer - Layer on which to place the file content 
 */
	
function cvjs_loadCustomSVGLayer(fileName, floorplan_div, layer){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
	var SVGLoadFileStamp = "";

	if (cvjs_bitmapFileNameIsServerPath_flag){	
		SVGLoadFileStamp = cvjs_serverHandlersPath + cvjs_serverLoadFileController + "?file=" + fileName;
		}
	else{
		SVGLoadFileStamp = fileName;
	}
	var cvjs_SVGGroup2 = cvjs_rPaper[cvjs_active_floorplan_div_nr].svg(0,0, bbox.width, bbox.height);
	var stampload = Snap.load(SVGLoadFileStamp , function ( myLoadedFragment ) {

				try{
				layer.add(myLoadedFragment);	
				//cvjs_masterBackground[cvjs_active_floorplan_div_nr].after(layer);
				var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
				// window.alert("after stamp bbox.width"+bbox.width);
							
				cvjs_addedObjectsToExtents = true;
				cvjs_resetZoomPan(floorplan_div);
				} catch(err){
					window.alert(err);
				}
				
			} );
}
	


function cvjs_LoadDrawingAborted(floorplan_div, fileName){

console.log("Return call from LoadDrawing, another drawing is currently being loaded, so we wait 1.0 seconds....");	
	// we wait for 0.5 seconds and then we try again......
setTimeout(function(){cvjs_LoadDrawing(floorplan_div,fileName)},1000);
	
}

function cvjs_hideNavigationMenu(mydiv){
var floorplanMenu = "#floatNavigationMenu_"+mydiv+"_svg";
//	window.alert(gMenu);
	if (jQuery(floorplanMenu).is(":visible")){
		jQuery(floorplanMenu).hide();
	}
}

	
		
/**
 * Checks if a RoomID is present on a given floorplan
 * @param {string} rmid - Id of the Space Object to highlight
 * @param {string} floorplan_div - name of the div on which the CADViewerJS instance is placed
 * @return {boolean} false if rmid not found otherwise true
 */

function cvjs_checkRoomHandleDiv(rmid, floorplan_div){
	
	var svgdiv = floorplan_div+"_svg";
	var returnvalue;
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(svgdiv);
	var rm = findFixture(rmid);

	if (rm == -1) 
		return false;
	else	
		return true;
	
	return false;
	
}
	
	
	
/**
 * Checks if a block handle is present on the floorplan
 * @param {string} handle - AutoCAD block handle reference
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @return {boolean} false if handle not found otherwise true
 */
	
function cvjs_checkBlockHandleDiv(handle, floorplan_div){


	floorplan_div = floorplan_div + "_svg";
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

 //window.alert("first in change");
   
   var returnflag = false;
   
   var oArr = {};
   jQuery(".cvjs_block").each(function() {

   		var id = jQuery(this).attr('id');

// new 2018-01-09
		var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
		var svgID = jQuery("#"+id).parents(searchString).attr('id');
		floorplan_div_Array[cvjs_active_floorplan_div_nr]
		
		if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])		
		   if (!oArr[id]) oArr[id] = true;
   });


   for (var prop in oArr){
	//console.log("oArr  prop"+prop);
				try{
					var target = "#"+prop;
					var cvjsId = "";
					jQuery(target).each(function() {
					  jQuery.each(this.attributes, function() {
						if(this.specified) {
						  //console.log(this.name, this.value);
						  var cvname = (this.name).toString().toLowerCase();
						  if (cvname == "cvjs:handle")
							cvjsId = this.value;
						  else
							cvjsId = "";
						  if (cvjsId.indexOf(handle)==0 ){
							 returnflag = true;
							return(true);
						  }

						}
					  });
					});

				}
				catch(err){
					console.log(err);
				}
			   // alert(prop);
		}
		
//window.alert("end of loop "+returnflag);		
	if (returnflag) return (true);
	return(false);	
}
	
	

/**
 * Get the content of all StickyNotes
 * @return {string} stickyNoteContent - xml wrapped content: userid, id, name, date, text, page
 */
function cvjs_getStickyNoteInfo(){


// extract all strickynote information to txt file

	var stickyNoteContent="";
	for (var i=0; i<vqStickyNotes.length; i++){

		if (i>0) stickyNoteContent = stickyNoteContent + "\n";
//			stickyNoteContent = stickyNoteContent+"<StickyNoteNode>"+vqStickyNotes[i].data("node")+"</StickyNoteNode>"+"<StickyNoteUserId>"+vqStickyNotes[i].data("userid")+"</StickyNoteUserId>"+"<StickyNoteId>"+vqStickyNotes[i].data("id")+"</StickyNoteId>"+"<StickyNoteName>"+vqStickyNotes[i].data("name")+"</StickyNoteName>"+"<StickyNoteDate>"+vqStickyNotes[i].data("date")+"</StickyNoteDate>"+"<StickyNoteText>"+vqStickyNotes[i].data("text")+"</StickyNoteText>"+"</StickyNoteDate>"+"<StickyNotePage>"+vqStickyNotes[i].data("currentPage")+"</StickyNotePage>";
			stickyNoteContent = stickyNoteContent+"<StickyNote><UserId>"+vqStickyNotes[i].data("userid")+"</UserId>"+"<Id>"+vqStickyNotes[i].data("id")+"</Id>"+"<Name>"+vqStickyNotes[i].data("name")+"</Name>"+"<Date>"+vqStickyNotes[i].data("date")+"</Date>"+"<Text>"+vqStickyNotes[i].data("text")+"</Text>"+"<Page>"+vqStickyNotes[i].data("currentPage")+"</Page></StickyNote>";
		}

	return stickyNoteContent;

}



/**
 * Saves all stickynote content as - xml wrapped content: userid, id, name, date, text, page
 * @param {string} fileName - name and path of file to save to
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */

function cvjs_saveStickyNoteInfo(fileName, floorplan_div){

// extract all strickynote information to txt file
	var stickyNoteContent="";
	for (var i=0; i<vqStickyNotes.length; i++){

		if (i>0) stickyNoteContent = stickyNoteContent + "\n";
//		stickyNoteContent = stickyNoteContent + vqStickyNotes[i].data("id")+","+vqStickyNotes[i].data("name")+","+vqStickyNotes[i].data("userid")+","+vqStickyNotes[i].data("date")+","+vqStickyNotes[i].data("text");
//		stickyNoteContent = stickyNoteContent+"<StickyNoteNode>"+vqStickyNotes[i].data("node")+"</StickyNoteNode>"+"<StickyNoteUserId>"+vqStickyNotes[i].data("userid")+"</StickyNoteUserId>"+"<StickyNoteId>"+vqStickyNotes[i].data("id")+"</StickyNoteId>"+"<StickyNoteName>"+vqStickyNotes[i].data("name")+"</StickyNoteName>"+"<StickyNoteDate>"+vqStickyNotes[i].data("date")+"</StickyNoteDate>"+"<StickyNoteText>"+vqStickyNotes[i].data("text")+"</StickyNoteText>"+"</StickyNoteDate>"+"<StickyNotePage>"+vqStickyNotes[i].data("currentPage")+"</StickyNotePage>";
//		stickyNoteContent = stickyNoteContent+"<StickyNoteUserId>"+vqStickyNotes[i].data("userid")+"</StickyNoteUserId>"+"<StickyNoteId>"+vqStickyNotes[i].data("id")+"</StickyNoteId>"+"<StickyNoteName>"+vqStickyNotes[i].data("name")+"</StickyNoteName>"+"<StickyNoteDate>"+vqStickyNotes[i].data("date")+"</StickyNoteDate>"+"<StickyNoteText>"+vqStickyNotes[i].data("text")+"</StickyNoteText>"+"</StickyNoteDate>"+"<StickyNotePage>"+vqStickyNotes[i].data("currentPage")+"</StickyNotePage>";
		stickyNoteContent = stickyNoteContent+"<StickyNote><UserId>"+vqStickyNotes[i].data("userid")+"</UserId>"+"<Id>"+vqStickyNotes[i].data("id")+"</Id>"+"<Name>"+vqStickyNotes[i].data("name")+"</Name>"+"<Date>"+vqStickyNotes[i].data("date")+"</Date>"+"<Text>"+vqStickyNotes[i].data("text")+"</Text>"+"<Page>"+vqStickyNotes[i].data("currentPage")+"</Page></StickyNote>";

	}

//window.alert()	
	
	var cvjs_phpSaveUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

	var js_data = {};
	js_data['file'] = fileName;
	js_data['file_content'] = stickyNoteContent;

	jQuery.ajax({
	  url:cvjs_phpSaveUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save stickynote: "+html;
				
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});
	
	
	
	
}

var cvjs_currentRotationAngle = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];

 
/**
 * Rotates an angle based from 0
 * @param {float} angle - rotation angle
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */

function cvjs_rotateAngle(angle, floorplan_div){


	if (angle<-360 || angle>360) return;
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

console.log(floorplan_div+"  "+cvjs_active_floorplan_div_nr);	
	
	
	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
	if (cvjs_debug) console.log("bounding box rpaper "+bbox.x+"  "+bbox.y+" "+bbox.width+" "+bbox.height)
	
	var centerx = (bbox.x+bbox.width/2);		
	var centery = (bbox.y+bbox.height/2);
	
	var Ttrans = "T"+centerx+" "+centery+"0,0R"+angle;
			
	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].attr({
		 transform: Ttrans
	});

	cvjs_masterBackground[cvjs_active_floorplan_div_nr].attr({
		 transform: Ttrans
	});		

	cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] = angle;	
	
	cvjs_zoomExtents(floorplan_div);

}

/**
 * Rotates 90 degrees forward
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */

function cvjs_rotateForward(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var angle = cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] + 90;

	if (angle >= 360 ) angle = 0;
	if (angle <= -360 ) angle = 0;
	
	cvjs_rotateAngle(angle, floorplan_div);
		
}
 

/**
 * Rotates 90 degrees forward
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */

function cvjs_rotateBackward(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	var angle = cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr] - 90;

	if (angle >= 360 ) angle = 0;
	if (angle <= -360 ) angle = 0;

	cvjs_rotateAngle(angle, floorplan_div);

	
}
 
 


 function cvjs_publishPDF(floorplan_div){
	 

	cvjs_setPublishPDF(floorplan_div); 
	 
	 
	 
 }
 
 
 /**
 * Merge redline content into original DWG for re-distribution
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 
 function cvjs_mergeDXFDWG(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	
//	window.alert(cvjs_mergeDXFDWG_downloadMode);
	
	// 3.3.04b
	if (cvjs_mergeDXFDWG_downloadMode)
		cvjs_saveScreenAsMergedDXF(floorplan_div, 4);   // 3.3.04b we add new save mode
	else
		cvjs_setMergeDXF(floorplan_div); 
	 
 }
 
 
 
  
 function cvjs_mergeDXFViaButton(floorplan_div){
	 	 
	// turn off make entire document option if not PDF 	 
	 
	if (radioButton_mergeAsDXF==1){
			
			
		// merge Redline with DWG
		// 3.0.14a				
		var pageOrientation = "landscape";
		var pageSize = "A4";
		var pageResolution = '300';
		// cadviewer JS bitmap to tcpdf
//				cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution);

//		cvjs_saveScreenAsMergedDXF(floorplan_div);
		cvjs_saveScreenAsMergedDXF(floorplan_div, 1);
		

//		cvjs_publishPDF_modal_hide(floorplan_div);
		cvjs_mergeDXF_modal_hide(floorplan_div);
														
	}


	if (radioButton_mergeAsDXF==2){
		
		if (!cvjs_mailServerSetup){
			window.alert("Please set up e-mail server.");
		}
		else{
						
				cvjs_to_mail = jQuery("#cvjs_publishPDFemailrecipient_"+floorplan_div).val();
				cvjs_mail_title = jQuery("#cvjs_publishPDFemailtitle_"+floorplan_div).val();
				cvjs_mail_message =jQuery("#pdfmail_text").val();

				// SVG export and PDFBox /Batik process
//				cvjs_emailScreenAsPDFwithRedlines(floorplan_div);
				

				//  change to intern tcpdf
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
//				cvjs_saveScreenAsPDF_email(pageOrientation, pageSize, pageResolution, floorplan_div);

//				cvjs_saveScreenAsMergedDXF_email(floorplan_div);
				cvjs_saveScreenAsMergedDXF(floorplan_div, 2);
		
				
//				cvjs_publishPDF_modal_hide(floorplan_div);			
				cvjs_mergeDXF_modal_hide(floorplan_div);			
		}
		
	}
	
	if (radioButton_mergeAsDXF==3){

	
			var dateFlag = true;
					
				// SVG export and PDFBox /Batik process
//			saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag)
				

				//  change to intern tcpdf
				// 3.0.14b				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
//				cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div);


				//cvjs_saveScreenAsMergedDXF_uploadServer(floorplan_div);
				cvjs_saveScreenAsMergedDXF(floorplan_div, 3);

	
			
			cvjs_mergeDXF_modal_hide(floorplan_div);
//			cvjs_publishPDF_modal_hide(floorplan_div);

		
		// 3.2.01d  // we are calling it anyway
		if (cvjs_fileLoadingFromSharePointServer){			

		}
		else{
			
			
			
			
		//	window.alert("Server upload only implemented as part of Sharepoint server integration");			
		
		
		
		
		
		}
	
	}	
	
	
 }
 


 
 function cvjs_saveScreenAsMergedDXF(floorplan_div, mode){
	 
	 
	jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_4\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.MergeDWG+'</div></td></tr></table>');
	cvjs_setLooperPosition();	
	//window.alert("after waitlooper");
	// 4.1.02b
	jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(10);
	 
	 
	// save redline as XML
	//window.alert("save Redline as XML");
	
	var random = Math.random().toString().substring(2,5);
	var merge_fileName = 'merge_'+random+'.xml';

	cvjs_setStickyNoteSaveRedlineUrl(cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName);	

	var dataUrl = "";
	dataUrl=cvjs_getStickyNotesRedlineXML(false);  //4.1.02a

	console.log(dataUrl);	
		
	var cvjs_phpSaveRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;
// 2016-10-25
	if (cvjs_StickyNoteSaveRedlineUrl.indexOf("\\")>-1){
		// do nothing
	}
	else{
		cvjs_StickyNoteSaveRedlineUrl = encodeURIComponent(cvjs_StickyNoteSaveRedlineUrl)
	}

	var js_data = {};
	js_data['file'] = cvjs_StickyNoteSaveRedlineUrl;
	js_data['file_content'] = dataUrl;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

	jQuery.ajax({
	  url:cvjs_phpSaveRedlineUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){

			var serverPath = "";
			var myUploadFile = "";
			var myDownloadFile = "";
	
// move this up		3.2.01d	
			var currentdate = new Date();
			var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

			var month = "jan";
			var hours = currentdate.getHours(); 
			
			if (hours<10) hours = "0"+hours;
			switch(currentdate.getMonth()) {
				case 0:
					month = "Jan";
					break;
				case 1:
					month = "Feb";
					break;
				case 2:
					month = "Mar";
					break;
				case 3:
					month = "Apr";
					break;
				case 4:
					month = "May";
					break;
				case 5:
					month = "Jun";
					break;
				case 6:
					month = "Jul";
					break;
				case 7:
					month = "Aug";
					break;
				case 8:
					month = "Sep";
					break;
				case 9:
					month = "Oct";
					break;
				case 10:
					month = "Nov";
					break;
				case 11:
					month = "Dec";
					break;
				default:
					month = "Jan";
			}							
			var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();

		
// determine paths,based on either sharepoint server, folder tree, or basic scenario
	 
	 	 
			if (cvjs_fileLoadingFromSharePointServer){
				if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
					serverPath = "";
					myUploadFile = cvjs_currentFileFromJSTreeFolder;
				}
				else{
					serverPath = cvjs_currentFileFromJSTreeFolder.substring(0,cvjs_currentFileFromJSTreeFolder.lastIndexOf("/"));
					myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
				}
				
								
					// 3.2.01d			
				if (!cvjs_fileLoadingFromSharePointServer){
					myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
				}
			
				
				console.log(myUploadFile+" "+serverPath);
				
				myDownloadFile = myUploadFile;


				var extension = myUploadFile.substring(myUploadFile.lastIndexOf("."));
				myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));						

				myUploadFile = myUploadFile + "_red_"+datetime+extension;
			
				console.log("download file: "+myDownloadFile +" upload file: "+ myUploadFile);				

			}
			else{	
				// 3.2.01d   - here we have to find all the paths in the other cases.
				// here we copy the original file over to the merge folder and then we do to overlay from there....
				
				///XXXXX  MERGE CASE FOR ALL NON SHAREPOINT CASES
				
					myDownloadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
//					var localdestination = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0,cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);   //

					// copy file over!
//				window.alert(myUploadFile+"  "+localdestination);					
					// not done here
					myUploadFile = myDownloadFile.substring(0,myDownloadFile.lastIndexOf(".")) + "_red_"+datetime+myDownloadFile.substring(myDownloadFile.lastIndexOf(".")) ;
	
	
	
	
		// NEW NEW NEW
					// 3.3.05a  - if mode == 4, we do not copy drawing but simply use the source folder 	
// Note this works with absolute paths Servlet, relative paths are OK on Php
					if (mode == 4){
				
						var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
						var js_data = {};
						js_data['base_file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
						
						if(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]==""){		
							js_data['base_file'] = currentLoadedDrawingFullName; 
						}			
												
						js_data['merge_file'] = cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName;
						js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;

						
						
						if (cvjs_debug) console.log(js_data['base_file']+"  "+js_data['merge_file']+"  "+js_data['out_file'] );
						

						// 4.1.02b 
						js_data['zip_output'] = "false";
						js_data['QR_code'] = "false";


						
						
						jQuery.ajax({
						  url:cvjs_phpMergeLocation,
						  type: 'post',
						  data: js_data,
						  success: function(html){

							if (cvjs_debug) console.log("callback from merge:"+html);
							if (cvjs_debug) console.log("mode 4");
	

							// 4.1.02b  - standard case 
							var downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+myUploadFile;
					
							var downloadFileName = myUploadFile;
							if (downloadFileName.indexOf('/')>-1) 
								downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);

							// 4.1.02b  - custom name
							if (html.indexOf("<customoutfilename>")>-1){								
								var new_name = html.substring(html.indexOf("<customoutfilename>")+19);  // 4.1.01j
								new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));												
								// 4.1.02a   4.1.02b												
								// we have two cases, call back is http / https , or just filename
								if (new_name.indexOf("http")==0){   // newname = url
									downloadURL = new_name;
									downloadFileName = new_name.substring(new_name.lastIndexOf("/")+1);
								}
								else{  // standard case   new_name = filename
									downloadFileName = new_name;
									downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
								}
								
								if (cvjs_debug) console.log("XXXX"+new_name+"XXX");		
							}

/***  4.1.02b	 - remove code
								if (html.indexOf("<customoutfilename>")==0){
								
									var new_name = html.substring(19);
									new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));
									myUploadFile = new_name;		
									console.log("XXXX"+new_name+"XXX");		
								}
					
								var downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+myUploadFile;
						
								var downloadFileName = myUploadFile;
								if (downloadFileName.indexOf('/')>-1) 
									downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);
**/							


								jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
								cvjs_topDownloadButtonPane = true;	
								
							  
	//											  window.alert("downloadFileName "+downloadFileName);
											  
								jQuery("#downloadrow").show();
								jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with Redlines</button></a>');   // </div>
								
								jQuery("#downloadbutton").click(function() {
									jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
									cvjs_topDownloadButtonPane = false;		
									cvjs_resizeWindow_position("floorPlan" );
									cvjs_resizeWindow_position("floorPlan" );
									cvjs_mergeOnOff = false;						
								});

								cvjs_resizeWindow_position("floorPlan" );
								cvjs_resizeWindow_position("floorPlan" );


// not hide wait!								
								jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
								
								},
								 error:function(data_e){console.log("Error "+data_e); return;}
								});		
								// we return mode=4
								return;
							}
// 3.3.05a mode 4  - return 
		
	

	
	
					var finalUrl = cvjs_serverHandlersPath + cvjs_serverCopyFileController;
					var filelist_data = {};

					filelist_data['localfilename'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
					filelist_data['localdestination'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
														
	console.log("fileName "+filelist_data['localfilename']+"  "+filelist_data['localdestination']);
		
				
					// copy source dwg over to /filers/merged/ folder
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("Drawing file is now copied: "+html);
													
								var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
								var js_data = {};
								js_data['base_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
								js_data['merge_file'] = cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName;
								js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;

								jQuery.ajax({
								  url:cvjs_phpMergeLocation,
								  type: 'post',
								  data: js_data,
								  success: function(html){

									console.log("callback from merge servlet:"+html);
																
									if (mode == 1){
										
										// download document
										//window.alert("out_file created  in merge folder.   download document");
											
										var cvjs_phpLoadLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
										var js_data = {};
										js_data['file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
								//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
										jQuery.ajax({
										  url:cvjs_phpLoadLocation,
										  type: 'post',
										  data: js_data,
										  success: function(html){

												download_link(myUploadFile, html);

												jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
											
										  
												},
										 error:function(data_e){console.log("Error "+data_e); return;}
										});		
									}


									
									//  3.3.04b
									if (mode == 4){	
if (cvjs_debug) console.log("mode 4");

												var downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+myUploadFile;										
												var downloadFileName = myUploadFile;
												if (downloadFileName.indexOf('/')>-1) 
													downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);

												jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
												cvjs_topDownloadButtonPane = true;	
																							  
//											  window.alert("downloadFileName "+downloadFileName);
											  											  
												jQuery("#downloadrow").show();
												jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with Redlines</button></a>');   // </div>
												
												jQuery("#downloadbutton").click(function() {
													jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
													cvjs_topDownloadButtonPane = false;		
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_mergeOnOff = false;						
												});

												cvjs_resizeWindow_position("floorPlan" );
												cvjs_resizeWindow_position("floorPlan" );
																								
												jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
												

									}


									

									if (mode == 2){
										
										// download document
										// window.alert("out_file created  in merge folder.  - email document");

												var filelist_data = {};
												filelist_data['pdf_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
												filelist_data['pdf_file_name'] = myUploadFile ;  // myfolderFile;									
												filelist_data['from_name'] = cvjs_from_name;
												filelist_data['from_mail'] = cvjs_from_mail;
												filelist_data['cc_mail'] = cvjs_cc_mail;
												filelist_data['replyto'] = cvjs_replyto;
												
												
												// replace , with ;
												cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
									

												cvjs_to_mail = jQuery("#cvjs_mergeDXFemailrecipient_"+floorplan_div).val();
												cvjs_mail_title = jQuery("#cvjs_mergeDXFemailtitle_"+floorplan_div).val();
												cvjs_mail_message =jQuery("#mergedxfmail_text").val();


									
												filelist_data['to_mail'] = cvjs_to_mail;
												filelist_data['mail_title'] = cvjs_mail_title;
												filelist_data['mail_message'] = cvjs_mail_message;
												
												
												console.log(filelist_data['pdf_file']+"  "+filelist_data['pdf_file_name']+" "+filelist_data['to_mail']+" "+filelist_data['mail_message']);
												
												var cvjs_phpSendDWGEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
										

								//window.alert(filelist_data['pdf_file']);
								//if (true) return;
										
												jQuery.ajax({
												  url:cvjs_phpSendDWGEmail,
												  type: 'post',
												  data: filelist_data,
												  success: function(html){

												  
														jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
												  
												  
														window.alert("e-mail sent!  "+html);

														
														
														
														}
													});
				
									}
									
									if (mode == 3){
		

										var finalUrl = cvjs_serverHandlersPath + cvjs_serverCopyFileController;
										var filelist_data = {};
					//				3.2.01d

										filelist_data['localfilename'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;;
										filelist_data['localdestination'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0,cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1)+myUploadFile;
																										
										jQuery.ajax({
										  url:finalUrl,
										  type: 'post',
										  data: filelist_data,
										  success: function(html){
												if (cvjs_debug) console.log("Merged DWG file is now moved: "+html);

												jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
								
										  }
										});
									
								}
															
							  },
							  error:function(data_e){console.log("Error "+data_e); return;}
							});													
					  }
					});
			
			
				///XXXXX   UP-UP-UP     MERGE CASE FOR ALL NON SHAREPOINT CASES

				//3.2.01d  -> here we actually return!!!!  , we are done in this case
				return;
			}



			//3.2.01d  This is for Sharepoint only!  
				
			// make the file names for the merge document, and make merge document
			console.log("XML redline saved, download original file from sharepoint server   ");
			
			// here we have to download from sharepoint the myDownloadFile

			var cvjs_phpDownloadLocation = cvjs_serverHandlersPath + cvjs_serverDownloadSharepointController;
			var js_data = {};
			js_data['content_location'] = serverPath+"/"+myDownloadFile;
			js_data['local_path'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
			js_data['content_username'] = cvjs_sharepoint_UserName;
			
			jQuery.ajax({
			  url:cvjs_phpDownloadLocation,
			  type: 'post',
			  data: js_data,
			  success: function(html){
				console.log(html);
											
				// we have downloaded the file into the /merged/ folder, now we want to do the overlay 

					console.log("downloaded from Sharepoint!");
	
					var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
					var js_data = {};
					js_data['base_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myDownloadFile;
					js_data['merge_file'] = cvjs_ServerLocation+"/converters/files/merged/"+merge_fileName;
					js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;

					jQuery.ajax({
					  url:cvjs_phpMergeLocation,
					  type: 'post',
					  data: js_data,
					  success: function(html){

						console.log(html);
													
						if (mode == 1){
							
							// download document
							//window.alert("out_file created  in merge folder.   download document");
								
							var cvjs_phpLoadLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
							var js_data = {};
							js_data['file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
					//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
							jQuery.ajax({
							  url:cvjs_phpLoadLocation,
							  type: 'post',
							  data: js_data,
							  success: function(html){

									download_link(myUploadFile, html);

									jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
									
							  
									},
							 error:function(data_e){console.log("Error "+data_e); return;}
							});		
						}
						

						if (mode == 2){
							
							// download document
							// window.alert("out_file created  in merge folder.  - email document");

									var filelist_data = {};
									filelist_data['pdf_file'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
									filelist_data['pdf_file_name'] = myUploadFile ;  // myfolderFile;									
									filelist_data['from_name'] = cvjs_from_name;
									filelist_data['from_mail'] = cvjs_from_mail;
									filelist_data['cc_mail'] = cvjs_cc_mail;
									filelist_data['replyto'] = cvjs_replyto;
									
									
									// replace , with ;
									cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
						

									cvjs_to_mail = jQuery("#cvjs_mergeDXFemailrecipient_"+floorplan_div).val();
									cvjs_mail_title = jQuery("#cvjs_mergeDXFemailtitle_"+floorplan_div).val();
									cvjs_mail_message =jQuery("#mergedxfmail_text").val();


						
									filelist_data['to_mail'] = cvjs_to_mail;
									filelist_data['mail_title'] = cvjs_mail_title;
									filelist_data['mail_message'] = cvjs_mail_message;
									
									
									console.log(filelist_data['pdf_file']+"  "+filelist_data['pdf_file_name']+" "+filelist_data['to_mail']+" "+filelist_data['mail_message']);
									
									var cvjs_phpSendDWGEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
							

					//window.alert(filelist_data['pdf_file']);
					//if (true) return;
							
									jQuery.ajax({
									  url:cvjs_phpSendDWGEmail,
									  type: 'post',
									  data: filelist_data,
									  success: function(html){

									  
											jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
									  
									  
											window.alert("e-mail sent!  "+html);

											
											
											
											}
										});
	
						}
						
						if (mode == 3){
							
							// download document
							//window.alert("out_file created  in merge folder.  - upload document");


							var finalUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_uploadfile2.php";
							var filelist_data = {};

							filelist_data['localfilename'] = cvjs_ServerLocation+"/converters/files/merged/"+myUploadFile;
							filelist_data['targetUrl'] = serverPath;   //
							filelist_data['user_name'] = cvjs_sharepoint_UserName;
							filelist_data['file_name'] = myUploadFile;
								
			console.log ("  "+serverPath+"  "+cvjs_sharepoint_UserName+"  "+myUploadFile);

							jQuery.ajax({
							  url:finalUrl,
							  type: 'post',
							  data: filelist_data,
							  success: function(html){
									if (cvjs_debug) console.log("PDF file is now uploaded to SharePoint server: "+html);


									jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();


									// We have also updated the path settings
									
									// therefore we must now reload CV-JS
									//window.alert("before reload!");
									
									
									location.reload();
																	
							  }
							});
			
			




							
						}
						
						
					
					  },
					  error:function(data_e){console.log("Error "+data_e); return;}

					});


			
											
				
			
			  },
			  error:function(data_e){console.log("Error "+data_e); return;}

			});
					 
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});





	 
	 
 }
 

 function  cvjs_saveScreenAsMergedDXF_email(floorplan_div){
	 
	 
	// save redline as XML
	window.alert("save Redline as XML");

	// make the file names for the merge document, and make merge document
	window.alert("make Merge document");

	
	// download document
	window.alert("email document");
	 
	 
 }
 

 function  cvjs_saveScreenAsMergedDXF_uploadServer(floorplan_div){
	 
	 
	// save redline as XML
	window.alert("save Redline as XML");

	// make the file names for the merge document, and make merge document
	window.alert("make Merge document");

	
	// download document
	window.alert("upload to sharepoint server");
	 
	 
 }
 
 
 
 
 				

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 function cvjs_publishPDFViaButton(floorplan_div){
	 
	 
	// turn off make entire document option if not PDF 
	 
	 
	if (radioButton_publishAsPDF==1){
			
			
//window.alert("creation mode "+cvjs_makePDFEntireDoc);
			
		if (!cvjs_makePDFEntireDoc){  // standard single page creation

		
				// SVG export and PDFBox /Batik process
				//cvjs_printScreenAsPDFwithRedlines(floorplan_div);
				
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
				cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution);

				
				cvjs_publishPDF_modal_hide(floorplan_div);
		}
		else{   // if PDF we create entire document		
				// 3.0.13e
			if (cvjs_preConversionFileExtension[cvjs_active_floorplan_div_nr].indexOf("pdf")==0 && cvjs_customPdfFolderFlag){    // is this correct?   dont think so
		
				var fileName = cvjs_last_FileName_PDF;

					
				var pathname = ServerLocation + "/converters/files/pdf/custom_"+cvjs_customPdfFolderName;
				var urlname = ServerUrl + "/converters/files/pdf/custom_"+cvjs_customPdfFolderName;

				
				// find the filename-red_s1
				var fname = fileName; 
				var fnameExt =fileName.substring(fileName.lastIndexOf(".")+1);
				// extract the file itself
				fname = fname.substring(fname.lastIndexOf("/")+1,fname.lastIndexOf("."));		
				fname = fname +"_red";

				//window.alert("cvjs_publish "+pathname+" "+urlname+"  "+fname);

				cvjs_mergePDFwithRedlines(pathname, urlname, fname,  "floorPlan1");
		
			}
			else{  // we publish current page
			
				// message + fadeOut
				
				// !!
			
				// SVG export and PDFBox /Batik process
				//cvjs_printScreenAsPDFwithRedlines(floorplan_div);
				
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
				cvjs_saveScreenAsPDF(pageOrientation, pageSize, pageResolution);


				cvjs_publishPDF_modal_hide(floorplan_div);
				
								
			}
			
		}
			
			
	}


	if (radioButton_publishAsPDF==2){
		
		if (!cvjs_mailServerSetup){
			window.alert("Please set up e-mail server.");
		}
		else{
						
				cvjs_to_mail = jQuery("#cvjs_publishPDFemailrecipient_"+floorplan_div).val();
				cvjs_mail_title = jQuery("#cvjs_publishPDFemailtitle_"+floorplan_div).val();
				cvjs_mail_message =jQuery("#pdfmail_text").val();

				// SVG export and PDFBox /Batik process
//				cvjs_emailScreenAsPDFwithRedlines(floorplan_div);
				

				//  change to intern tcpdf
				// 3.0.14a				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
				cvjs_saveScreenAsPDF_email(pageOrientation, pageSize, pageResolution, floorplan_div);


				
				
				cvjs_publishPDF_modal_hide(floorplan_div);			
		}
		
	}
	
	if (radioButton_publishAsPDF==3){

		if (cvjs_fileLoadingFromSharePointServer){			
			var dateFlag = true;
			
			
				// SVG export and PDFBox /Batik process
//			saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag)
				

				//  change to intern TCPDF
				// 3.0.14b				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
				cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div);
			
			
			
			
				cvjs_publishPDF_modal_hide(floorplan_div);
		}
		else{
			
				// Added 3.1.21c
			
			
				// SVG export and PDFBox /Batik process
//			saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag)
				

				//  change to intern TCPDF
				// 3.0.14b				
				var pageOrientation = "landscape";
				var pageSize = "A4";
				var pageResolution = '300';
				// cadviewer JS bitmap to tcpdf
				cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div);
			
			
				cvjs_publishPDF_modal_hide(floorplan_div);
			
				// 3.1.21c we supress this message and run through the process
			
				//window.alert("Server upload only implemented as part of Sharepoint server integration");			
		}
	
	}	
	
	
 }
 

/**
 * Captures the screen image and creates a single page PDF, which is uploaded to Sharepoint server
 * @param {string} pageOrientation - Orientation of drawings: landscape/portrait
 * @param {string} pageSize - Papersize of drawing
 * @param {string} pageResolution - Page resolution in dpi, default is 300
 * @param {string} floorplan_div - div on which CADViewer JS is places
 */
function cvjs_saveScreenAsPDF_uploadServer(pageOrientation, pageSize, pageResolution, floorplan_div){

	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

		
	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

	var random = Math.random().toString().substring(2,5);
	var image_fileName = 'screendump_'+random+'.png';

	cvjs_singleDrawingFile = 'screendump_'+random;
	cvjs_singlePageOrientation = pageOrientation;
	cvjs_singlePageSize = pageSize;
	cvjs_singlePageResolution= pageResolution;

	// set the print mode to single page pdf
	cvjs_serverSavePrintModeController = 5;

	if (cvjs_serverSavePrintModeController == 5){

		jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_4\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');


		cvjs_setLooperPosition();
		

	//window.alert("after waitlooper");
		jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1500);

	}


	var serverPath;
/*
	if (cvjs_printObjectPathRelativeFlag){
		serverPath = cvjs_printObjectPath;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
	else{
		serverPath = cvjs_printObjectPathAbsoluteServer;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
*/
	// 3.2.01d
	if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){

		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}

	}
	else{  // servlet or other path controllers 3.2.01d
		
		serverPath = cvjs_ServerLocation  + "/converters/files/";

	}
	
	
	//window.alert(serverPath+"  "+image_fileName)
	cvjs_saveScreenAsImage(serverPath, image_fileName);

}

 
 
 
 
 
 
 
/**
 * Captures the screen image and creates a single page PDF, which is attached to email
 * @param {string} pageOrientation - Orientation of drawings: landscape/portrait
 * @param {string} pageSize - Papersize of drawing
 * @param {string} pageResolution - Page resolution in dpi, default is 300
 * @param {string} floorplan_div - div on which CADViewer JS is places
 */
function cvjs_saveScreenAsPDF_email(pageOrientation, pageSize, pageResolution, floorplan_div){

	cvjs_setPrintPaperSize(pageSize);
	cvjs_setPrintOrientation(pageOrientation);
	cvjs_setPrintResolutionDpi(pageResolution);

	var random = Math.random().toString().substring(2,5);
	var image_fileName = 'screendump_'+random+'.png';

	cvjs_singleDrawingFile = 'screendump_'+random;
	cvjs_singlePageOrientation = pageOrientation;
	cvjs_singlePageSize = pageSize;
	cvjs_singlePageResolution= pageResolution;

	// set the print mode to single page pdf
	cvjs_serverSavePrintModeController = 4;

	if (cvjs_serverSavePrintModeController == 4){

		jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_4\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.Printing+'</div></td></tr></table>');


		cvjs_setLooperPosition();
		

	//window.alert("after waitlooper");
		jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1500);

	}


	var serverPath;

/**	
	if (cvjs_printObjectPathRelativeFlag){
		serverPath = cvjs_printObjectPath;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
	else{
		serverPath = cvjs_printObjectPathAbsoluteServer;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
**/
	
	
	// 3.2.01d
	if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){

		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}

	}
	else{  // servlet or other path controllers 3.2.01d
		
		serverPath = cvjs_ServerLocation  + "/converters/files/";

	}
	
	
	
	
	//window.alert(serverPath+"  "+image_fileName)
	cvjs_saveScreenAsImage(serverPath, image_fileName);

}


function cvjs_printSavedBitmapToPDF_uploadServer(){


// BBBBBBBBBB
// make create batch pdf modal

//window.alert("wait "+lTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF);

//	cvjs_phpImagesUrlController = cvjs_phpPath  + "/tcpdf/batchconvert/"  + cvjs_screenToPDF_Controller



	var serverPath;

/*	
	if (cvjs_printObjectPathRelativeFlag){
		serverPath = cvjs_printObjectPath;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
	else{
		serverPath = cvjs_printObjectPathAbsoluteServer;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
*/


	// 3.2.01c
	if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){

		cvjs_phpImagesUrlController = cvjs_phpPath  + "/tcpdf/batchconvert/"  + cvjs_screenToPDF_Controller

		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}

	}
	else{  // servlet or other path controllers 3.2.01d
		
		cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_screenToPDF_Controller
		serverPath = cvjs_ServerLocation  + "/converters/files/" ;
		
	}

	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['numberOfFiles'] = 1;
	
		
	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;


	cvjs_serverSave_php_controllerArray['fileName_0'] = cvjs_singleDrawingFile ;
	cvjs_serverSave_php_controllerArray['rotation_0'] = cvjs_singlePageOrientation;
	cvjs_serverSave_php_controllerArray['page_format_0'] = cvjs_singlePageSize;
	cvjs_serverSave_php_controllerArray['page_resolution_0'] = cvjs_singlePageResolution;

	cvjs_serverSave_php_controllerArray['org_fileName_0'] = cvjs_FileNameNoExtension ;

//window.alert("org_fileName_0 "+cvjs_serverSave_php_controllerArray['org_fileName_0']);


	jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_5\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

	cvjs_setLooperPosition();
	
	jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1000);

	jQuery.ajax({
	  url:cvjs_phpImagesUrlController,
	  type: 'post',
	  data: cvjs_serverSave_php_controllerArray,
	  success: function(html){
			//window.alert(html+"  we have now created the single page pdf");
			cvjs_serverSavePrintModeController = 0;
			jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			// hide modal
//				printWindow = window.open(cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html, 'CADViewer JS - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);

				// calculate file-name
		
				var currentdate = new Date();
				var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

				var month = "jan";
				var hours = currentdate.getHours(); 
				
				if (hours<10) hours = "0"+hours;
				switch(currentdate.getMonth()) {
					case 0:
						month = "Jan";
						break;
					case 1:
						month = "Feb";
						break;
					case 2:
						month = "Mar";
						break;
					case 3:
						month = "Apr";
						break;
					case 4:
						month = "May";
						break;
					case 5:
						month = "Jun";
						break;
					case 6:
						month = "Jul";
						break;
					case 7:
						month = "Aug";
						break;
					case 8:
						month = "Sep";
						break;
					case 9:
						month = "Oct";
						break;
					case 10:
						month = "Nov";
						break;
					case 11:
						month = "Dec";
						break;
					default:
						month = "Jan";
				}
				
				
				var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
				
				var serverPath = "";
				var myUploadFile = "";
				if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
					serverPath = "";
					myUploadFile = cvjs_currentFileFromJSTreeFolder;
				}
				else{
					serverPath = cvjs_currentFileFromJSTreeFolder.substring(0,cvjs_currentFileFromJSTreeFolder.lastIndexOf("/"));
					myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
				}
		

				// 3.2.01d			
				if (!cvjs_fileLoadingFromSharePointServer){
					myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
				}

		
				myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));
				
				
				var dateFlag = true;
				
				if (dateFlag){
					myUploadFile = myUploadFile + "_red_"+datetime+".pdf";
				}
				else{
					myUploadFile = myUploadFile + "_red.pdf";
				}
				

				// 3.2.01d
				if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){
					fileName = cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html;				
				}
				else{  // servlet or other path controllers 3.2.01d
					fileName =  cvjs_ServerLocation  + "/converters/files/" + html ;
				
				}													
//				fileName = cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html;				

				fileName = fileName.substring(0, fileName.indexOf(".html")) + ".pdf";

				
///   3.1.21c, here we can add flags to control where to upload to server.

				
				
				
				if (!cvjs_fileLoadingFromSharePointServer){
				// 3.1.21c

				// COPY TO ANOTHER FOLDER ON SAME SERVER STRUCTURE
				// READ FROM JSTREE STRUCTURE
				// COPY TO ANOTHER FOLDER ON A DIFFERENT SERVER STRUCTURE

					var finalUrl = cvjs_serverHandlersPath + cvjs_serverCopyFileController;
					var filelist_data = {};
					
//					var localdestination = cvjs_filepathServer+fileName.substring(fileName.lastIndexOf("/")+1);   //
					var localdestination = cvjs_filepathServer+cvjs_getCurrentMultiPage_FileName()+myUploadFile;   //

//				3.2.01d
					var localdestination = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0,cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1)+cvjs_getCurrentMultiPage_FileName()+myUploadFile;   //
					
					filelist_data['localfilename'] = fileName;
					filelist_data['localdestination'] = localdestination;
														
	console.log("fileName "+fileName+"  "+localdestination);
		
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("PDF file is now moved: "+html);

							jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();


							// We have also updated the path settings
							
							// therefore we must now reload CV-JS
							//window.alert("before reload!");
															
					  }
					});
			


					
				}
				else{				
				
					// UPLOAD TO SHAREPOINT SERVER
					
					var finalUrl = cvjs_serverHandlersPath + "CV-JS_sharepoint_uploadfile2.php";
					var filelist_data = {};

					filelist_data['localfilename'] = fileName;
					filelist_data['targetUrl'] = serverPath;   //
					filelist_data['user_name'] = cvjs_sharepoint_UserName;
					filelist_data['file_name'] = myUploadFile;
						

	console.log ("fileName "+fileName+"  "+serverPath+"  "+cvjs_sharepoint_UserName+"  "+myUploadFile);

						
					jQuery.ajax({
					  url:finalUrl,
					  type: 'post',
					  data: filelist_data,
					  success: function(html){
							if (cvjs_debug) console.log("PDF file is now uploaded to SharePoint server: "+html);


							jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();


							// We have also updated the path settings
							
							// therefore we must now reload CV-JS
							//window.alert("before reload!");
							
							
							location.reload();
															
					  }
					});
			
						
				}
				
		


	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});

}







function cvjs_printSavedBitmapToPDF_email(){

// BBBBBBBBBB
// make create batch pdf modal

//window.alert("wait "+lTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF);
	
	var serverPath;

/**	
	cvjs_phpImagesUrlController = cvjs_phpPath  + "/tcpdf/batchconvert/"  + cvjs_screenToPDF_Controller
	if (cvjs_printObjectPathRelativeFlag){
		serverPath = cvjs_printObjectPath;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
	else{
		serverPath = cvjs_printObjectPathAbsoluteServer;
		serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
	}
**/	
	
	// 3.2.01c
	if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){

		cvjs_phpImagesUrlController = cvjs_phpPath  + "/tcpdf/batchconvert/"  + cvjs_screenToPDF_Controller

		if (cvjs_printObjectPathRelativeFlag){
			serverPath = cvjs_printObjectPath;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}
		else{
			serverPath = cvjs_printObjectPathAbsoluteServer;
			serverPath = cvjs_phpPath  + "/tcpdf/batchconvert/" ;
		}

	}
	else{  // servlet or other path controllers 3.2.01d
		
		cvjs_phpImagesUrlController = cvjs_serverHandlersPath + cvjs_screenToPDF_Controller
		serverPath = cvjs_ServerLocation  + "/converters/files/" ;
		
	}
		
	
	
	cvjs_serverSave_php_controllerArray = {};
	cvjs_serverSave_php_controllerArray['numberOfFiles'] = 1;


	cvjs_serverSave_php_controllerArray['serverPath'] = serverPath;


	cvjs_serverSave_php_controllerArray['fileName_0'] = cvjs_singleDrawingFile ;
	cvjs_serverSave_php_controllerArray['rotation_0'] = cvjs_singlePageOrientation;
	cvjs_serverSave_php_controllerArray['page_format_0'] = cvjs_singlePageSize;
	cvjs_serverSave_php_controllerArray['page_resolution_0'] = cvjs_singlePageResolution;

	cvjs_serverSave_php_controllerArray['org_fileName_0'] = cvjs_FileNameNoExtension ;

//window.alert("org_fileName_0 "+cvjs_serverSave_php_controllerArray['org_fileName_0']);


	jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_5\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.BatchPDF+'</div></td></tr></table>');

	cvjs_setLooperPosition();
	
	jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(1000);

	jQuery.ajax({
	  url:cvjs_phpImagesUrlController,
	  type: 'post',
	  data: cvjs_serverSave_php_controllerArray,
	  success: function(html){
//			window.alert(html+"  we have now created the single page pdf");		
//			if (true) return;
			
			cvjs_serverSavePrintModeController = 0;
			jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
			// hide modal
//				printWindow = window.open(cvjs_serverHandlersPath + "/tcpdf/batchconvert/" + html, 'CADViewer JS - Print', 'height='+screen.height*0.5+',width='+screen.width*0.5);


// here we add the email content 
//				printWindow = window.open(cvjs_phpPath  + "/tcpdf/batchconvert/" + html, 'CADViewer JS - Print', 'height='+screen.height*0.8+',width='+screen.width*0.5);
//				printWindow.focus();


				var currentdate = new Date();
				var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

				var month = "jan";
				var hours = currentdate.getHours(); 
				
				if (hours<10) hours = "0"+hours;
				switch(currentdate.getMonth()) {
					case 0:
						month = "Jan";
						break;
					case 1:
						month = "Feb";
						break;
					case 2:
						month = "Mar";
						break;
					case 3:
						month = "Apr";
						break;
					case 4:
						month = "May";
						break;
					case 5:
						month = "Jun";
						break;
					case 6:
						month = "Jul";
						break;
					case 7:
						month = "Aug";
						break;
					case 8:
						month = "Sep";
						break;
					case 9:
						month = "Oct";
						break;
					case 10:
						month = "Nov";
						break;
					case 11:
						month = "Dec";
						break;
					default:
						month = "Jan";
				}
				
				
				var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();

				
				var myUploadFile = "";
				if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
					myUploadFile = cvjs_currentFileFromJSTreeFolder;
				}
				else{
					myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
				}
				
				// 3.2.01d			
				if (!cvjs_fileLoadingFromSharePointServer){
					myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
				}
					
				
				myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));
				myUploadFile = myUploadFile + "_red_"+datetime+".pdf";

				var filelist_data = {};

				
				var n = html.lastIndexOf(".html");
				var pdffile = html.substring(0,n);
				
								
				// 3.2.01c
				if (cvjs_screenToPDF_Controller.indexOf(".php")>-1){
						filelist_data['pdf_file'] = cvjs_phpPath  + "/tcpdf/batchconvert/" + pdffile + ".pdf";  // myfolderFile;
				}
				else{  // servlet or other path controllers 3.2.01d
						filelist_data['pdf_file'] = cvjs_ServerLocation  + "/converters/files/" + pdffile + ".pdf";  // myfolderFile;
				}							
				// filelist_data['pdf_file'] = cvjs_phpPath  + "/tcpdf/batchconvert/" + pdffile + ".pdf";  // myfolderFile;

				
				filelist_data['pdf_file_name'] = myUploadFile ;  // myfolderFile;
				
				filelist_data['from_name'] = cvjs_from_name;
				filelist_data['from_mail'] = cvjs_from_mail;
				filelist_data['cc_mail'] = cvjs_cc_mail;
				filelist_data['replyto'] = cvjs_replyto;
				
				
				// replace , with ;
				cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
				
				filelist_data['to_mail'] = cvjs_to_mail;
				filelist_data['mail_title'] = cvjs_mail_title;
				filelist_data['mail_message'] = cvjs_mail_message;
				
				var cvjs_phpSendPDFEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
		

//window.alert(filelist_data['pdf_file']);
//if (true) return;
		
				jQuery.ajax({
				  url:cvjs_phpSendPDFEmail,
				  type: 'post',
				  data: filelist_data,
				  success: function(html){

						window.alert("e-mail sent!  "+html);

						}
					});
		
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}

	});

}






 

function savepageaspdf(floorplan_div){

	var pathname = ServerLocation + "/converters/files/pdf/custom_"+cvjs_customPdfFolderName;
	// find the filename-red_s1
	var fname = cvjs_last_FileName_PDF; 
	fname = fname.substring(fname.lastIndexOf("/")+1,fname.lastIndexOf("."));
	// find the curent page
	var current_page = cvjs_getCurrentPage();
	// build the full page
	pathname = pathname +"/"+fname+"_red_"+current_page+".pdf";
	
	//window.alert(pathname);
	cvjs_zoomExtents(floorplan_div);
	
	// we do not zoom in !!!
	// cvjs_zoomOutCustomFactor(floorplan_div, 1.2);
	
	cvjs_saveFloorplanAsPDF(pathname, floorplan_div);
}
 
	
function saveDrawingWithAnnotationsAsPDF(cvjs_currentFileFromJSTreeFolder, cvjs_sharepoint_UserName, dateFlag){

	// var v1 = jQuery('#pdf_with_annotations').val();	
	" GRC_Project2/GRC_Punch List 3/GRC_Michigan.dwg"
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	
	var serverPath = "";
	var myUploadFile = "";
	if (cvjs_currentFileFromJSTreeFolder.indexOf("/")==-1){	
		serverPath = "";
		myUploadFile = cvjs_currentFileFromJSTreeFolder;
	}
	else{
		serverPath = cvjs_currentFileFromJSTreeFolder.substring(0,cvjs_currentFileFromJSTreeFolder.lastIndexOf("/"));
		myUploadFile = cvjs_currentFileFromJSTreeFolder.substring(cvjs_currentFileFromJSTreeFolder.lastIndexOf("/")+1);
	}


	// 3.2.01d			
	if (!cvjs_fileLoadingFromSharePointServer){
		myUploadFile = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf("/")+1);					
	}

	
	myUploadFile = myUploadFile.substring(0,myUploadFile.lastIndexOf("."));
	
	
	if (dateFlag){
		myUploadFile = myUploadFile + "_red_"+datetime+".pdf";
	}
	else{
		myUploadFile = myUploadFile + "_red.pdf";
	}
	

	var location = ServerLocation+myUploadFile;
	console.log( "saveDrawingWithAnnotationsAsP "+  location + "  "+myUploadFile+"  "+serverPath);
	
	cvjs_saveFloorplanAsPDFtoSharePoint( location, "floorPlan", serverPath , cvjs_sharepoint_UserName );
//	cvjs_saveFloorplanAsPDFtoSharePoint( location, "floorPlan", "Project1", cvjs_sharepoint_UserName);
	
}


var cvjs_ServerLocation = "";
var cvjs_ServerUrl = "";


/**
 * Passes over the current settings of the calling html document context
 * @param {string} ServerLocation - server location of html <div> on which CADViewer JS is located
 * @param {string} ServerURL - server url of html <div> on which CADViewer JS is located
 */

function cvjs_setServerLocationURL(ServerLocation, ServerUrl){

	// used for pdf generation and print modals
	
	cvjs_ServerLocation = ServerLocation;
	cvjs_ServerUrl = ServerUrl;
	
	
	// we also use this path to set the print controlling path strings and php strings
	
	cvjs_javaScriptsAbsoluteFolder = ServerUrl +"app/js/";
	cvjs_defaultJSPath = ServerUrl +"app/js/";

	
	
	// this is only for php case, not in the case of servlets, and not if they have been declare
		
	if (!cvjs_setServerHandersPath_called){   // 3.2.01d
		cvjs_serverHandlersPath = ServerUrl +"php/"
		cvjs_phpPath = ServerUrl +"php/"
	}
		
		
		
	
	
	if (!cvjs_printObjectPathAbsolute_called){
		// if the serverhandler path is absolute, then we set the cvjs_setPrintObjectPathAbsolute
		// 3.1.21c
		cvjs_printObjectPathAbsolute = cvjs_ServerUrl + "/php/temp_print/";
		cvjs_printObjectPathAbsoluteServer = cvjs_ServerLocation + "/php/temp_print/";
		cvjs_printObjectPathRelativeFlag = false;
	}
	

}	


/**
 * Saves a floorplan with overlays as SVG file, then embed it into a pdf and display in own window
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
	
function cvjs_printScreenAsPDFwithRedlines(floorplan_div){



	// make temp file name
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;
	var js_data = {};
	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.pdf';

	
	var htmlName = cvjs_FileNameNoExtension+'_'+datetime+'.html';	
	
	
//	var fileName = "tempXXXX.pdf";
	var myfolderFile = cvjs_ServerLocation+fileName; 
//	var myfolderFile = cvjs_ServerLocation+"/"+ fileName; 

//	window.alert(myfolderFile);
	
	var counter = myfolderFile.lastIndexOf(".");
	var svgFile = myfolderFile.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		if (cvjs_debug) console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = myfolderFile;
		filelist_data['svg_file'] = svgFile;
	
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF file is now created: "+html);
										
//		if (cvjs_debug) window.alert(html);
	
				var filelocation = cvjs_ServerUrl+ "/" + fileName;
				var xfilelocation = cvjs_ServerUrl + "/" + fileName;

				var htmlLocation = cvjs_ServerLocation + "/" + htmlName;
				var htmlUrl = cvjs_ServerUrl + "/" + htmlName;
				
				var is_explorer = (navigator.userAgent.indexOf('MSIE') > -1) || (navigator.userAgent.indexOf('Trident') > -1);
//				var printWindow = window.open('', 'CADViewer JS - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				var text = "";

//				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer JS - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer JS - Print</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';
				
//				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';

				//printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				//text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_phpPath+"/delete-file.php?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

//				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
				text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";
				
//				printWindow.document.write('</head><body><div id="pdf">');
				text = text + '</head><body><div id="pdf">';

//				printWindow.document.write('<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>';

//				printWindow.document.write('<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>');
				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>';
								
//				printWindow.document.close(); //this seems to be the thing doing the trick
//				printWindow.focus();

							
				js_data['file'] = htmlLocation;
				js_data['file_content'] = text;
							
				jQuery.ajax({
				  url:cvjs_phpSaveSVGUrlLocation,
				  type: 'post',
				  data: js_data,
				  success: function(html){
					var status ="Save html: "+html;
						
							var printWindow = window.open(htmlUrl, 'CADViewer JS - Print', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
							printWindow.focus();							
					  }
					});
			
				
				
				
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});
}

	
function cvjs_setLooperPosition(){

	
	var loc_x = (jQuery(window).width()-86)/2;   // image is 86x14
	var loc_y = (jQuery(window).height()- 14) / 2;
		
		
	var w = window.innerWidth;
	var h = window.innerHeight;		
		
				
	var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
	var floorplan_h = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
	var floorplan_w = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');	


	// first initalization, when floating size of <div>, then we use the innerWidth/innerHeight  3.1.20c
	if (floorplan_h == 150  && floorplan_w == 300) {
		floorplan_h = h;
		floorplan_w = w;
		
	}
	
	
	
	
//console.log("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM    "+floorplan_pos+" h "+floorplan_h+" w "+floorplan_w+" left "+position.left+" top "+position.top)

/***  dont need this	
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
		loc_x = position.left+floorplan_w/2-86;   // image is 86x14
		loc_y = position.top+floorplan_h/2-14;		
	}
	else{	
		loc_x = floorplan_w/2-86;   // image is 86x14
		loc_y = floorplan_h/2-14;		
	}
	
***/	
	
	// can it be that wait-looper is always relative to floorplan_div ?
	
	// move is slightly more left and up
	loc_x = floorplan_w/2-86;   // image is 86x14
	loc_y = floorplan_h/2-14;		
	

	loc_x = floorplan_w/2-120;   // modal is 195 x 63 pixels
	loc_y = floorplan_h/2-60;		


	loc_x += position.left;   // 3.0.13f
	loc_y += position.top;		
	

//window.alert("setLooper "+loc_x+" "+loc_y+"  "+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"  "+floorplan_h+"  "+floorplan_w+" "+w+" "+h);	

	
	jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css({
		left:loc_x,
		top: loc_y,
		position:'fixed'
	});
	jQuery('#looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("");
    jQuery('#looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).append("<img class=\"waiting\" src=\""+cvjs_imagesLocation+"looper.gif\" />");
	

}
	


function cvjs_initializeFileSelector(){


// drawing file 1

		jQuery('#attention_bitmap').hide();


/*

// hide all file objects initially
		for (var i=maxfiles;i>0;i--){

			var l1 = "1floor"+i;
			var l2 = "2floor"+i;

			jQuery("#"+l1).hide();
			jQuery("#"+l2).hide();
		}

*/


		// load and build the server side list with files

		//console.log(" cvjs_loadServerFileList(1); ");

		cvjs_loadServerFileList(1);


}



// 3.3.06a
function cvjs_setModalSingleFileItems(number){
	
	
var basefloor = '#1floor'+number;	
	

		jQuery(basefloor).mouseover(function()
			{
			    jQuery(basefloor+'_1').css('color', '#29BBEB');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: true });

        	});

		jQuery(basefloor).mouseout(function()
			{
			    jQuery(basefloor+'_1').css('color', '#333333');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: false });
        	});



		jQuery(basefloor+'_1').mousedown(function()
			{
				var filename =	jQuery(basefloor+'_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery(basefloor+'_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename, number); // 3.3.05f
			    jQuery(basefloor+'_1').css('color', '#333333');


        	});

		jQuery(basefloor+'_2').mousedown(function()
			{
				var filename =	jQuery(basefloor+'_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery(basefloor+'_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename, number); // 3.3.05f

			});

			
var		basefloor2 = '#2floor'+number;	
			

		jQuery(basefloor2+'_3').click(function()
			{

				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#delete_form").fadeIn(1000);
					delete_filename = jQuery(basefloor2+'_4').text();
					delete_floor =  jQuery(basefloor2+'_1').text();

					hidefield_name1 = basefloor2; //"#2floor1";
					hidefield_name2 = basefloor; // "#1floor1";
					// update array with file names - remove the file and associated name from list
					positionPopup();
				}

			});
// delete mouse over
		jQuery(basefloor2+'_3').mouseover(function()
			{
				jQuery(basefloor2+'_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Over_3.png");  //  Trash_Over_3.png             // Trash_2.png
			});
// delete mouse out
		jQuery(basefloor2+'_3').mouseout(function()
			{
				jQuery(basefloor2+'_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Up_1.png");    //   Trash_Up_1.png             // Trash_2.png

			});

		jQuery(basefloor2+'_2').mouseover(function(){


		});

		jQuery(basefloor2+'_2').mousedown(function()
			{

				try{

				if (active_modal == 1){
					// do nothing

				}
				else{
					if (edit_nametag_flag == 0)
						edit_nametag_flag = 1;
					else{
						if (edit_nametag_flag == 1)
							fnArr_ShortName[edit_nametag_flag-1] =  jQuery('#floor_name_tag').val();
							edit_nametag_flag = 0;
					}


					if ( edit_nametag_flag == 1){
						jQuery(basefloor2+'_2').css('color', '#02C226');
						jQuery(basefloor2+'_2_2').css('color', '#E85656');
						jQuery(basefloor2+'_2_3').css('color', '#E85656');
						var shortname = jQuery(basefloor2+'_1').text();
						var textstring = "<input id=\"floor_name_tag\" type=\"text3\" class=\"name_tags2\" value=\""+shortname+"\">";
						jQuery(basefloor2+'_1').html(textstring);
//console.log("disable sort");
						jQuery('#sortable').sortable({ disabled: true });
					}

					if ( edit_nametag_flag == 0){
						jQuery(basefloor2+'_2').css('color', '#026DD9');
						jQuery(basefloor2+'_2_2').css('color', '#026DD9');
						jQuery(basefloor2+'_2_3').css('color', '#026DD9');
						var newname = jQuery('#floor_name_tag').val();
						jQuery(basefloor2+'_1').html(newname);
						jQuery(basefloor+'_1').html(newname);
						// update array with file names

						//fnArr_FileName[0] =  fnArr_listdirectory_FileName[0];
						//fnArr_ShortName[0] =  newname;
						save_filename_list();

						jQuery('#sortable').sortable({ disabled: false });


					}

				}
				} catch(err){console.log("Err 1: "+err);}

			});


		jQuery(basefloor2+'_2_2').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#unlink_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupUnlink();
				}
			});


		jQuery(basefloor2+'_2_3').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{
					jQuery("#clear_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupClear();
				}
			});



	
	
	
	
	
}





function cvjs_initializeAllFileSelectorDivs(floorplan_div){



	jQuery("#button2-no_upload_redline").click(function(){

//		jQuery("#cvjs_serverFileLoadModal").hide();

		// hide redline load modal if in interactive mode
		jQuery( "#addRedlineTable").hide();

	});


	jQuery("#button1-upload_redline").click(function(){



		var f_path = "";
		var flagloop = true;
		var counter1 = 0;
		var temp = cvjs_redlinesRelativePath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter1++;

				}
				else
					flagloop=false;
			}

			flagloop = true;

		var counter2 = 0;
			temp = cvjs_phpPath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter2++;

				}
				else
					flagloop=false;
			}

		if (counter2>1) {
			f_path = cvjs_redlinesRelativePath.substring((counter2-1)*3);
		}
		else
			f_path = cvjs_redlinesRelativePath;

if (cvjs_debug) console.log("cvjs_initializeAllFileSelectorDivs cvjs_saveStickyNotesRedlines f_path="+f_path)

		if (cvjs_redlinesAbsolutePathOnly) f_path = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path

if (cvjs_debug) console.log("2 cvjs_initializeAllFileSelectorDivs cvjs_saveStickyNotesRedlines fpath="+f_path)

		cvjs_setStickyNoteSaveRedlineUrl(f_path+jQuery('#uploadredline_name_tag').val());


//		cvjs_setStickyNoteSaveRedlineUrl(cvjs_redlinesRelativePath+jQuery('#uploadredline_name_tag').val());
		cvjs_saveStickyNotesRedlines(floorplan_div);

	});



		// NEW WE CREATE BASED ON EVERYTHING    '#1floor1 -> '#1floor80    #2floor1 -> '#2floor80
		// 3.3.06a
		for (i=1; i<180; i++)
			cvjs_setModalSingleFileItems(i);
		// 3.3.06a we double from 40 -> 80 items in the list
		

// TEMPLATE FOR cvjs_setModalSingleFileItems(number);		
/***

		jQuery('#1floor1').mouseover(function()
			{
			    jQuery('#1floor1_1').css('color', '#29BBEB');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: true });

        	});

		jQuery('#1floor1').mouseout(function()
			{
			    jQuery('#1floor1_1').css('color', '#333333');
			    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: false });
        	});



		jQuery('#1floor1_1').mousedown(function()
			{
				var filename =	jQuery('#1floor1_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery('#1floor1_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename,1); // 3.3.05f
			    jQuery('#1floor1_1').css('color', '#333333');

        	});

		jQuery('#1floor1_2').mousedown(function()
			{
				var filename =	jQuery('#1floor1_2').text();
				current_selected_filename = filename;
				current_selected_shortname = jQuery('#1floor1_1').text();
				jQuery('#display_floorplan_name').html(current_selected_shortname);
				var file =  cvjs_floorplansRelativePath + filename;
				 cvjs_callServerForDataOverlayProcessing();

				cvjs_loadFileWithDataOverlays(filename,1); // 3.3.05f

			});


		jQuery('#2floor1_3').click(function()
			{

				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#delete_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					delete_floor =  jQuery('#2floor1_1').text();

					hidefield_name1 = "#2floor1";
					hidefield_name2 = "#1floor1";
					// update array with file names - remove the file and associated name from list
					positionPopup();
				}

			});
// delete mouse over
		jQuery('#2floor1_3').mouseover(function()
			{
				jQuery('#2floor1_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Over_3.png");  //  Trash_Over_3.png             // Trash_2.png
			});
// delete mouse out
		jQuery('#2floor1_3').mouseout(function()
			{
				jQuery('#2floor1_3_image').attr("src", ""+cvjs_imagesLocation+"tools/Trash_Up_1.png");    //   Trash_Up_1.png             // Trash_2.png

			});

		jQuery('#2floor1_2').mouseover(function(){

		});

		jQuery('#2floor1_2').mousedown(function()
			{

				try{

				if (active_modal == 1){
					// do nothing

				}
				else{
					if (edit_nametag_flag == 0)
						edit_nametag_flag = 1;
					else{
						if (edit_nametag_flag == 1)
							fnArr_ShortName[edit_nametag_flag-1] =  jQuery('#floor_name_tag').val();
							edit_nametag_flag = 0;
					}


					if ( edit_nametag_flag == 1){
						jQuery('#2floor1_2').css('color', '#02C226');
						jQuery('#2floor1_2_2').css('color', '#E85656');
						jQuery('#2floor1_2_3').css('color', '#E85656');
						var shortname = jQuery('#2floor1_1').text();
						var textstring = "<input id=\"floor_name_tag\" type=\"text3\" class=\"name_tags2\" value=\""+shortname+"\">";
						jQuery('#2floor1_1').html(textstring);
//console.log("disable sort");
						jQuery('#sortable').sortable({ disabled: true });
					}

					if ( edit_nametag_flag == 0){
						jQuery('#2floor1_2').css('color', '#026DD9');
						jQuery('#2floor1_2_2').css('color', '#026DD9');
						jQuery('#2floor1_2_3').css('color', '#026DD9');
						var newname = jQuery('#floor_name_tag').val();
						jQuery('#2floor1_1').html(newname);
						jQuery('#1floor1_1').html(newname);
						// update array with file names

						//fnArr_FileName[0] =  fnArr_listdirectory_FileName[0];
						//fnArr_ShortName[0] =  newname;
						save_filename_list();

						jQuery('#sortable').sortable({ disabled: false });


					}

				}
				} catch(err){console.log("Err 1: "+err);}

			});


		jQuery('#2floor1_2_2').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{

					jQuery("#unlink_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupUnlink();
				}
			});


		jQuery('#2floor1_2_3').mousedown(function()
			{
				if (active_modal == 1){
					// do nothing

				}
				else{
					jQuery("#clear_form").fadeIn(1000);
					delete_filename = jQuery('#2floor1_4').text();
					positionPopupClear();
				}
			});
			
***/			
						



			jQuery('#select_file').click(function()
			{
   				//document.getElementById("cvjs_upfile").click();

   				jQuery("#cvjs_upfile").click();

			});


			jQuery('#select_file').mouseover(function()
			{
					// addFloorPlan.png
				    // jQuery('#select_file').attr("src", ""+cvjs_imagesLocation+"cross-blue.png");

				    jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: true });


			});


			jQuery('#select_file').mouseout(function()
			{
					// addFloorPlan.png
				    // jQuery('#select_file').attr("src", ""+cvjs_imagesLocation+"cross.png");

					jQuery("#cvjs_serverFileLoadModal").draggable({ disabled: false });


			});





		jQuery("#CloseAttentionBitmap").click(function() {

				jQuery('#attention_bitmap').hide();
				attention_bitmap_flag = 0;


		});

		jQuery("#done_editing").click(function() {


			if (active_modal == 1){
				// do nothing

			}
			else{


				// if an edit box is open, then we update the filename and close the edit box
				if (edit_nametag_flag>0){

					var tag_2floorx_1 = "#2floor"+edit_nametag_flag+"_1";
					var tag_2floorx_2 = "#2floor"+edit_nametag_flag+"_2";
					var tag_1floorx_1 = "#1floor"+edit_nametag_flag+"_1";

					//console.log("tag_1floorx_1="+tag_1floorx_1);

					jQuery(tag_2floorx_2).css('color', '#00539B');
					var newname = jQuery('#floor_name_tag').val();
					jQuery(tag_2floorx_1).html(newname);
					jQuery(tag_1floorx_1).html(newname);
					// update array with file names

					//fnArr_FileName[edit_nametag_flag-1] =  fnArr_listdirectory_FileName[edit_nametag_flag-1];
					//fnArr_ShortName[edit_nametag_flag-1] =  newname;
					save_filename_list();

					edit_nametag_flag = 0;

				}



				jQuery('#SelectFloorPlanPanel').show();
				jQuery('#SelectFloorPlan').show();
				jQuery('#SelectFloorPlanPanelEdit').hide();
				jQuery('#SelectFloorPlanEdit').hide();

			}

		});


		jQuery("#editing").click(function() {

			save_filename_list();

		    jQuery('#SelectFloorPlanPanel').hide();
		    jQuery('#SelectFloorPlan').hide();


		    jQuery('#SelectFloorPlanPanelEdit').show();
		    jQuery('#SelectFloorPlanEdit').show();


		});




	jQuery('#delete_modal_cancel_image').mouseover(function()
		{
			jQuery('#delete_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#delete_modal_cancel_image').mouseout(function()
		{
			jQuery('#delete_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});



	jQuery('#delete_modal_proceed_image').mouseover(function()
		{
			jQuery('#delete_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#delete_modal_proceed_image').mouseout(function()
		{
			jQuery('#delete_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});



	jQuery('#unlink_modal_cancel_image').mouseover(function()
		{
			jQuery('#unlink_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#unlink_modal_cancel_image').mouseout(function()
		{
			jQuery('#unlink_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});


	jQuery('#unlink_modal_proceed_image').mouseover(function()
		{
			jQuery('#unlink_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#unlink_modal_proceed_image').mouseout(function()
		{
			jQuery('#unlink_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});



	jQuery('#clear_modal_cancel_image').mouseover(function()
		{
			jQuery('#clear_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#clear_modal_cancel_image').mouseout(function()
		{
			jQuery('#clear_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});


	jQuery('#clear_modal_proceed_image').mouseover(function()
		{
			jQuery('#clear_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#clear_modal_proceed_image').mouseout(function()
		{
			jQuery('#clear_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});


	jQuery("#button2-nodelete").click(function(){

		active_modal = 0;

		jQuery("#delete_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

	});


	jQuery("#button1-delete").click(function(){

	//console.log("delete");


		active_modal = 0;

		jQuery("#delete_form").fadeOut(500);  //XXX

		delete_file_and_overlay(delete_filename);
		jQuery(hidefield_name1).hide();
		jQuery(hidefield_name2).hide();

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

	});




	jQuery("#button1-unlink").click(function(){

		active_modal = 0;

		jQuery("#unlink_form").fadeOut(500);
		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");


		// unlink code
		unlink_flag = 1;
		unlink_file = delete_filename;

	});






	jQuery("#button2-nounlink").click(function(){

		active_modal = 0;

		jQuery("#unlink_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		unlink_flag = 0;
		unlink_file = "";

	});



	jQuery("#unlink_modal_close_cross").click(function(){

		active_modal = 0;

		jQuery("#unlink_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		jQuery('#unlink_modal_close_cross').css("filter", "alpha(opacity=100)");
		jQuery('#unlink_modal_close_cross').css("opacity", "1.0");


		unlink_flag = 0;
		unlink_file = "";

	});


	jQuery('#unlink_modal_close_cross').mouseover(function()
		{
			jQuery('#unlink_modal_close_cross').css("filter", "alpha(opacity=70)");
			jQuery('#unlink_modal_close_cross').css("opacity", "0.7");
		});


	jQuery('#unlink_modal_close_cross').mouseout(function()
		{
			jQuery('#unlink_modal_close_cross').css("filter", "alpha(opacity=100)");
			jQuery('#unlink_modal_close_cross').css("opacity", "1.0");
		});



	jQuery("#button1-clear").click(function(){

		active_modal = 0;

		jQuery("#clear_form").fadeOut(500);
		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		// clear code   - swapped current_selected_filename with delete_filename


	// NOTE NOT IMPLEMENTED

	});





	jQuery("#button2-noclear").click(function(){

		active_modal = 0;


		jQuery("#clear_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

	});



	jQuery("#clear_modal_close_cross").click(function(){

		active_modal = 0;

		jQuery("#clear_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		jQuery('#clear_modal_close_cross').css("filter", "alpha(opacity=100)");
		jQuery('#clear_modal_close_cross').css("opacity", "1.0");


	});


	jQuery('#clear_modal_close_cross').mouseover(function()
		{
			jQuery('#clear_modal_close_cross').css("filter", "alpha(opacity=70)");
			jQuery('#clear_modal_close_cross').css("opacity", "0.7");
		});


	jQuery('#clear_modal_close_cross').mouseout(function()
		{
			jQuery('#clear_modal_close_cross').css("filter", "alpha(opacity=100)");
			jQuery('#clear_modal_close_cross').css("opacity", "1.0");
		});


	jQuery("#modal_close_cross").click(function(){

		active_modal = 0;

		jQuery("#delete_form").fadeOut(500);

		// Reset opacity of SelectFloorPlanPanelEdit
		jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=100)");
		// filter:alpha(opacity=40);
		jQuery('#SelectFloorPlanPanelEdit').css("opacity", "1.0");

		jQuery('#modal_close_cross').css("filter", "alpha(opacity=100)");
		jQuery('#modal_close_cross').css("opacity", "1.0");


	});


	jQuery('#modal_close_cross').mouseover(function()
		{
			jQuery('#modal_close_cross').css("filter", "alpha(opacity=70)");
			jQuery('#modal_close_cross').css("opacity", "0.7");
		});


	jQuery('#modal_close_cross').mouseout(function()
		{
			jQuery('#modal_close_cross').css("filter", "alpha(opacity=100)");
			jQuery('#modal_close_cross').css("opacity", "1.0");
		});




	jQuery('#uploadredline_modal_cancel_image').mouseover(function()
		{
			jQuery('#uploadredline_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

		});

	jQuery('#uploadredline_modal_cancel_image').mouseout(function()
		{
			jQuery('#uploadredline_modal_cancel_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

		});

	jQuery('#uploadredline_modal_proceed_image').mouseover(function()
		{
			jQuery('#uploadredline_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Over.png");

		});


	jQuery('#uploadredline_modal_proceed_image').mouseout(function()
		{
			jQuery('#uploadredline_modal_proceed_image').attr("src", ""+cvjs_imagesLocation+"tools/Proceed_111x28_Up.png");

		});



}



var active_modal = 0;
var edit_nametag_flag=0;

var filesonserver = 0;
var cvjs_maxfiles = 60;   // 4.1.02j 

var cvjs_floorplansRelativePath  = "../drawings/floorplans/";

var cvjs_filepathServer  =  "home/myserver/"
var cvjs_floorplanUrl  = "http://myserver.com"

var cvjs_filename_list_status = 1;   // 1 file loaded, 2 redline load, 3 floor plan objects load


function save_filename_list(){   // we are using the old reference list here


if (cvjs_debug) console.log("save_filename_list  cvjs_filename_list_status "+ cvjs_filename_list_status);



	// build list
	var dataUrl = "";
	dataUrl = "(RW-2)|"+filesonserver+"|";
	for (var i=0; i<filesonserver; i++){
		dataUrl = dataUrl + fnArr_FileName[i]+";";
	}
	dataUrl = dataUrl + "|";

	for (var i=0; i<filesonserver; i++){
		dataUrl = dataUrl + fnArr_ShortName[i]+";";
	}
	dataUrl = dataUrl + "|";

//console.log(dataUrl);

	// save file
	var finalUrl = cvjs_phpPath +'save-file.php';
	
	// 3.2.02f
	var finalUrl = cvjs_serverHandlersPath +  cvjs_serverSaveFileControllerRedlines;
		
	
	// data

	var filelist_data = {};

	if (cvjs_filename_list_status==1){

		var fpath = "";
		var flagloop = true;
		var counter1 = 0;
		var temp = cvjs_floorplansRelativePath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter1++;

				}
				else
					flagloop=false;
			}

			flagloop = true;

		var counter2 = 0;
			temp = cvjs_phpPath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter2++;

				}
				else
					flagloop=false;
			}

		if (counter2>1) {
				fpath =	cvjs_floorplansRelativePath.substring((counter2-1)*3);
		}
		else
				fpath =	cvjs_floorplansRelativePath;


		if (cvjs_fileLocationAbsolutePathsOnly) fpath = cvjs_filepathServer;


		filelist_data['file'] = encodeURIComponent(fpath+filenames_data_url_name);
		//filelist_data['file'] = encodeURIComponent(cvjs_floorplansRelativePath+filenames_data_url_name);
	}
	if (cvjs_filename_list_status==2){


		var fpath = "";
		var flagloop = true;
		var counter1 = 0;
		var temp = cvjs_redlinesRelativePath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter1++;

				}
				else
					flagloop=false;
			}

			flagloop = true;
		var counter2 = 0;
			temp = cvjs_phpPath;
			while(flagloop){
				if (temp.indexOf("../")==0 ){
					temp = temp.substring(3);
					counter2++;

				}
				else
					flagloop=false;
			}

		if (counter2>1) {
			fpath =	cvjs_redlinesRelativePath.substring((counter2-1)*3);
		}
		else
			fpath =	cvjs_redlinesRelativePath;


		if (cvjs_redlinesAbsolutePathOnly) fpath = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path

//console.log(cvjs_redlinesAbsolutePathOnly+" save redline files "+fpath);


		filelist_data['file'] = encodeURIComponent(fpath+filenames_data_url_name);
//		filelist_data['file'] = encodeURIComponent(cvjs_redlinesRelativePath+filenames_data_url_name);
	}


if (cvjs_debug) console.log("save_filename_list   "+filelist_data['file']);
if (cvjs_debug) console.log("save_filename_list   "+dataUrl);
if (cvjs_debug) console.log("save_filename_list   "+finalUrl);


	filelist_data['file_content'] = dataUrl;


	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){
	  	//console.log(html);
		
	    // 3.3.04e after everything is up on the server, then call the new loading of drawing
		//					if (cvjs_directFileLoad) cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_filepathServer+ file_and_ext);					
		if (cvjs_directFileLoad) cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_directFileLoadPath );
		
	  }  // end success




	});

}


        function getFiles() {
            // Get input element
            myFileList = document.getElementById("myfiles");
            // loop through files property, using length to get number of files chosen
            for (var i = 0; i < myFileList.files.length; i++) {
                // display them in the div
                document.getElementById("display").innerHTML += "<br/>" + myFileList.files[i].name ;
            }
        }




// 3.2.01g   - change to cvjs_ add_file_objec  and have the file element element as parameter
function cvjs_add_file_object(myElement){

//window.alert("myElement "+myElement);

//var obj = document.getElementById("cvjs_upfile");
// 3.2.01g
var obj = document.getElementById(myElement);


for (var i = 0; i < obj.files.length; i++) {
	// display them in the div
if (cvjs_debug) 	console.log(obj.files[i].name);
}

var file = obj.value;
var fileName = file.split("\\");
var file_and_ext = fileName[fileName.length-1];
var illegal_character = 0;

  // probably not needed
  var files = obj.files;
  if (!files) {
        // workaround for IE9
        files = [];
        files.push({
            name: obj.value.substring(obj.value.lastIndexOf("\\")+1),
            size: 0,  // it's not possible to get file size w/o flash or so
            type: obj.value.substring(obj.value.lastIndexOf(".")+1)
        });

        obj.files = files;
    }


var size = 0;
var path = "";
var vval = "";

try{
	size = obj.files[0].size;
	path = obj.files[0].name;
	vval = obj.files[0].path;
if (cvjs_debug) 	console.log(size+"  "+path+"  "+vval)
}catch(err) {
	console.log(err);
};





if (file_and_ext.indexOf("+")>-1 || file_and_ext.indexOf("%")>-1)
	illegal_character = 1;

if (illegal_character == 1){
		jQuery('#attention_1').html("Attention: Illegal character!");
		jQuery('#attention_2').html("Illegal character in file name! Please rename and try again.");
		jQuery('#attention_bitmap').show();
}
else{

// make the variable for the next available floorplan
	var fileExt = fileName[fileName.length-1].split(".");

	var formats = ".dwf|.dxf|.dwg|.png|.gif|.jpg|.svg|.svgz|.js|.pdf|.dgn|.pcf";
	if (formats.indexOf(fileExt[fileExt.length-1].toLowerCase())==-1){

		jQuery('#attention_1').html("Attention: Format not supported!");
		jQuery('#attention_2').html("CADViewer JS supports the following: <br> AutoCAD Formats: DWG, DXF, DWF <br> MicroStation Formats: DGN, PCF <br>Bitmap Formats: JPG, GIF, PNG <br>Scalable Vector Graphics: SVG and SVGZ. <br>Adobe Acrobat: PDF<br>CADViewer JS: .JS JavaScript files. ");
		jQuery('#attention_bitmap').show();
	}
	else{  // file is supported
		// check if file already is uploaded


		// Demo mode, only a single file is allowed to be uploads
		if (cvjs_fileLoadTrialMode) filesonserver=0;


		var check_flag = 0;
		for (var i=0; i<filesonserver; i++){
			if (fnArr_FileName[i].indexOf(file_and_ext) == 0){
				check_flag = 1;
				
				// remove this check
				// 4.1.01k
				check_flag = 0;
				
			}
		}

				
		if (check_flag == 1){
			jQuery('#attention_1').html("Attention:");
			jQuery('#attention_2').html(file_and_ext+" has already been uploaded! ");
			jQuery('#attention_bitmap').show();
		}
		else{  // upload file

			var formats_bitmap = ".png|.gif|.jpg";
			if (formats_bitmap.indexOf(fileExt[fileExt.length-1].toLowerCase())>=0){

				//jQuery('#attention_bitmap').show();
				//attention_bitmap_flag = 1;
			}

			jQuery('#SelectFloorPlanPanelEdit').hide();
			jQuery('#SelectFloorPlanPanel').show();


			// let us move all current files one step down the list, and upload to the top position

			filesonserver++;

			for (i=filesonserver-1; i>0; i--){

				fnArr_FileName[i] = fnArr_FileName[i-1];
				fnArr_ShortName[i] = fnArr_ShortName[i-1];

				var location = "#1floor"+(i+1);
				jQuery(location).show();

				location = "#1floor"+(i+1)+"_2";
				jQuery(location).html(fnArr_FileName[i]);

				location = "#2floor"+(i+1);
				jQuery(location).show();

				location = "#2floor"+(i+1)+"_4";
				jQuery(location).html(fnArr_FileName[i]);

				var fname= file_and_ext.split(".");
				location = "#2floor"+(i+1)+"_1";
				jQuery(location).html(fnArr_ShortName[i]);

				location = "#1floor"+(i+1)+"_1";
				jQuery(location).html(fnArr_ShortName[i]);

			}

			fnArr_FileName[0] = file_and_ext;
			fnArr_ShortName[0] = file_and_ext;

			var location = "#1floor"+1;
			jQuery(location).show();

			location = "#1floor"+1+"_2";
			jQuery(location).html(file_and_ext);

			location = "#2floor"+1;
			jQuery(location).show();
			location = "#2floor"+1+"_4";
			jQuery(location).html(file_and_ext);

			var fname= file_and_ext.split(".");
			location = "#2floor"+1+"_1";
			jQuery(location).html(fname[0]);

			location = "#1floor"+1+"_1";
			jQuery(location).html("");


//window.alert("file we are uploading "+cvjs_phpPath+"upload_2.php");


			var phpUpload_location = "";

			if (externalServerPhpUpload)
				phpUpload_location = cvjs_phpUploadPath;
			else
				phpUpload_location = cvjs_phpPath;

			jQuery(location).axuploader({
				url: phpUpload_location+'upload_2.php',
				finish:function(x,files){

// check if PDF version is supported

					var s1_data = {};
					var check_header = cvjs_floorplansRelativePath+file_and_ext;


//console.log("check_header="+check_header+"  fileExt[fileExt.length-1]="+fileExt[fileExt.length-1]);


					if (fileExt[fileExt.length-1].indexOf("pdf")>=0  || fileExt[fileExt.length-1].indexOf("PDF")>=0 ){

//console.log("inside pdf loop");

						s1_data['file'] = file_and_ext;
						var loadUrl1 =  cvjs_floorplansRelativePath +'load-header.php';

//console.log("before ajax loadUrl1="+loadUrl1+" s1_data['file']="+s1_data['file']);

						jQuery.ajax({
						  url:loadUrl1,
						  type: 'post',
						  data: s1_data,
						  success: function(binArray){

//console.log("success binArray="+binArray);

							var version = binArray.substring(0,8);  // (PDF)
//console.log("version="+version);
							if (version.indexOf("PDF-1.2")>=0 || version.indexOf("PDF-1.3")>=0 || version.indexOf("PDF-1.4")>=0 || version.indexOf("PDF-1.5")>=0 ||version.indexOf("PDF-1.6")>=0 ){

								var iii=0;

								// we are home safe
							}
							else{  // delete file
if (cvjs_debug) console.log("The PDF version is currently unsupported, please use a PDF tool to save the file as Acrobat 7 (PDF 1.6) or below.");

								var location = "#1floor"+filesonserver;
								jQuery(location).hide();

								location = "#2floor"+filesonserver;
								jQuery(location).hide();

								filesonserver--;

								// delete the file on server
								var finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(cvjs_floorplansRelativePath+file_and_ext);
								jQuery.ajax({
								  url:finalUrl,
								  cache: false,
								  success: function(html){
								  }  // end success

								});
							}
						  }  // end success

						});
					}
					
					
					// when we are finished uploading we update the tree, if a tree is defined
					// internally for all service based implementations
					// 3.2.01g
					try{
						jQuery('#tree').jstree(true).refresh(true);
						
					}catch (err){ console.log("we do not have a folder tree to update...:  "+err);}
					



					
				},
				enable:true,
				fileObject:obj,
				remotePath:function(){

					//console.log("remotePath!! ");
					// here we have to return dependent on what we are loading in!
//QQQQ
					if (cvjs_debug) console.log("file upload "+cvjs_filepathServer+" file_and_ext"+file_and_ext);

					// 3.3.04e ,
					// If direct load from SAAS , we load in the drawing here
					
//					if (cvjs_directFileLoad) cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], cvjs_filepathServer+ file_and_ext);
					
					if (cvjs_directFileLoad) cvjs_directFileLoadPath = cvjs_filepathServer+ file_and_ext;
					
									
					
					//window.alert("END of Upload check_flag="+check_flag);		
					//4.1.01k  - we now clean the field, allowing for another selection of the same drawing
					document.getElementById(myElement).value = "";

					
					return cvjs_filepathServer;
					

				}
			});


			// do not remove  jQuery(location).html(fileName[0]);

		}
	}


	} // illegal character

}


var cvjs_fileLocationAbsolutePathsOnly = false;

/**
 * Set up the location of folder in server in which files are upload to and accessed from
 * @param {string} myServerPathToFloorplans - full path to the location of the drawings (typically  /home/myserver/drawings/floorplans/)
 * @param {string} floorplanPath - the relative location of floorplans relative to my document (typically ../drawings/floorplans/)
 * @param {string} floorplanUrl - Url to the locations of floorplans relative to my document
 * @param {string} username - username for floorplans drawings folder, "" if none
 * @param {string} password - password for floorplans drawings folder, "" if none
 */
function cvjs_setServerFileLocation(myServerPathToFloorplans, floorplanPath, floorplanUrl, username, password ){

	cvjs_floorplansRelativePath  = floorplanPath;
	cvjs_filepathServer  =  myServerPathToFloorplans;

	cvjs_floorplanUrl = floorplanUrl;

	rest_contentUserName = username;
	rest_contentPassword = password;


	cvjs_fileLocationAbsolutePathsOnly = false;
}



/**
 * Set up the location of folder in server in which files are upload to and accessed from
 * @param {string} myServerPathToFloorplans - full path to the location of the drawings (typically  /home/myserver/drawings/floorplans/)
 * @param {string} floorplanPath - the relative location of floorplans relative to my document (typically ../drawings/floorplans/)
 * @param {string} username - username for floorplans drawings folder, "" if none
 * @param {string} password - password for floorplans drawings folder, "" if none
 */
function cvjs_setServerFileLocation_AbsolutePaths(myServerPathToFloorplans, floorplanUrl, username, password ){

	cvjs_floorplansRelativePath  = "";
	cvjs_filepathServer  =  myServerPathToFloorplans;

	cvjs_floorplanUrl = floorplanUrl;

	rest_contentUserName = username;
	rest_contentPassword = password;

	cvjs_fileLocationAbsolutePathsOnly = true;

}






function cvjs_exitServerFileLoadModal(){

	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;

	jQuery( "#cvjs_serverFileLoadModal" ).hide();
	jQuery( "#cvjs_serverFileLoadModal_table" ).hide(); 

}


function cvjs_callServerForDataOverlayProcessing(){

	//console.log("Here we will do a server call to build data overlays on floorplan objects - if available -");
}



function cvjs_loadFileWithDataOverlays(fileName, row){

	var filePathName = "";

	//console.log("loading of file, if there are dataoverlays we load those too! "+fileName);

	var fileExtension =  fileName.substring(fileName.lastIndexOf('.')+1) ;
	fileExtensionLower = fileExtension.toLowerCase();

	if (fileExtensionLower.indexOf("dwg")==0 || fileExtensionLower.indexOf("dwf")==0 || fileExtensionLower.indexOf("dxf")==0 || fileExtensionLower.indexOf("dgn")==0 || fileExtensionLower.indexOf("pcf")==0){
		fileNamePath = cvjs_floorplanUrl+fileName;
	}
	else{
		if (cvjs_fileLocationAbsolutePathsOnly)  // we have not specified a path
			fileNamePath = cvjs_floorplanUrl+fileName;
		else
			fileNamePath = cvjs_floorplansRelativePath+fileName;
	}

	
	// 3.3.05f   - in case of custom modal
	if (cvjs_CompareFiles_CustomFileModalContent_flag){
		// the file-name is directly from the array
		fileNamePath = cvjs_CompareFiles_CustomFileModalContent[row-1].url;
	}
	
	
	
	//console.log("before loadDrawing "+floorPlan_div+" "+fileNamePath);
	// we hide everything in trial mode

	if (cvjs_fileLoadTrialMode){
			filesonserver = 0;
			for (var i=cvjs_maxfiles;i>1;i--){

				var l1 = "1floor"+i;
				var l2 = "2floor"+i;

				jQuery("#"+l1).hide();
				jQuery("#"+l2).hide();
			}
	}

	// load file
	if (cvjs_filename_list_status == 1){

		// here we need to reset all page change layout, etc.  2017-08-07
		// VVVVVV
		
		//////  2018-05-09  we clear the current redline before loading
		cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

		

		rest_nname[cvjs_active_floorplan_div_nr ].length = 0;

		cvjs_LoadDrawing(floorplan_div_Array[cvjs_active_floorplan_div_nr], fileNamePath );
	}

	
	
	
	
	
	
	// load redline
	if (cvjs_filename_list_status == 2){
		cvjs_clearDrawingStickyNotes();
		cvjs_StickyNoteRedlineUrl = cvjs_redlinesRelativePath+fileName;

		if (cvjs_redlinesAbsolutePathOnly) f_path = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path
//		if (cvjs_redlinesAbsolutePathOnly) cvjs_StickyNoteRedlineUrl = cvjs_filepathServerRedlines + fileName;    // if only absolute paths, set f_path to the absolute path



			 ///     ZZZZZZZ CLEAR REDLINE LOAD
			 //		console.log(vqRedlines.length)
			 // we clear everything if we are not putting redlines on top of each other
			 if (cvjs_loadMultipleRedlinesStickyNotes == false){


					for (i=0; i<vqRedlines.length; i++){
			if (cvjs_debug) 			console.log(i+" remove red"+vqRedlines[i]);
						vqRedlines[i].remove();
					}
					for (i=0; i<vqStickyNotes.length; i++){
			if (cvjs_debug) 			console.log(i+"  "+vqStickyNotes[i]+" remove note");
						vqStickyNotes[i].remove();
					}


					// 2017-07-10
					cvjs_stickyNotesRedlines = [];
					cvjs_stickyNotesRedlines.length = 0;

			if (cvjs_debug) 		console.log("cvjs_stickynote "+cvjs_stickynote);

					cvjs_deleteAllStickyNotes();
					cvjs_deleteAllRedlines();
					vqRedlines.length=0;
					vqStickyNotes.length=0;


			}

		//console.log("loading "+cvjs_StickyNoteRedlineUrl);
		cvjs_loadStickyNotesRedlines(floorplan_div_Array[cvjs_active_floorplan_div_nr]);

	}

	
	// load spaces
	// 3.3.07a
	if (cvjs_filename_list_status == 3){
		cvjs_SpaceObjectUrl = cvjs_spaceObjectsRelativePath + fileName;
		if (cvjs_debug) console.log("loading "+cvjs_SpaceObjectUrl);	
		cvjs_loadSpaceObjects(floorplan_div_Array[cvjs_active_floorplan_div_nr]);	
	}
		
	
	
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = false;
	jQuery('#cvjs_serverFileLoadModal').hide();
	jQuery( "#cvjs_serverFileLoadModal_table" ).hide();
}



var fileload_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


var cvjs_fileLoadToServer = false;



/**
 * Enables bitmaps to be loaded via server handler instead of direct load
 * @param {boolean} mode - true for bitmap file load through server handler
 */

function cvjs_loadBitmapsViaServerPath(mode){

	cvjs_bitmapFileNameIsServerPath_flag = mode;

}




/**
 * Enables file load through the icon interface, or allows it only through the encapsulating application
 * @param {boolean} mode - true for file load through File Manager, default is false
 */
function cvjs_allowFileLoadToServer(mode){

	cvjs_fileLoadToServer = mode;
}




/**
 * Calls the file manager, set the enable file manager load to true prior to calling this method
 * @param {string} floorplan_div - the div of the CADViewerJS canvas
 */

function cvjs_openFileLoadToServer(floorplan_div){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	cvjs_convertSpaceObject = false;


		cvjs_filename_list_status = 1;
		filesonserver = 0;



		if (!cvjs_fileLoadToServer){
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.FileLoadThroughApp);
			return;
		}

		if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
			fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
			// 3.1.21j .appendTo('body');
			jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
			jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left, top: 50+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top});
		}

		jQuery('#SelectFloorPlan').hide();
		jQuery('#SelectFloorPlanPanel').hide();

		jQuery('#SelectFloorPlanEdit').hide();
		jQuery('#SelectFloorPlanPanelEdit').hide();

		jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


		jQuery( "#serverFileModalName" ).html(lTable.languages[cvjs_currentLanguage].FileLoadModal.Header);
		jQuery( "#addFloorPlanTable").show();
		jQuery( "#addRedlineTable").hide();
		jQuery( "#infoFileModalNameDrawing" ).html(lTable.languages[cvjs_currentLanguage].FileLoadModal.DrawingFilename);

		jQuery( "#editFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].FileLoadModal.EditFloorplanInfo);
		jQuery( "#infoFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].FileLoadModal.DrawingFilename);


		cvjs_initializeFileSelector();
		//jQuery('#cvjs_serverFileLoadModal').modal('show');

}


var cvjs_fileLoadTrialMode = false;

function cvjs_setFileLoadTrialMode(loadMode){

	cvjs_fileLoadTrialMode = loadMode;
}

var cvjs_SVG_multiPages = [{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
},{ multiPages: 1,
                   currentPage:1,
                   pages : [
                        { fileName:"default", pageName:"Single Page"}
                   ]
}];

var cvjs_SVG_multiPagesFlag = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false];
var cvjs_multipageURL_FileNamePath  = "";
var cvjs_multipage_FileNamePath  = "";
var cvjs_multipagePDFtoSVG_tempDir = ""; 



/**
 * Build an internal navigational structure over a folder with SVG files named sequentially xx_1.svg, xx_2.svg....
 * @param {string} directory - server side name of the folder in which the svg files are placed. The folder should only contain the svg files to navigate over
 * @param {string} url_directory - url of the folder in which the svg files are placed.
 */

function  cvjs_buildMultiPageSVG(directory, url_directory){

	cvjs_multipageURL_FileNamePath = url_directory;

	var finalUrl = cvjs_serverHandlersPath + cvjs_serverListDirectoryController;

	// data
	var filelist_data = {};

	filelist_data['directory'] = directory;
	filelist_data['directoryurl'] = directory;

	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){

			//var multiPages[cvjs_active_floorplan_div_nr] =  { multiPages[cvjs_active_floorplan_div_nr]: 1, currentPage:1, pages : [ { fileName:"default", pageName:"Single Page"}]};

			var str = html;
			var n = str.split("<br>");
			if (n.length >= 1){

if (cvjs_debug) console.log("Creating multipage SVG page structure n.length="+n.length+" "+cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[0].fileName);

				cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].multiPages = n.length-1;
				cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].currentPage = 1;
				var buildPages = [];

				//multiPages[cvjs_active_floorplan_div_nr] = { multiPages[cvjs_active_floorplan_div_nr]: 1, currentPage:1, pages : [ { fileName:"default", pageName:"Single Page"}];
				var j=0;
				for (var i=0;i<n.length;i++){
					if ( n[i].indexOf(".svg")>0 || n[i].indexOf(".svgz")>0 ){
						//window.alert(n[i]+" "+(i));
						var n_string = n[i].substring(n[i].lastIndexOf('_')+1,n[i].indexOf('.svg'));
//						window.alert(n_string);
						var k = parseInt(n_string);
						//window.alert(k);
						var pname = "Page "+k;
//						window.alert(k+" "+pname+" "+n[i]);
						if (k>=1)
							cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages[k-1] = { fileName : n[i], pageName : pname };
						j++;
					}
				}
		//		cvjs_SVG_multiPages[cvjs_active_floorplan_div_nr].pages = buildPages;



				cvjs_SVG_multiPagesFlag[cvjs_active_floorplan_div_nr] = true;

			}

		}
	});

}







var filenames_data_url_name    = "filenames.rw";


function cvjs_loadServerFileList(mode){


//console.log("cvjs_loadServerFileList");

// load up the array with the file shortnames

// mode = 1  Floorplan Files
// mode = 2  Redlines


// 3.3.05b
if (cvjs_CompareFiles_CustomFileModalContent_flag){
		
	filesonserver = 0;
	//window.alert("we manually build the fileName list and abort "+cvjs_CompareFiles_CustomFileModalContent.length);
	
	for (i=0; i<cvjs_CompareFiles_CustomFileModalContent.length; i++){
	
//		fnArr_listdirectory_ShortName[i] = cvjs_CompareFiles_CustomFileModalContent[i].filename;
//		fnArr_listdirectory_FileName[i] = cvjs_CompareFiles_CustomFileModalContent[i].url.substring(cvjs_CompareFiles_CustomFileModalContent[i].url.lastIndexOf("/")+1);;

		// 3.3.05f
		fnArr_listdirectory_ShortName[i] = cvjs_CompareFiles_CustomFileModalContent[i].filenameText;
		fnArr_listdirectory_FileName[i] = cvjs_CompareFiles_CustomFileModalContent[i].filename;	
	}


	for (i=0; i<fnArr_listdirectory_FileName.length; i++){
	
		fnArr_ShortName[i] = fnArr_listdirectory_ShortName[i];
		fnArr_FileName[i] = fnArr_listdirectory_FileName[i];

		var j = i+1;
		var l1 = "1floor"+j+"_2";
		var l2 = "2floor"+j+"_4";

		var l3 = "1floor"+j+"_1";
		var l4 = "2floor"+j+"_1";

//console.log("l3="+l3+" fnArr_FileName[i]="+fnArr_listdirectory_FileName[i] +"   "+fnArr_listdirectory_ShortName[i] );

		jQuery("#"+l1).html(fnArr_listdirectory_FileName[i]);
		jQuery("#"+l2).html(fnArr_listdirectory_FileName[i]);

		jQuery("#"+l3).html(fnArr_listdirectory_ShortName[i]);
		jQuery("#"+l4).html(fnArr_listdirectory_ShortName[i]);

		filesonserver++;
	}
	
	
	
	
	for (var i=0;i<filesonserver;i++){
		var j = i+1;
		var l1 = "1floor"+j;
		var l2 = "2floor"+j;
		jQuery("#"+l1).show();
		jQuery("#"+l2).show();

	}

// hide objects acording to how many on server
	for (var i=cvjs_maxfiles;i>filesonserver;i--){

		var l1 = "1floor"+i;
		var l2 = "2floor"+i;
//console.log("hide i="+i+" l1="+l1+" l2="+l2);
		jQuery("#"+l1).hide();
		jQuery("#"+l2).hide();

	}

console.log("cvjs_CompareFiles_CustomFileModalContent_flag before show!");

	jQuery('#SelectFloorPlan').show();
	jQuery('#SelectFloorPlanPanel').show();

	jQuery('#cvjs_serverFileLoadModal').show();
	jQuery('#cvjs_serverFileLoadModal_table').show();
	
	
	return;
}
// 3.3.05b




var file;



if (mode==1){

	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_floorplansRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;

	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_floorplansRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_floorplansRelativePath;


	if (cvjs_fileLocationAbsolutePathsOnly) fpath = cvjs_floorplanUrl;    // if only absolute paths, set f_path to the absolute path


	//file =  cvjs_phpPath +"load-file.php?file="+ cvjs_floorplansRelativePath+filenames_data_url_name;
//	file =  cvjs_phpPath +"load-file.php?file="+ fpath+filenames_data_url_name;
	file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

	if (cvjs_loadFileControllerFlag)   // servlet load
		file =  cvjs_serverHandlersPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

if (cvjs_debug) 	console.log(" cvjs_loadServerFileList mode 1 "+file);


}




if (mode==2){

	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_redlinesRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;
	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_redlinesRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_redlinesRelativePath;

if (cvjs_debug) console.log("phpPath="+cvjs_phpPath+" 1 cvjs_loadServerFileList fpath="+fpath)


	if (cvjs_redlinesAbsolutePathOnly)
		fpath = cvjs_filepathServerRedlines;
	else
		fpath = cvjs_redlinesRelativePath;    // if only absolute paths, set f_path to the absolute path


if (cvjs_debug) console.log("ZZ"+cvjs_redlinesAbsolutePathOnly+"  "+cvjs_redlinesRelativePath+"  "+cvjs_filepathServerRedlines);



if (cvjs_debug) console.log(" 2 cvjs_loadServerFileList fpath="+fpath);    // if only absolute paths, set f_path to the absolute path

//	file =  cvjs_phpPath +"load-file.php?file="+ fpath+filenames_data_url_name;
	file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

//	cvjs_filepathServerRedlines

	if (cvjs_loadRedlinesFileControllerFlag) 
		file =  cvjs_serverHandlersPath +cvjs_serverLoadFileControllerRedlines+"?file="+ fpath+filenames_data_url_name;

if (cvjs_debug) console.log("ajax call: mode 2 file="+file);    // if only absolute paths, set f_path to the absolute path


}



// 3.3.07a
if (mode==3){

	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_spaceObjectsRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;
	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_spaceObjectsRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_spaceObjectsRelativePath;

if (cvjs_debug) console.log("phpPath="+cvjs_phpPath+" 1 cvjs_loadServerFileList fpath="+fpath)


	if (cvjs_spaceObjectsAbsolutePathOnly)
		fpath = cvjs_filepathServerSpaceObjects;
	else
		fpath = cvjs_spaceObjectsRelativePath;    // if only absolute paths, set f_path to the absolute path


if (cvjs_debug) console.log("ZZ"+cvjs_spaceObjectsAbsolutePathOnly+"  "+cvjs_spaceObjectsRelativePath+"  "+cvjs_filepathServerSpaceObjects);


if (cvjs_debug) console.log(" 2 cvjs_loadServerFileList fpath="+fpath);    // if only absolute paths, set f_path to the absolute path

//	file =  cvjs_phpPath +"load-file.php?file="+ fpath+filenames_data_url_name;
	file =  cvjs_phpPath +cvjs_serverLoadFileController+"?file="+ fpath+filenames_data_url_name;

//	cvjs_filepathServerRedlines

	if (cvjs_loadRedlinesFileControllerFlag) 
		file =  cvjs_serverHandlersPath +cvjs_serverLoadFileControllerRedlines+"?file="+ fpath+filenames_data_url_name;

if (cvjs_debug) console.log("ajax call: mode 3 file="+file);    // if only absolute paths, set f_path to the absolute path


}
// 3.3.07a


//console.log("file="+file);




jQuery.ajax({
  url:file,
  type: 'post',
  cache: false,
  success: function(binArray2){
		var version = binArray2.substring(0,6);  // (RW-2)

		fnArr_FileName.length = 0;
		fnArr_ShortName.length = 0;

if (cvjs_debug) console.log("loaded from server RW-2:"+binArray2);

		if (version.indexOf("RW")>=0){

	// use binArray to populate all arrays

			var arr_s = binArray2.split("|");
			var index = arr_s[1];
			var arr_cx = arr_s[2].replace(/&amp;/g,"&");
			arr_cx = arr_cx.split(";");

			for (var i=0; i<index; i++){
				fnArr_FileName[i] = arr_cx[i].replace(/&/g,"&amp;");
			}
			arr_cx = arr_s[3].replace(/&amp;/g,"&");
			arr_cx = arr_cx.split(";");

			for (var i=0; i<index; i++){
				fnArr_ShortName[i] = arr_cx[i].replace(/&/g,"&amp;");
			}

		}


// call the php file that displays the server content

//CCCC


	var finalUrl =	""; //2017-07-11  cvjs_serverHandlersPath + cvjs_serverListDirectoryController;

	// data
	var filelist_data = {};

	if (mode == 1){
		finalUrl =	cvjs_serverHandlersPath + cvjs_serverListDirectoryController;  // 2017-07-11

		filelist_data['directory'] = cvjs_filepathServer;
		filelist_data['directoryurl'] = cvjs_floorplansRelativePath;
		//console.log(finalUrl+"  "+cvjs_filepathServer+" "+cvjs_floorplansRelativePath);
	}


	if (mode == 2){

		finalUrl =	cvjs_serverHandlersPath + cvjs_serverListDirectoryControllerRedlines;  // 2017-07-11

		filelist_data['directory'] = cvjs_filepathServerRedlines;
		filelist_data['directoryurl'] = cvjs_redlinesRelativePath;

		//console.log(finalUrl+"  "+cvjs_redlinesRelativePath+"  "+cvjs_redlinesRelativePath);
	}

	
	
	// 3.3.07a
	if (mode == 3){

		finalUrl =	cvjs_serverHandlersPath + cvjs_serverListDirectoryControllerRedlines;  // 2017-07-11

		filelist_data['directory'] = cvjs_filepathServerSpaceObjects;
		filelist_data['directoryurl'] = cvjs_spaceObjectsRelativePath;

		//console.log(finalUrl+"  "+cvjs_redlinesRelativePath+"  "+cvjs_redlinesRelativePath);
	}
	// 3.3.07a

	
	
	

if (cvjs_debug) console.log("file list call:"+finalUrl);

	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(html){
if (cvjs_debug) console.log("server file list:"+html);

			var str = html;
			var n = str.split("<br>");

			// initialize number of files
			filesonserver=0;

//console.log("n="+n+"   fnArr_FileName.length="+ fnArr_FileName.length);

			var test_str = "";
				for (var jj=0;jj<fnArr_FileName.length;jj++){
					test_str = test_str + " " + fnArr_FileName[jj];
				}

if (cvjs_debug) console.log("This is empty if there is no .rw file on server test_str="+test_str);

fnArr_listdirectory_FileName = [];
fnArr_listdirectory_ShortName =[];
// list filenames on server
			if (n.length >= 2){
if (cvjs_debug) console.log("n.length="+n.length);
				for (var i=0;i<n.length-1;i++){
					fnArr_listdirectory_FileName[i] = n[i+1];
					var fname = n[i+1].split(".");
					fnArr_listdirectory_ShortName[i] = fname[0];
					//console.log("On Server fnArr_listdirectory_FileName="+i+"  "+n[i+1]+"  "+fname[0]);
				}
			}

//console.log("size of fnArr_FileName.length "+fnArr_FileName.length);

			for (i=0; i<fnArr_listdirectory_FileName.length; i++){
				for (j=0; j<fnArr_FileName.length; j++){
					var rep_str = fnArr_listdirectory_FileName[i];  // my element  2017-08-22
					var res_str = rep_str.replace(/&/g,"&amp;");
					//console.log("before check "+i+" "+j+" fileName "+fnArr_FileName[j]+"  res_str "+res_str);
					if (res_str.indexOf(fnArr_FileName[j])>=0 && res_str.length == fnArr_FileName[j].length){
					// the file on the server has a filename in the list
//console.log("we are updating "+fnArr_listdirectory_ShortName[i]+" to:"+fnArr_ShortName[j]);
						fnArr_listdirectory_ShortName[i] = fnArr_ShortName[j];
					}
				}
			}

			// we change the arrays

			//fnArr_ShortName = fnArr_listdirectory_ShortName;
			//fnArr_FileName = fnArr_listdirectory_FileName;

			for (i=0; i<fnArr_listdirectory_FileName.length; i++){

				fnArr_ShortName[i] = fnArr_listdirectory_ShortName[i];
				fnArr_FileName[i] = fnArr_listdirectory_FileName[i];

				var j = i+1;
				var l1 = "1floor"+j+"_2";
				var l2 = "2floor"+j+"_4";

				var l3 = "1floor"+j+"_1";
				var l4 = "2floor"+j+"_1";

console.log("l3="+l3+" fnArr_FileName[i]="+fnArr_listdirectory_FileName[i] +"   "+fnArr_listdirectory_ShortName[i] );

				jQuery("#"+l1).html(fnArr_listdirectory_FileName[i]);
				jQuery("#"+l2).html(fnArr_listdirectory_FileName[i]);

				jQuery("#"+l3).html(fnArr_listdirectory_ShortName[i]);
				jQuery("#"+l4).html(fnArr_listdirectory_ShortName[i]);

				filesonserver++;
			}



			// TRIAL FILE LOAD MODE, we simply set filesonserver to zero
			// Trialmode for fileload only, redlines are free
			if (cvjs_fileLoadTrialMode  && mode==1){

				filesonserver = 0;
			}


//console.log("we are done filesonserver="+filesonserver);

// show/hide objects in the file list according to how many files on server

			for (var i=0;i<filesonserver;i++){
				var j = i+1;
				var l1 = "1floor"+j;
				var l2 = "2floor"+j;
				jQuery("#"+l1).show();
				jQuery("#"+l2).show();

			}

// hide objects acording to how many on server
			for (var i=cvjs_maxfiles;i>filesonserver;i--){

				var l1 = "1floor"+i;
				var l2 = "2floor"+i;
//console.log("hide i="+i+" l1="+l1+" l2="+l2);
				jQuery("#"+l1).hide();
				jQuery("#"+l2).hide();

			}

//console.log("before show!");

			jQuery('#SelectFloorPlan').show();
			jQuery('#SelectFloorPlanPanel').show();

//GGGGG
		  }  // end success
		  ,error:function(data_e){
			  console.log("Error "+data_e);
			return;}


		});


		// we end up with displaying the file modal

		jQuery('#cvjs_serverFileLoadModal').show();
		jQuery('#cvjs_serverFileLoadModal_table').show();


	  }  // end success load file names

	});

}


function positionPopupUnlink(){

	if (active_modal == 1){
   		// do nothing

   	}
   	else{

   		 active_modal = 1;


		  if(!jQuery("#unlink_form").is(':visible')){
			return;
		  }
		  jQuery("#unlink_form").css({
			  left: 225,
			  top: 150,
			  position:'absolute'
		  });


		   jQuery('#unlink_Modal_header').html(lTable.languages[cvjs_currentLanguage].UnlinkModal.Header);

		   jQuery('#unlink_modal_file').html(lTable.languages[cvjs_currentLanguage].UnlinkModal.Text1+" <strong>"+delete_filename+"</strong>. "+lTable.languages[cvjs_currentLanguage].UnlinkModal.Text2);

		//   jQuery('#unlink_modal_file').html("Do you want to unlink all locations in drawing,<strong> "+delete_filename+"</strong>?");

		// jQuery('#unlink_modal_file_name').html(delete_filename+"?");

		  // Set opacity of SelectFloorPlanPanelEdit and block interaction
		  jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=40)");
		  // filter:alpha(opacity=40);
		  jQuery('#SelectFloorPlanPanelEdit').css("opacity", "0.40");

	}
}




function positionPopupClear(){

	if (active_modal == 1){
   		// do nothing

   	}
   	else{

   		 active_modal = 1;

	  if(!jQuery("#clear_form").is(':visible')){
		return;
	  }
	  jQuery("#clear_form").css({
		  left: 225,
		  top: 150,
		  position:'absolute'
	  });


	   jQuery('#clear_Modal_header').html(lTable.languages[cvjs_currentLanguage].ClearModal.Header);

	   jQuery('#clear_modal_file').html(lTable.languages[cvjs_currentLanguage].ClearModal.Text1+" <strong>"+delete_filename+"</strong>.");


	//   jQuery('#clear_modal_file').html("Do you want to clear all locations in drawing,<strong> "+delete_filename+"</strong>?");

	 //jQuery('#clear_modal_file_name').html(delete_filename+"?");

	  // Set opacity of SelectFloorPlanPanelEdit and block interaction
	  jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=40)");
	  // filter:alpha(opacity=40);
	  jQuery('#SelectFloorPlanPanelEdit').css("opacity", "0.40");

	}
}



function positionPopup(){


	if (active_modal == 1){
   		// do nothing

   	}
   	else{

   		 active_modal = 1;

		  if(!jQuery("#delete_form").is(':visible')){
			return;
		  }
		  jQuery("#delete_form").css({
			  left: 225,
			  top: 150,
			  position:'absolute'
		  });


		   jQuery('#delete_Modal_header').html(lTable.languages[cvjs_currentLanguage].DeleteModal.Header);

		jQuery('#delete_modal_file_name1').html(lTable.languages[cvjs_currentLanguage].DeleteModal.Text1+" <strong>"+delete_filename+"</strong> "+lTable.languages[cvjs_currentLanguage].DeleteModal.Text2);

		// jQuery('#delete_modal_file_name1').html("Deleting, <strong>"+delete_filename+"</strong>, will disable access to the floor plan, <strong> "+delete_floor+"</strong>, for all users.");

		 //jQuery('#delete_modal_file_name2').html("will disable access to the floor plan for all users.");


		  // Set opacity of SelectFloorPlanPanelEdit and block interaction
		  jQuery('#SelectFloorPlanPanelEdit').css("filter", "alpha(opacity=40)");
		  // filter:alpha(opacity=40);
		  jQuery('#SelectFloorPlanPanelEdit').css("opacity", "0.40");

	}
}


function delete_file_and_overlay(filename){

var finalUrl;

if (cvjs_filename_list_status == 1){




	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_floorplansRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;

	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_floorplansRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_floorplansRelativePath;

	if (cvjs_fileLocationAbsolutePathsOnly) fpath = cvjs_filepathServer;


	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(fpath+filename);


//window.alert("1 delete "+finalUrl);

//	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(cvjs_floorplansRelativePath+filename);

}
if (cvjs_filename_list_status == 2){





	var fpath = "";
	var flagloop = true;
	var counter1 = 0;
	var temp = cvjs_redlinesRelativePath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter1++;

			}
			else
				flagloop=false;
		}

		flagloop = true;
	var counter2 = 0;
		temp = cvjs_phpPath;
		while(flagloop){
			if (temp.indexOf("../")==0 ){
				temp = temp.substring(3);
				counter2++;

			}
			else
				flagloop=false;
		}

	if (counter2>1) {
		fpath =	cvjs_redlinesRelativePath.substring((counter2-1)*3);
	}
	else
		fpath =	cvjs_redlinesRelativePath;


	if (cvjs_redlinesAbsolutePathOnly) fpath = cvjs_filepathServerRedlines;    // if only absolute paths, set f_path to the absolute path

	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(fpath+filename);

//	finalUrl = cvjs_phpPath+'delete-file.php?file='+encodeURIComponent(cvjs_redlinesRelativePath+filename);

}


	jQuery.ajax({
	  url:finalUrl,
	  cache: false,
	  success: function(html){
	  }  // end success

	});

/*
	//for (var i=0; i<filesonserver; i++){

console.log("deleting name from list!!! "+filename);

	var i=0;
	while (i<filesonserver){
		if (filename.indexOf(fnArr_listdirectory_FileName[i])==0 && filename.length == fnArr_listdirectory_FileName[i].length ){

console.log("deleting name from list!!! "+filename);
			for (var j=0; j<filesonserver-1; j++){
				fnArr_listdirectory_FileName[j]= fnArr_listdirectory_FileName[j+1];
				fnArr_listdirectory_ShortName[j]= fnArr_listdirectory_ShortName[j+1];
			}
			i = filesonserver;
			filesonserver--;
		}
		i++;
	}

*/

//console.log(" We want to delete name from list!!! "+filename);


	var i=0;
	while (i<filesonserver){
		if (filename.indexOf(fnArr_FileName[i])==0 && filename.length == fnArr_FileName[i].length ){

//console.log("deletingarray number"+i+" "+filename+"  from list "+fnArr_FileName[i]);
			for (var j=i; j<filesonserver-1; j++){
				fnArr_FileName[j]= fnArr_FileName[j+1];
				fnArr_ShortName[j]= fnArr_ShortName[j+1];
			}
			i = filesonserver;
			filesonserver--;
		}
		i++;
	}



	// update filename_data_url
	save_filename_list();

}


var cvjs_redlinesAbsolutePathOnly = false;

/**
 * Sets the relative path for the redlines location
 * @param {string} serverPath - absolute path to the redlines location, "/home/cadviewerjs/redlines/"
 * @param {string} path - path to the redlines location, default is "../redlines"
 */

function cvjs_setRedlinesRelativePath(path, serverPath){

	cvjs_filepathServerRedlines = serverPath;
	cvjs_redlinesRelativePath = path;
	cvjs_redlinesAbsolutePathOnly = false;
}


/**
 * Sets the absolute path for the redlines location, relative path is not used
 * @param {string} path - abslute URL to the redlines location
 * @param {string} serverPath - absolute path to the redlines location, "/home/cadviewerjs/redlines/"
 */
function cvjs_setRedlinesAbsolutePath(path,serverPath){

	cvjs_filepathServerRedlines = serverPath;
	cvjs_redlinesRelativePath = path;
	cvjs_redlinesAbsolutePathOnly = true;

}




function cvjs_openRedlineSaveModal(floorplan_div){


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

if (cvjs_debug) 	console.log("cvjs_openRedlineSaveModal");


	//cvjs_fileLoaderRedlineMode = true;
	cvjs_fileSaverRedlineMode = true;   // 2017-07-11

	cvjs_filename_list_status = 2;
	filesonserver = 0;


	if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
		fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
		jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}

	jQuery('#attention_bitmap').hide();

	jQuery('#SelectFloorPlan').hide();
	jQuery('#SelectFloorPlanPanel').hide();

	jQuery('#SelectFloorPlanEdit').hide();
	jQuery('#SelectFloorPlanPanelEdit').hide();

	jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


	jQuery( "#serverFileModalName" ).html(lTable.languages[cvjs_currentLanguage].SaveRedlineModal.Header);
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").show();
	jQuery( "#infoFileModalNameDrawing" ).html(lTable.languages[cvjs_currentLanguage].SaveRedlineModal.RedlineFilename);


	jQuery( "#editFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].SaveRedlineModal.EditRedlineInfo);
	jQuery( "#infoFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].SaveRedlineModal.RedlineFilename);


	var textstring = "<input id=\"uploadredline_name_tag\" type=\"text3_red\" class=\"name_tags2_red\" value=\""+"redline-01.js"+"\">";
	jQuery('#inputRedlineFileName').html(textstring);

	//jQuery('#cvjs_serverFileLoadModal').show();


if (cvjs_debug) console.log("cvjs_openRedlineSaveModal cvjs_loadServerFileList(2)");
 	cvjs_loadServerFileList(2);

}


function cvjs_openRedlineLoadModal(floorplan_div){

	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


if (cvjs_debug) 	console.log("cvjs_openRedlineLoadModal ");

	cvjs_fileLoaderRedlineMode = true;


	cvjs_filename_list_status = 2;
	filesonserver = 0;



	if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
		fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
		jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}


	jQuery('#attention_bitmap').hide();

	jQuery('#SelectFloorPlan').hide();
	jQuery('#SelectFloorPlanPanel').hide();

	jQuery('#SelectFloorPlanEdit').hide();
	jQuery('#SelectFloorPlanPanelEdit').hide();

	jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


	jQuery( "#serverFileModalName" ).html(lTable.languages[cvjs_currentLanguage].OpenRedlineModal.Header);
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html(lTable.languages[cvjs_currentLanguage].OpenRedlineModal.RedlineFilename);


	jQuery( "#editFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].OpenRedlineModal.EditRedlineInfo);
	jQuery( "#infoFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].OpenRedlineModal.RedlineFilename);

/*
	jQuery( "#serverFileModalName" ).html("CADViewer JS - Open Redline");
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html("REDLINE / FILENAME");


	jQuery( "#editFloorPlanInfoText" ).html("Edit Redline Info");
	jQuery( "#infoFloorPlanInfoText" ).html("REDLINE / FILENAME");
*/

if (cvjs_debug) console.log("cvjs_openRedlineLoadModal cvjs_loadServerFileList(2)");

 	cvjs_loadServerFileList(2);
}



var blackwhiteMode = 0;
var cvjs_original_background = "";

function cvjs_toggleBlackWhite(floorplan_div){

	//window.alert(currentLoadedDrawingFullName+"   "+floorplan_div);

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (cvjs_debug) console.log(floorplan_div.lastIndexOf("_svg")+"  "+(floorplan_div.length-4));
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}
	
	
	
	
	var last3 = currentLoadedDrawingFullName.slice(-2);

	blackwhiteMode++;
	if (blackwhiteMode<1 || blackwhiteMode>3) blackwhiteMode = 1;

	if (last3.indexOf("js")>0 ){

		if (blackwhiteMode==1) {
			cvjs_original_background = cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr].toString();
			//console.log("original"+cvjs_original_background+"  "+cvjs_currentBackgroundColor+" to string"+cvjs_currentBackgroundColor.toString());
			cvjs_colorAllLayersInDrawing_InvertBackground("000000", floorplan_div);

		}
		if (blackwhiteMode==2) cvjs_colorAllLayersInDrawing_InvertBackground("FFFFFF", floorplan_div);
		if (blackwhiteMode==3) {
			cvjs_setBackgroundColorHex(cvjs_original_background, floorplan_div);
			//console.log(currentLoadedDrawingFullName);
			cvjs_LoadDrawing(floorplan_div, currentLoadedDrawingFullName);
		}
	}
	else{
		// we are loading something converted into svg

		if (blackwhiteMode==1){
			cvjs_original_background = cvjs_currentBackgroundColor[cvjs_active_floorplan_div_nr].toString();
			//console.log("original"+cvjs_original_background+"  "+cvjs_currentBackgroundColor+" to string"+cvjs_currentBackgroundColor.toString());
			cvjs_colorAllLayersInDrawing_InvertBackground_SVG("000000", blackwhiteMode, floorplan_div);
		}
		if (blackwhiteMode==2) cvjs_colorAllLayersInDrawing_InvertBackground_SVG("FFFFFF", blackwhiteMode, floorplan_div);
		if (blackwhiteMode==3) {
			cvjs_colorAllLayersInDrawing_OriginalColor_SVG(floorplan_div);
		}
	}
}


function cvjs_colorAllLayersInDrawing_OriginalColor_SVG(floorplan_div){

//	   cvjs_setBackgroundColorHex("FFFFFF");


//window.alert("OriginalColor  "+blackwhiteMode)

	   var oArr = {};
	   jQuery("*[id]").each(function() {
//		   var id = jQuery(this).attr('id');
		   
			try{
				var id = jQuery(this).attr('id');
				var searchString = "[id^="+floorplan_div+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
				   if (!oArr[id]) oArr[id] = true;
				}
			   		
			}
			catch (err) { 
			//	console.log(err+" XX"+id+"XX");
			}

		   
//		   if (!oArr[id]) oArr[id] = true;
	   });

	   for (var prop in oArr){

			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){
					jQuery(target).css("stroke", cvjs_SVGLineColorArray[prop]);
					jQuery(target).css("fill", cvjs_SVGFillColorArray[prop]);
				}
			}catch(err){}
		}

	//console.log("before call original color:"+cvjs_original_background);
	cvjs_setBackgroundColorHex(cvjs_original_background, floorplan_div);

};

var cvjs_SVGLineColorArray = {};
var cvjs_SVGFillColorArray = {};
var oArr = {};

function cvjs_colorAllLayersInDrawing_InvertBackground_SVG(hexColor, bwMode, floorplan_div){


//	try{
//		cvjs_setBackgroundColorHex(invertHex(hexColor));
//	}
//	catch(err){
//	//	console.log("3 "+err);
//	}


//	var myDiv= '#'+'#'+floorplan_div_Array[cvjs_active_floorplan_div_nr];

// 	jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).removeClass("sClr_red");


	//if (true) return;


	if (bwMode == 1){

	   cvjs_setBackgroundColorHex("FFFFFF", floorplan_div);
	   cvjs_SVGFillColorArray = {}
	   cvjs_SVGLineColorArray = {}
	   var strokeCol = "#"+hexColor;
	   oArr = {};
	   jQuery("*[id]").each(function() {

			try{
				var id = jQuery(this).attr('id');
				var searchString = "[id^="+floorplan_div+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
				   if (!oArr[id]) oArr[id] = true;
				}
		  
		   	}
			catch (err) { 
			//	console.log(err+" XX"+id+"XX");
			}


//		var id = jQuery(this).attr('id');
//		   if (!oArr[id]) oArr[id] = true;
	   });

	   for (var prop in oArr){

			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){

					cvjs_SVGLineColorArray[prop]= jQuery(target).css("stroke");
					cvjs_SVGFillColorArray[prop]= jQuery(target).css("fill");

					if (cvjs_SVGLineColorArray[prop]!="none") jQuery(target).css("stroke", strokeCol);
					if (cvjs_SVGFillColorArray[prop]!="none") jQuery(target).css("fill", strokeCol);
				}
			}catch(err){}
		}

	}



/*



	if (bwMode == 1){
	   cvjs_setBackgroundColorHex("FFFFFF");
	   cvjs_SVGFillColorArray = {}
	   cvjs_SVGLineColorArray = {}
	   oArr = {};
	   jQuery("*[id]").each(function() {
		   var id = jQuery(this).attr('id');
		   if (!oArr[id]) oArr[id] = true;
		   var target = "#"+id;
			if (id.indexOf("cv_")==0){
				var valStroke = jQuery(target).css("stroke");
				var valFill = jQuery(target).css("fill");
				cvjs_SVGLineColorArray[prop] = valStroke;
				cvjs_SVGFillColorArray[prop] = valFill;

				var strokeCol = "#"+hexColor;
				jQuery(target).css("stroke", strokeCol);
				if (jQuery(target).css("fill") == "none"){
				}
				else
					jQuery(target).css("fill", strokeCol);

			}
	   });

	   for (var prop in oArr){

			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){
					var valStroke = jQuery(target).css("stroke");
					var valFill = jQuery(target).css("fill");
					cvjs_SVGLineColorArray[prop] = valStroke;
					cvjs_SVGFillColorArray[prop] = valFill;

					var strokeCol = "#"+hexColor;
					jQuery(target).css("stroke", strokeCol);
					if (jQuery(target).css("fill") == "none"){
					}
					else
						jQuery(target).css("fill", strokeCol);

				}
			}catch(err){}
		}
	}

*/

	if (bwMode == 2){

	   cvjs_setBackgroundColorHex("000000", floorplan_div);
		var strokeCol = "#"+hexColor;
		for (var prop in oArr){
			try{
				var target = "#"+prop;
				if (jQuery(target).attr("id").indexOf("cv_")==0){
					if (cvjs_SVGLineColorArray[prop]!="none") jQuery(target).css("stroke", strokeCol);
					if (cvjs_SVGFillColorArray[prop]!="none") jQuery(target).css("fill", strokeCol);
				}
			}catch(err){}
		}

	}



/*
console.log("before class");

	var cArr = {};
	jQuery("*[class]").each(function() {
		console.log("here "+this);
		var strokeCol =  "#"+"FF0000"; // "#"+hexColor;
		jQuery(this).css("stroke", strokeCol);
	});

//console.log("after class");
*/

};


/**
 * Create an internal array with all fill colors on all SVG graphical objects.
 */
function cvjs_storeFillColors(){
	

   cvjs_SVGFillColorArray = {}
   oArr = {};
   jQuery("*[id]").each(function() {
	   var id = jQuery(this).attr('id');
	   if (!oArr[id]) oArr[id] = true;
   });

   for (var prop in oArr){
		try{
			var target = "#"+prop;
			if (jQuery(target).attr("id").indexOf("cv_")==0){
				cvjs_SVGFillColorArray[prop]= jQuery(target).css("fill");
			}
		}catch(err){}
	}

	
}





function cvjs_colorAllLayersInDrawing_InvertBackground(hexColor, floorplan_div){


	var objectColor = "#"+hexColor;



	jQuery("g[stroke]", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr])).each(function (index, item) {
		item = jQuery(item);
		try{
			item.attr('stroke', objectColor);
		}
		catch(err){
			//console.log("1 "+err);
		}
	});


	jQuery("g[fill]", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr])).each(function (index, item) {
		item = jQuery(item);
		try{
			var fill = item.attr('fill');
			if (fill!="none") item.attr('fill', objectColor);
		}
		catch(err){
//			console.log("2 "+err);
		}
	});


try{

	cvjs_setBackgroundColorHex(invertHex(hexColor), floorplan_div);
}
catch(err){
//	console.log("3 "+err);
}



}


function invertHex(hexnum){
  if(hexnum.length != 6) {

	if (cvjs_debug) console.log("error hexnum "+hexnum);

    console.error("Hex color must be six hex numbers in length.");
    return false;
  }

  hexnum = hexnum.toUpperCase();
  var splitnum = hexnum.split("");
  var resultnum = "";
  var simplenum = "FEDCBA9876".split("");
  var complexnum = new Array();
  complexnum.A = "5";
  complexnum.B = "4";
  complexnum.C = "3";
  complexnum.D = "2";
  complexnum.E = "1";
  complexnum.F = "0";

  for(i=0; i<6; i++){
    if(!isNaN(splitnum[i])) {
      resultnum += simplenum[splitnum[i]];
    } else if(complexnum[splitnum[i]]){
      resultnum += complexnum[splitnum[i]];
    } else {
      console.error("Hex colors must only include hex numbers 0-9, and A-F");
      return false;
    }
  }

  return resultnum;
}



var	cvjs_filepathServerInsertImages = "";
var	cvjs_insertImagesRelativePath = "../drawings/inserted_image_objects/";



var cvjs_insertimagesAbsolutePathOnly = false;

/**
 * Sets the relative path for the insert image object location
 * @param {string} path - path to the inserted images location, default is "../drawings/inserted_image_objects/"
 * @param {string} serverPath - absolute path to the inserted images location, "/home/cadviewerjs/drawings/mypath/inserted_image_objects/"
 */

function cvjs_setInsertImageObjectsRelativePath(path, serverPath){

	cvjs_filepathServerInsertImages = serverPath;
	cvjs_insertImagesRelativePath = path;


	cvjs_imageObjectServerName = serverPath+"imageObjects.js";  // generic object name
	cvjs_imageObjectUrl = path+"imageObjects.js";  // generic object name

	cvjs_insertimagesAbsolutePathOnly = false;
}


/**
 * Sets the basolute path for the insert image object location, relative path is not used
 * @param {string} path - absolute http/Url path to the inserted images location,
 * @param {string} serverPath - absolute path to the inserted images location, "/home/cadviewerjs/drawings/mypath/inserted_image_objects/"
 */

function cvjs_setInsertImageObjectsAbsolutePath(path, serverPath){

	cvjs_filepathServerInsertImages = serverPath;
	cvjs_insertImagesRelativePath = path;

	cvjs_imageObjectServerName = serverPath+"imageObjects.js";  // generic object name
	cvjs_imageObjectUrl = path+"imageObjects.js";  // generic object name

	cvjs_insertimagesAbsolutePathOnly = true;

}


/**
 * Sets the basolute path for the insert image object location, relative path is not used
 * @param {string} path - absolute http/Url path to the inserted images location,
 * @param {string} serverPath - absolute path to the inserted images location, "/home/cadviewerjs/drawings/mypath/inserted_image_objects/"
 * @param {string} fileName - filename, "myobject.js"
 */

function cvjs_setInsertImageObjectsAbsolutePath_FileName(path, serverPath, fileName){

	cvjs_filepathServerInsertImages = serverPath;
	cvjs_insertImagesRelativePath = path;

	fileName = fileName.replace(/ /g, '_');
	
	cvjs_imageObjectServerName = serverPath+"/imageObjects_"+fileName+".js";  // generic object name
	cvjs_imageObjectUrl = path+"/imageObjects_"+fileName+".js";  // generic object name

	cvjs_insertimagesAbsolutePathOnly = true;

}









function cvjs_add_image( ){
	//console.log(currentImageNoteId);
	document.getElementById("upfile_image").click();
}



function add_file_object_image(obj){

var file = obj.value;

var size;
var path;
var vval;


var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];


try{
	size = obj.files[0].size;
	path = obj.files[0].name;
	vval = obj.files[0].path;

if (cvjs_debug) 	console.log(size+"  "+path+"  "+vval)
}catch(err) {
	console.log(err);

	return;

};


var fileName = file.split("\\");
var file_and_ext = fileName[fileName.length-1];
var illegal_character = 0;

if (file_and_ext.indexOf("+")>-1 || file_and_ext.indexOf("%")>-1)
	illegal_character = 1;

if (illegal_character == 1){
		jQuery('#attention_1').html("Attention: Illegal character!");
		jQuery('#attention_2').html("Illegal character in file name! Please rename and try again.");
		jQuery('#attention_bitmap').show();
}
else{

// make the variable for the next available floorplan
	var fileExt = fileName[fileName.length-1].split(".");

	var formats = ".dwf|.dxf|.dwg|.png|.gif|.jpg|.svg|.svgz|.js|.pdf|.dgn|.pcf";
	if (formats.indexOf(fileExt[fileExt.length-1].toLowerCase())==-1){

		jQuery('#attention_1').html("Attention: Format not supported!");
		jQuery('#attention_2').html("CADViewer JS supports the following: <br> AutoCAD Formats: DWG, DXF, DWF <br> MicroStation Formats: DGN, PCF <br>Bitmap Formats: JPG, GIF, PNG <br>Scalable Vector Graphics: SVG and SVGZ. <br>Acrobat: PDF<br>CADViewer JS: .JS JavaScript files. ");
		jQuery('#attention_bitmap').show();
	}
	else{  // file is supported
		// check if file already is uploaded


		// Demo mode, only a single file is allowed to be uploads
		if (cvjs_fileLoadTrialMode) filesonserver=0;


		var check_flag = 0;
		for (var i=0; i<filesonserver; i++){
			if (fnArr_FileName[i].indexOf(file_and_ext) == 0){
				check_flag = 1;
			}
		}

		if (check_flag == 1){
			jQuery('#attention_1').html("Attention:");
			jQuery('#attention_2').html(file_and_ext+" has already been uploaded! ");
			jQuery('#attention_bitmap').show();
		}
		else{  // upload file

			var location = "#1floor"+1;


			var phpUpload_location = "";

			if (externalServerPhpUpload)
				phpUpload_location = cvjs_phpUploadPath;
			else
				phpUpload_location = cvjs_phpPath;

					
			
			jQuery(location).html("");
			jQuery(location).axuploader({
				url: phpUpload_location+'upload_2.php',
				finish:function(x,files){

// check if PDF version is supported
					//console.log("uploaded current note " + currentImageNoteId+" "+file_and_ext);
					vqImageNotes[currentImageNoteId].data("imageObject", file_and_ext);
					//jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");

//window.alert("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");					
					// 3.1.21k
					if (cvjs_buildFolderTree_crossDomain)
						jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");
					else
						jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");


					jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).css("width", vqImageNotes[currentImageNoteId].data("imageWidth")+8);
					jQuery('#cvjs_floorPlanInsertImage').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
					//jQuery('#cvjs_floorPlanInsertImage').css("width", "auto");
					jQuery('#cvjs_floorPlanInsertImageTop').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));

/***  save load structure....
					for (var imageObject in cvjs_insertImageObjects){
							if (cvjs_insertImageObjects[imageObject].id == (currentImageNoteId+1)){
								cvjs_insertImageObjects[imageObject].imageObject = file_and_ext;

								jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+cvjs_insertImageObjects[imageObject].imageObject+"' height='"+cvjs_insertImageObjects[imageObject].imageHeight+"' />");
								jQuery('#cvjs_floorPlanInsertImageEncapsulate').css("width", cvjs_insertImageObjects[imageObject].imageWidth+8);
								jQuery('#cvjs_floorPlanInsertImage').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
								jQuery('#cvjs_floorPlanInsertImageTop').css("width", cvjs_insertImageObjects[imageObject].imageWidth);
							}
					}
***/
				},
				enable:true,
				fileObject:obj,
				remotePath:function(){

					//console.log("remotePath!! ");
					// here we have to return dependent on what we are loading in!
										
					return cvjs_filepathServerInsertImages;
				}
			});


			// do not remove  jQuery(location).html(fileName[0]);

		}
	}


	} // illegal character

}

var cvjs_insertImageObjects;
var imageObjects_loaded = false;
var current_image_js_initialized = 0;
var cvjs_imageObjectUrl = "../drawings/demo/inserted_image_objects/"+"imageObjects.js"
var cvjs_imageObjectServerName = "../drawings/demo/inserted_image_objects/"+"imageObjects.js"
var cvjs_imageObjectName ;





/**
 * Load all object image links
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_loadAllImageLinks(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



		imageObjects_loaded  = false;
		if (current_image_js_initialized == 0){
			current_image_js_initialized = 1;
			cvjs_imageObjectName = cvjs_imageObjectUrl ;

	//console.log("before loadJSbase redline "+cvjs_StickyNoteRedlineUrl);
			loadJSbase(cvjs_imageObjectUrl );
		}else{
	//console.log("replace "+current_jsRedlinename+"  "+cvjs_StickyNoteRedlineUrl);
		
			replacejscssfile(current_jsRedlinename, cvjs_imageObjectUrl, "js");
			cvjs_imageObjectName = cvjs_imageObjectUrl;
		}
		cvjs_loadImageObjectTimer();
}


function cvjs_loadImageObjectTimer(){

//console.log("imageObjectTimer");

	// make sure it is loaded
	if (imageObjects_loaded){
		load_failures=0;

		var rightadjustment = 0;
		cvjs_currentImageLink_id = 0;

		//console.log(vqImageNotes.length);

		if (vqImageNotes.length>0){
			for (var i=0; i<vqImageNotes.length; i++){
						//console.log("delete "+i);
				vqImageNotes[i].data("deleted", true);
				var dTransform = "S0.001";
				vqImageNotes[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqImageNotes.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;

		for (var imageObject in cvjs_insertImageObjects){
			//console.log("loop id "+cvjs_currentImageLink_id+"  "+cvjs_insertImageObjects[imageObject].transform);
			make_imageIcon(cvjs_currentImageLink_id, cvjs_insertImageObjects[imageObject].transform, cvjs_insertImageObjects[imageObject].imageObject, cvjs_insertImageObjects[imageObject].currentPage, cvjs_insertImageObjects[imageObject].username, cvjs_insertImageObjects[imageObject].userid);
			cvjs_currentImageLink_id++;
			cvjs_currentImageLink_underbar++;
		}

	}else{
		if (load_failures < 80){
			    setTimeout(function(){cvjs_loadImageObjectTimer()},256);
    	}
    	else{
    		if (cvjs_debug) console.log("Object load failed! - please check if imageObject Url is set correct: ");
    	}
	}

}



function make_imageIcon(imageNoteId, tTransform_c, imageObject, currentPage, username, userid){


	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	var rightadjustment = 0;
	if ((imageNoteId+1)<10) rightadjustment = 3;

	//cvjs_currentImageLink_underbar = imageNoteId;

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0,0h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0"}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,11h11v8h-11v-8h2").attr({stroke: "#000000", "stroke-width" : "0.5"}),
								  cvjs_rPaper[cvjs_active_floorplan_div_nr].text(3+rightadjustment,9,"#"+(imageNoteId + 1)).attr({"font-size": "8px", "font-style": "italic", stroke: "#000000", "stroke-width" : "0.3", "fill" : "#000000", "fill-opacity" : 1.0}),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M4,19 8,14 10,16 12.5,15 15,19").attr({stroke: "#000000", "stroke-width" : "0.5", "fill": "#000000"}))   ;

	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});

//console.log("tTransform_c"+tTransform_c);

	tRubberBand_c.attr({	fill: '#DCCCFF', "fill-opacity": "0.8", stroke: '#000', 'stroke-opacity': "1" });

	cvjs_currentStickyNote_transform = tTransform_c;

	var cImageNoteItemX = tRubberBand_c.data("node", cvjs_currentImageLink_underbar);
	vqImageNotes.push(cImageNoteItemX);


	currentImageNoteId = vqImageNotes.length-1;

	//console.log("after push"+currentImageNoteId);

	vqImageNotes[imageNoteId].data("id", imageNoteId+1);
	vqImageNotes[imageNoteId].data("name", "object"+(imageNoteId+1));
	vqImageNotes[imageNoteId].data("layer", "objectLayer");
	vqImageNotes[imageNoteId].data("group", "unassigned");
	vqImageNotes[imageNoteId].data("username", username);
	vqImageNotes[imageNoteId].data("userid", userid);
	vqImageNotes[imageNoteId].data("currentPage", currentPage);
	vqImageNotes[imageNoteId].data("imageObject", imageObject);
	vqImageNotes[imageNoteId].data("imageHeight", 450);
	vqImageNotes[imageNoteId].data("imageWidth", 600);
	vqImageNotes[imageNoteId].data("transform", tTransform_c);


	jQuery('#cvjs_floorPlanInsertImage').html("");


/*
					OBJECT_1: {
						name: "object1",
						id: "1",
						layer: "ObjectLayer",
						group: "unassigned",
						username: "James Smith",
						userid: "user_01",
						currentPage: 1,
						insertX: 200,
						insertY: 300,
						imageObject: "",
						imageHeight: 450,
						imageWidth: 600
					}
*/



	vqImageNotes[currentImageNoteId].mousedown(function(e){

		currentImageNoteId = this.data("node");

		jQuery('#cvjs_imageObject').html("<b>"+lTable.languages[cvjs_currentLanguage].ImageObjectModal.Header+(currentImageNoteId+1)+"</b>");

//console.log("opening and image is "+currentImageNoteId+" "+cvjs_insertImagesRelativePath+" "+vqImageNotes[currentImageNoteId].data("imageObject"));

		if (vqImageNotes[currentImageNoteId].data("imageObject")=="" ){
			jQuery('#cvjs_floorPlanInsertImage').html("");
		}else{			
			// 3.1.21l
			if (cvjs_buildFolderTree_crossDomain)
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_serverHandlersPath+cvjs_serverLoadFileController+"?file="+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");
			else
				jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[currentImageNoteId].data("imageHeight")+"' />");	
			//jQuery('#cvjs_floorPlanInsertImage').html("<img src='"+cvjs_insertImagesRelativePath+"/"+vqImageNotes[currentImageNoteId].data("imageObject")+"' height='"+vqImageNotes[imageNoteId].data("imageHeight")+"' />");

			jQuery('#cvjs_floorPlanInsertImageEncapsulate_'+floorplan_div).css("width", vqImageNotes[currentImageNoteId].data("imageWidth")+8);
			jQuery('#cvjs_floorPlanInsertImage').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
			jQuery('#cvjs_floorPlanInsertImageTop').css("width", vqImageNotes[currentImageNoteId].data("imageWidth"));
		}

		jQuery( "#cvjs_floorPlanInsertImageEncapsulate_"+floorplan_div).show();
	}).mousemove(function(e){
		//console.log(cvjs_currentImageLink_underbar);
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(highlightColor_ImageNotes);
	}).mouseout(function(e){
		currentImageNoteId = this.data("node");
		vqImageNotes[currentImageNoteId].attr(defaultColor_ImageNotes);
	}).mouseup(function(e){


	}).touchstart(function(e){
	}).touchmove(function(e){
	}).touchend(function(e){
	}).dblclick(function(e){
	});

}


//  GENERIC LOAD OF REDLINES THROUGH JQUERY AND SETTING OF INLINE SCRIPT


function cvjs_addInlineScript(cvjs_script){

	jQuery(function () {
	  jQuery('<script>')
		.attr('type', 'text/javascript')
		.text(cvjs_script)
		.appendTo('head');
	});
}



// SAVE ALL IMAGES


/**
 * Saves all image links
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

 function cvjs_saveAllImageLinks(floorplan_div){

 
 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

 
	if 	(vqImageNotes.length<1) return;

	var dataUrl="";

	var comma_flag =0;

	dataUrl = dataUrl +"var cvjs_insertImageObjects = {\n";

	for (spc in vqImageNotes)
	{
		if (vqImageNotes[spc].data("deleted") == true ){
			// console.log("file.js deleted node "+vqRedlines[spc].data("deleted"));    // we dont have to tell the node is deleted
		}
		else{  // node exists

			if (comma_flag == 0){
				comma_flag = 1
			}
			else{
				dataUrl = dataUrl +"						,\n";
			}

			dataUrl = dataUrl +"					"+"OBJECT_"+(vqImageNotes[spc].data("node")+1)+": {\n";
			dataUrl = dataUrl +"						name: \""+vqImageNotes[spc].data("name")+"\",\n";
			dataUrl = dataUrl +"						id: \""+vqImageNotes[spc].data("id")+"\",\n";
			dataUrl = dataUrl +"						layer: \""+vqImageNotes[spc].data("layer")+"\",\n";
			dataUrl = dataUrl +"						group: \""+vqImageNotes[spc].data("group")+"\",\n";
			dataUrl = dataUrl +"						username: \""+vqImageNotes[spc].data("username")+"\",\n";
			dataUrl = dataUrl +"						userid: \""+vqImageNotes[spc].data("userid")+"\",\n";
			dataUrl = dataUrl +"						currentPage: "+vqImageNotes[spc].data("currentPage")+",\n";
			dataUrl = dataUrl +"						imageObject: \""+vqImageNotes[spc].data("imageObject")+"\",\n";
			dataUrl = dataUrl +"						imageHeight: \""+vqImageNotes[spc].data("imageHeight")+"\",\n";
			dataUrl = dataUrl +"						imageWidth: \""+vqImageNotes[spc].data("imageWidth")+"\",\n";
			dataUrl = dataUrl +"						transform: \""+vqImageNotes[spc].data("transform")+"\"\n";
			dataUrl = dataUrl +"					}\n";

		} // case node exists
	}

	dataUrl = dataUrl +"}\n\n";

	dataUrl = dataUrl +"\njQuery(document).ready(function() { \n";
	dataUrl = dataUrl +"	imageObjects_loaded = true; \n";
	dataUrl = dataUrl +"}); \n";
	dataUrl = dataUrl +"imageObjects_loaded = true; \n";


//		console.log(dataUrl);

//		prompt("Copy to clipboard: Ctrl+C, Enter", dataUrl);

//		console.log(vqStickyNotes[0]);

	var cvjs_phpSaveImagesUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;

	var js_data = {};
	js_data['file'] = cvjs_imageObjectServerName;
	js_data['file_content'] = dataUrl;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

	jQuery.ajax({
	  url:cvjs_phpSaveImagesUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){

		var status ="Save Image Notes: "+html;

		if ((!html || 0 === html.length)) status = "Image Icons Saved";


//		jQuery('#cvjs_informationModalText').html(status);
//		jQuery('#info_messageModal').modal('show');

		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], status);


		if (vqImageNotes.length>0){
			for (var i=0; i<vqImageNotes.length; i++){
						//console.log("delete "+i);
				vqImageNotes[i].data("deleted", true);
				var dTransform = "S0.001";
				vqImageNotes[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqImageNotes.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;


	  }
	});


}



/**
 * Clears all image links from the canvas
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 
function cvjs_clearAllImageLinks(floorplan_div){

 	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


		if (vqImageNotes.length>0){
			for (var i=0; i<vqImageNotes.length; i++){
						//console.log("delete "+i);
				vqImageNotes[i].data("deleted", true);
				var dTransform = "S0.001";
				vqImageNotes[i].attr({'transform': dTransform, "opacity" : "0.01"});
			}
			vqImageNotes.length = 0;
		}
		cvjs_currentImageLink_id =0;
		cvjs_currentImageLink_underbar =0;

}




 
 /**
 * Opens the File Loader Modal to load and convert drawing with space objects
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
  
function cvjs_loadDrawingsWithSpaceObjects(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;


		cvjs_filename_list_status = 1;
		filesonserver = 0;

		cvjs_convertSpaceObject = false

		if (!cvjs_fileLoadToServer){
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.FileLoadThroughApp);
			return;
		}

		if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
			fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
//			jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top}); ;
// 3.0.14e
			jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().left, top: 50+jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top}); ;


		}

		jQuery('#SelectFloorPlan').hide();
		jQuery('#SelectFloorPlanPanel').hide();

		jQuery('#SelectFloorPlanEdit').hide();
		jQuery('#SelectFloorPlanPanelEdit').hide();

		jQuery( "#serverFileModalName" ).html(lTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.Header);

		jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("<canvas id=\"dummy\" width=\"36\" height=\"12\"></canvas>"+lTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.BuildRoomTextHyperlinks+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input type=\"checkbox\" id=\"cvjs_convert_RL_TL_checkbox\" value=\"conversion_status\"><br><canvas id=\"dummy\" width=\"16\" height=\"8\">");
		jQuery("#cvjs_convert_RL_TL_checkbox")
			.change(function(){
				if( jQuery(this).is(":checked") ){
					cvjs_convertSpaceObject = true;
				}else{
					cvjs_convertSpaceObject = false;
				}
			});


		jQuery( "#addFloorPlanTable").show();
		jQuery( "#addRedlineTable").hide();

		jQuery( "#infoFileModalNameDrawing" ).html(lTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.DrawingFilename);
		jQuery( "#editFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.EditFloorplanInfo);
		jQuery( "#infoFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].FileLoadSpaceModal.DrawingFilename);


		cvjs_initializeFileSelector();
		//jQuery('#cvjs_serverFileLoadModal').modal('show');


};



/**
 * Clean the server side temporary folder for files. This command is useful when using cvjs_conversion_setContentResponse("file");
 * where the server conversion provides a full set of files that is not removed when read by CADViewer JS
 */

function cvjs_conversion_cleanFilesDirectory(){


	var conv_extr_request = new Object();
	conv_extr_request.action      = "clear_files_folder";
	var api_data = JSON.stringify(conv_extr_request);

	tms_rest_api_url = tms_rest_api_url1+rest_php_version;


if (cvjs_debug) console.log(" index of"+tms_rest_api_url1.indexOf("tms-restful-api"));


	if (tms_rest_api_url1.indexOf("tms-restful-api")>-1){
		cvjs_passwordProtected = true;
		//cvjs_checkLicensePre();
		if (cvjs_isLicensed){
			cvjs_usr = "tms";
			cvjs_pwd = "restful";
		}

if (cvjs_debug) console.log(cvjs_isLicensed+" "+cvjs_usr+" "+cvjs_pwd);

	}

	var tms_rest_api_url_pw;


	if (cvjs_passwordProtected){
		var loc_1 = tms_rest_api_url.indexOf("//");
		var protocol_1 = tms_rest_api_url.substring(0,loc_1+2);
		var url_1 = tms_rest_api_url.substring(loc_1+2);
		tms_rest_api_url_pw = protocol_1+cvjs_usr+":"+cvjs_pwd+"@"+url_1;

	}else{
		tms_rest_api_url_pw = tms_rest_api_url;
	}


	// Encoding for Tomcat 8, xerces PHP server, we encode the json stream encodeURIComponent(api_data), previously only api_data

	var url_json = "";
	if (cvjs_encodeURIcall_server)
		url_json = tms_rest_api_url_pw+"?json="+encodeURIComponent(api_data);
	else
		url_json = tms_rest_api_url_pw+"?json="+api_data;


	
//	var url_json = tms_rest_api_url_pw+"?json="+api_data;

if (cvjs_debug) console.log(tms_rest_api_url_pw+" in makeConversion  request="+ encodeURIComponent(api_data)+"  non encoded request: "+api_data);


	if (cvjs_jsonp_handshake){

	if (cvjs_debug) console.log("before ajax call to php ");

		jQuery.ajax({
			url : url_json,
       		jsonp: "tms_restful_api",
        	dataType: 'jsonp',
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("jsonP Conversion success: "+Api_response);

				},
			error:function(xhr, status, error)
					{

						// here we do not care, we get the response back
						if (error.toString().indexOf("Files Deleted!")>-10){
						}
						else
							console.log("1 jsonp getEngines error="+xhr.responseText+" status="+status+" error="+error);
					}
		});
	}


	if (cvjs_servlet_handshake){

	if (cvjs_debug) console.log("2: before ajax call to Servlet");

		var filelist_data = {};
		filelist_data['request'] = api_data;
		
		if (cvjs_debug) console.log("before ajax call to Servlet filelist_data['request'] "+ filelist_data['request']);
	
		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'post',
			data: filelist_data,
			success:function(Api_response)
					{
	if (cvjs_debug) console.log("json delete success: "+Api_response);

					},
			error:function(data_e)
					{
						// here we do not care, we get the response back
						if (date_e.toString().indexOf("Files Deleted!")>-1){
						}
						else
							console.log("2 json getEngines error="+data_e);
					}
		});
	}


	if (cvjs_post_handshake){

	if (cvjs_debug) console.log("before ajax post call");
			// not working for cross domain

		var json_data = {};
		json_data['json_data'] = api_data;

		jQuery.ajax({
			url : tms_rest_api_url_pw,
			type: 'POST',
        	data: json_data,
			success:function(Api_response)
					{
						if (cvjs_debug) console.log("post delete: "+Api_response);

					},
			error:function(data_e)
					{
						// here we do not care, we get the response back
						if (date_e.toString().indexOf("Files Deleted!")>-1){
						}
						else
							console.log("3 jsonp getEngines error="+data_e);
					}
		});
	}


}

var cvjs_spaceObjectUserMode = false;


function cvjs_setSpaceObjectUserMode(mode){

	cvjs_spaceObjectUserMode = mode;

}


var cvjs_newList;


/**
 * Add a Space Object Rectangle
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
  
function cvjs_addRectangleSpaceObject(floorplan_div){

	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	

// 3.3.06e
	currentNode_id = Node_id;
	currentNode_name = Node_id;
	currentNode_layer = "cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);
	cvjs_addHandleFunc_Rectangle();

}



/**
 * Add a Space Object Polygon
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */  	

function cvjs_addPolygonSpaceObject(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;

	
// 3.3.06e
	currentNode_id = Node_id;
	currentNode_name = Node_id;
	currentNode_layer = "cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);


	cvjs_addHandleFunc_Polygon();
}


	

/**
 * Add a Space Object Circle
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */  	

function cvjs_addCircleSpaceObject(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);
	

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;

// 3.3.06e
	currentNode_id = Node_id;
	currentNode_name = Node_id;
	currentNode_layer = "cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);



	cvjs_addHandleFunc_Circle();

}


/**
 * Copy a Space Object Circle
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */  	

function cvjs_copyCircleSpaceObject(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	


	cvjs_hidePop();

	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);


	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;

// 3.3.06e
	currentNode_id = Node_id;
	currentNode_name = Node_id;
	currentNode_layer = "cvjs_Data_layer";
	currentNode_group = "";
	currentNode_attributes = "";
	currentNode_attributeStatus = "";  // 3.2.02b
	currentNode_type = "Space";
	currentNode_occupancy = "";
	currentNode_tags = "unassigned";

	
/***	
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";

*/

	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_occupancy, currentNode_linked);

	
	//console.log("before addHandleFunc_CopyCircle");
	cvjs_addHandleFunc_CopyCircle();

}


/**
 * Delete a Space Object
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */  	

function cvjs_deleteSpaceObject(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



//if (true) return;

//	if (icon_command_active == 3)
//		icon_command_active = 0;
//	else
		icon_command_active = 3;
}



function cvjs_ObjectSelected(rmid){
//	 	// placeholder for method in tms_cadviewerjs_modal_1_0_14.js   - must be removed when in creation mode and using creation modal

	xcvjs_ObjectSelected(rmid);

}


function xcvjs_ObjectSelected(rmid){
	// generic callback method when an object has been clicked

//console.log("hi "+cvjs_spaceObjectUserMode);

//console.log(cvjs_spaceObjectUserMode);



	if (cvjs_spaceObjectUserMode){  // user display mode
//		console.log(rmid+"  "+findRoom(rmid)+" "+vqRooms[cvjs_active_floorplan_div_nr][findRoom(rmid)]);

		jQuery("#drop_locations").html(vqRooms[cvjs_active_floorplan_div_nr][findRoom(rmid)].data("name")+'<span class="caret"></span>');

	}else{   // creation mode

		// this function is often not implemented as the methods defined in cvjsPopUpBody takes precedence

		if (cvjs_debug) console.log("object clicked "+rmid+" command active: "+icon_command_active);
		if (cvjs_debug) console.log(rmid+"  "+findRoom(rmid)+" "+vqRooms[cvjs_active_floorplan_div_nr][findRoom(rmid)]);



		if (icon_command_active == 10){   // layer off
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var layer = vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer");
					cvjs_LayerOff(layer);
				}
			}
			all_icons_up();
			icon_command_active = 6;
//			jQuery('#select_image').attr("src", ""+cvjs_imagesLocation+"tools/Select_Selected_2.png");
//			jQuery('#cv_select div').css('color', '#000000');
//			jQuery('#cv_select').css('background', '#a4d7f4');

		}
		else
		if (icon_command_active == 3){

			//console.log("delete object");
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
					cvjs_setUpVqRooms_deleteNode(node);
					CADViewer_floorplan_methods(node);  // deletes all arrays
					
					// 3.0.14g
					// search for node id, then remove svg cv id and node
					// to be implemented
					
				}
			}
		}
		// 4.1.02e
		if (icon_command_active == 33){

			// 4.1.02e
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
					cvjs_setUpVqRooms_deleteNode(node);
					CADViewer_floorplan_methods(node);  // deletes all arrays
							
					// 4.1.02e, now we have to find node_image and remove.
					console.log("Delete Space Image - the node is: "+node);
					var image_id = "#cv_"+node+"_image";
					
					try{
						jQuery( image_id ).remove();
					}
					catch(err1){
					 console.log(err1);	
					}					
					// make standard mode again
					cvjs_supressPopUpModal = false;	
					cvjs_creationMode = false;
					cvjs_standardHighLightColors = true;
										
					for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

						if (vqRooms[cvjs_active_floorplan_div_nr][room].data("node") == node){
						
							// do nothing!
							// console.log("DO NOT MAKE NODE MODAL! "+ vqRooms[cvjs_active_floorplan_div_nr][room].data("node"));
						}
						else{
							var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
								"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
								"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

					//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

							if (dual_hbody_flag){
								if ( parseInt(cvjs_currentNode_id) >=-1){
									jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
										style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
										position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
										hideOnHTMLClick: 'false'});
								}else{
									jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
										style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
										position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
										hideOnHTMLClick: 'false'});
								}
							}

							if (!dual_hbody_flag){
									jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
										style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
										position: {my: 'bottom center', at: 'top left'},
										hideOnHTMLClick: 'false'});
							}
							
						}

					}
					
					hideOnlyPop();
					cvjs_clearDrawing();

					// 4.1.02f
				}
			}
		}
		
		// 4.1.02g
		if (icon_command_active == 34){

			// 4.1.02e
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");

					CADViewer_floorplan_methods(node);  // deletes all arrays
							
					if (cvjs_debug) console.log("Resize Space Image - the node is: "+node);
					
					var image_id = "#cv_"+node+"_image";
					var path_id = "#cv_"+node;
					var image_height = jQuery( image_id ).attr("height"); 
					var image_width = jQuery( image_id ).attr("width"); 
					var image_x = jQuery( image_id ).attr("x"); 
					var image_y = jQuery( image_id ).attr("y"); 
					var path_d = jQuery( path_id ).attr("d");
					
					console.log(image_x+"  "+image_y+"  "+image_width+" "+image_height+"  path: "+path_d);				
//					window.alert(rmid);		
					//cvjs_highlightSpaceObjectIdDiv(rmid, highlight_colorgrade_A_1, roomLayer1, floorplan_div_Array[cvjs_active_floorplan_div_nr]);		
	
					cvjs_supressPopUpModal = false;	
					cvjs_creationMode = false;
					cvjs_standardHighLightColors = true;
					hideOnlyPop();
					cvjs_clearDrawing();


			/**  default color for standard Space Object selection mode  - not selected   */
				defaultColor = {
						fill: '#FFF',
						"fill-opacity": "0.1",
						stroke: '#CCC',
						'stroke-width': 1,
						'stroke-linejoin': 'round',
					};
			/**  default color for standard Space Object selection mode  - highlighted   */
				highlight = {
						fill: '#FFF',
						"fill-opacity": "0.1",
						stroke: '#FFF',
						'stroke-width': 3
					};
			/**  default color for standard Space Object selection mode  - selrcted   */
				selectColor = {
						fill: '#FFF',
						"fill-opacity": "0.5",
						stroke: '#FFF',
						'stroke-width': 3
					};
	
					console.log("call cvjs_addHandleFunc_ResizeImageSpace");
					cvjs_addHandleFunc_ResizeImageSpace(node, rmid, image_height, image_width, image_x, image_y, path_d);
					console.log("after call cvjs_addHandleFunc_ResizeImageSpace");


					
					
					
				}
			}
		}
		
		else{   // it is select for highlight

			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
					var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
					CADViewer_floorplan_methods(node);
				}
			}
		}

	}
	currentSelectedId = rmid;
}



/**
 * Sets the mode of Space Object to either display or create
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_changeSpaceObjectDisplayMode(floorplan_div){

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	
	
	// 3.3.06e  - change the load to bypass settings
	if (cvjs_changeSpaceObject_ManualCreationMode){

		if (cvjs_debug) console.log("cvjs_changeSpaceObjectDisplayMode here - generic handling");
		
		cluster_host_flag = 1;
		
		var j=0;
		for (i=0; i < 100; i++){
				//		for (i=0; i < 6; i++){
	//		fArr_Name[j] = data[i].LOCATION;  // name of space
	//		fArr_Id[j] = data[i].LOCATIONSID;     // if of space
			fArr_Name[j] ="";  // name of space
			fArr_Id[j] = "";     // if of space

			fArr_PolygonNr[j] = -1;    // no association with room polygons yet
			fArr_PolygonLayerName[j] = "none"; // no association with room polygons yet
			fArr_Type[j] = -1;
			fArr_Occupancy[j] = -1;
			fArr_Tags[j] = -1;

			//window.alert(i+" "+data[i].LOCATION+" "+data[i].LOCATIONSID+" "+fArr_Name[j]+"  "+fArr_Id[j]+"  "+data[i][maximo_includecols1]);
			j++;
		}
		
		
		
		
		cvjs_supressPopUpModal = true;	
		cvjs_creationInputType = 2;
		cvjs_creation_modal_show(floorplan_div);
		
		
		// this is how we do this
		return;
	}
	
	
	

	if (cluster_host_flag == 0){
		cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.ConnectToHostFirst);
	}
	else{

		hideOnlyPop();
		cvjs_clearDrawing();

		cvjs_supressPopUpModal = !cvjs_supressPopUpModal;  // 3.2.02c
		
		
		if (cvjs_supressPopUpModal){
	//
	//		call_cluster_host();
	
			//3.2.02c
			//cvjs_spaceObjectInputPanel(floorplan_div);
			cvjs_showCreationModeModal(floorplan_div)
		
		}else{
			jQuery("#IconMenuPanel").hide();

		}
	}

}


function setLocationMode(){


}



function cvjs_change_space(rmid){


	if (!cvjs_spaceObjectUserMode) return;

if (cvjs_debug) 	console.log("change space "+rmid);

	hidePop();
	setLocationMode();


	if (rmid == 0)
		{
		//  setBuildingFloorAllOffices(vqBuilding, vqFloor);
    	//closeAllPopups(-1);

//		space = cvjs_highlightRoomImmediate(rmid);
		jQuery("#drop_locations").html('All Spaces<span class="caret"></span>');     // we have hardcoded entry 0 to 'All Locations'

		}
	else
		{

		// setBuildingFloorOffice(vqBuilding, vqFloor, rmid);
		space = cvjs_highlightRoomImmediate(rmid);

//console.log("highlightImmediate space="+space+"  rmid="+rmid);
		if (space >= 0)
			{
			spaceId = rmid;
			lastObj[cvjs_active_floorplan_div_nr] = space;

//			CheckRoomOnScreen(vqRooms[cvjs_active_floorplan_div_nr][space]);

	    	jQuery(vqRooms[cvjs_active_floorplan_div_nr][space].node).qtip('show');

			// new
			//console.log(vqRooms[cvjs_active_floorplan_div_nr][space].data("name"));

// figure out if sensor or location, change lists
			var id = vqRooms[cvjs_active_floorplan_div_nr][space].data("id");

//console.log(" change_room  id="+id);



////////////  THIS GENERATION IS DEPENDING ON WHICH TYPE OF OBJECT SELECTED

/*
			if (parseInt(id) >=-1){

				jQuery("#drop_locations_sensors").html('Locations <span class="caret"></span>');
				// sort drop_location list locations
				jQuery("#locations").html(cvjs_newList);
				cvjs_LayerOn_AllOff("Locations");

			}
			else{
				jQuery("#drop_locations_sensors").html('Sensors <span class="caret"></span>');
				// sort drop_location list fixtures
				jQuery("#locations").html(newListSensors);
				cvjs_LayerOn_AllOff("Sensors");
			}

*/


			jQuery("#drop_locations").html(vqRooms[cvjs_active_floorplan_div_nr][space].data("name")+'<span class="caret"></span>');

			}
		}

//console.log("after change_space");


}


function sortByColumn(a, colIndex){

    a.sort(sortFunction);

    function sortFunction(a, b) {
        if (a[colIndex] === b[colIndex]) {
            return 0;
        }
        else {
            return (a[colIndex] < b[colIndex]) ? -1 : 1;
        }
    }

    return a;
}


/**
 * Display of Space Object structure in User Mode, with enabled seach panel
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
 
function cvjs_displaySpaceObjectsStructure(floorplan_div){
	

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	cvjs_displaySpaceObjectsStructure(floorplan_div, "", "", "", "");	
	
}



function cvjs_displaySpaceObjectsStructure(floorplan_div, userSiteName, dropFloor, dropFloorList, myCustomFunction){


	if (floorplan_div.indexOf("_svg")>-1) floorplan_div = floorplan_div.substring(0,floorplan_div.indexOf("_svg"));

console.log("cvjs_displaySpaceObjectsStructure:  "+floorplan_div);



	cvjs_setCreationMode(false);
	hideOnlyPop();
	cvjs_clearDrawing();

	
	
if (cvjs_debug) 	console.log("1 display Space Object Structure");

	// 3.2.01g
	if ( !(typeof id_supress_call_cluster_host === 'undefined') && id_supress_call_cluster_host == true){				
		// do nothing, we are not calling cluster_host
	}
	else{
		// standard case, call cluster host
		call_cluster_host();
		
	}

		
	cvjs_setSpaceObjectUserMode(true);

	
	
	
	
	

	
	
	
if (cvjs_debug) 	console.log("2 display Space Object Structure");


	// this is not needed, being overwritten by below
 	//cvjs_setIconInterfaceControls_ClassicSkin(true);

	
//NOTE BLOCKED FOR TESTING 2018-08-20	
	
	// 3.1.20e  - uncomment this .....
	// cvjs_setIconInterfaceControls_MimimumDisk(true);
// 3.0.14e
//	jQuery('#gMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html("<div class=\"controls_min\"><li style=\"list-style-type:none\" id=\"zoom-extents\"><i class=\"fa fa-arrows-alt\"></i></li><li style=\"list-style-type:none\" id=\"zoom-in\"><i class=\"fa fa-plus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-out\"><i class=\"fa fa-minus\"></i></li><li style=\"list-style-type:none\" id=\"zoom-window\"><i class=\"fa fa-search-plus\"></i></li></div>");

	
	
	
	
/*

	if (!isSmartPhoneOrTablet)
		jQuery('#gMenu').html("<img src=\""+cvjs_imagesLocation+"PanZoomFull.png\" usemap=\"#PanZoomMapClassic\" border=\"0\" height=\"267\" width=\"79\" class=\"map\" hidefocus=\"true\">");
	else
		jQuery('#gMenu').html("<img src=\""+cvjs_imagesLocation+"ZoomExtentsDevice.png\" usemap=\"#ZoomExtentsDeviceMapClassic\" border=\"0\" height=\"176\" width=\"79\" class=\"map\" hidefocus=\"true\">");

*/


/*  4.1.02d
	jQuery('#floatNavigationMenu_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
*/
	
		

/*
	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_defaultJSPath+"/space/css/vqjs_47.css"
	}).appendTo("head");

*/

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/topbar.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/navbar.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/headerbar.css"
	}).appendTo("head");

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/legend.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/tempbar.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/wizards.css"
	}).appendTo("head");


	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/font-awesome.css"
	}).appendTo("head");

	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/modal_01.css"
	}).appendTo("head");



	jQuery("<link/>", {
	   rel: "stylesheet",
	   type: "text/css",
	   href: cvjs_applicationFolder + "/user_resources/css/combined-floorplan.css"
	}).appendTo("head");


	
	


//	4.1.02d
		cvjs_displayTopMenuIconBar(false, floorplan_div);  // disable top menu icon bar		
		jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").hide();
		jQuery("#floatNavigationMenu_"+floorplan_div+"_svg").hide();
		cvjs_hideNavigationMenu(floorplan_div);
	
//  THIS IS STANDARD LAYOUT USERS CAN CUSTOM CHANGE IN PULLDOWN MENU METHODS!!!!
	
	


    //nav_user_SpaceObjects_1_01.html
	// 3.0.14e
	// 3.2.02g
	//jQuery( "#cvjs_spaceObjectUserDisplay" ).load(cvjs_defaultJSPath+"/space/html/nav_user_SpaceObjects_A_1_12.html", function() {  // 3.2.01e    // 3.1.20e

	// 3.3.01a
	jQuery( "#cvjs_spaceObjectUserDisplay" ).load(cvjs_defaultJSPath+"/space/html/nav_user_SpaceObjects_A_3_3_01.html", function() {  // 3.3.01b   

	
//window.alert("loading spaceObjectUser....");	
	
		// 3.0.14f 
		jQuery("#searchModal").hide();
		jQuery("#searchModal").draggable();
		jQuery("#searchModal").css({position: 'absolute'});
		jQuery("#searchModal").css({left: 300, top: 100});
		
		jQuery('#searchModalCloseButton').on('click', function() {
			jQuery("#searchModal").hide();
		});
		// 3.0.14f 



		jQuery("#site_name").html(cvjs_FileNameNoExtension);

		var html_string = "<img src=\'"+cvjs_imagesLocation+"menu_cv_search_right.png\'>";	 
//window.alert(html_string);			
		jQuery("#iconSearch").html(html_string);
		
		html_string = "<img src=\'"+cvjs_imagesLocation+"logo_cv_d.png\'>";		
		jQuery("#user_logoCV").html(html_string);
		
		
//		jQuery("#user_menu_CV").html("<img src=\""+cvjs_imagesLocation+"menu_cv_right.png\">");
		html_string = "<img src=\'"+cvjs_imagesLocation+"menu_cv_right.png\'>";		


		jQuery("#dropdownMenu1").append(html_string);



		if ( userSiteName == undefined ||  userSiteName ==""){
			jQuery("#site_name").html(cvjs_FileNameNoExtension);
		}
		else{
			jQuery("#site_name").html(userSiteName);

		}


		if ( dropFloor == undefined ||  dropFloor ==""){


			if (multiPages[cvjs_active_floorplan_div_nr].currentPage>=1)
				jQuery("#drop_floor").html(multiPages[cvjs_active_floorplan_div_nr].pages[(multiPages[cvjs_active_floorplan_div_nr].currentPage)-1].pageName+'<span class="caret"></span>');

			var newFloorList = "";
			
			
			// 3.1.20g  settings in /app/js/space/custom_settings.js
			if (id_main_data_dropfloor_single_drawing==true){
				for (var i=0; i<1; i++){
					newFloorList = newFloorList + "<li><a href=\"javascript:change_drawing('"+i+"')\">"+multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName+"</a></li>";
				}
			}
			else{
				for (var i=0; i<multiPages[cvjs_active_floorplan_div_nr].multiPages; i++){
					newFloorList = newFloorList + "<li><a href=\"javascript:change_drawing('"+i+"')\">"+multiPages[cvjs_active_floorplan_div_nr].pages[i].pageName+"</a></li>";
				}
			}
			
			jQuery("#floors_list").html(newFloorList);

		}
		else{

			jQuery("#drop_floor").html(dropFloor+'<span class="caret"></span>');

			var newFloorList = "";

			for (var i=0; i<dropFloorList.length; i++){
				newFloorList = newFloorList + "<li><a href=\"javascript:change_drawing('"+i+"')\">"+dropFloorList[i]+"</a></li>";
			}
			jQuery("#floors_list").html(newFloorList);

		}



	

		// THIS LIST SHOULD BE EXPANDED - we take the user layer

		if (id_main_data_layer==""){
			jQuery("#locations_sensors_list").html("<li><a href=\"javascript:change_objects_generic('"+0+"')\">"+lTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[0]+"</a></li>"+"<li><a href=\"javascript:change_objects_generic('"+1+"')\">"+lTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[1]+"</a></li>");
			jQuery("#drop_locations_sensors").html(lTable.languages[cvjs_currentLanguage].HeaderObjectLayers.ObjectLayer[0]+' <span class="caret"></span>');
		}
		else{
			jQuery("#locations_sensors_list").html("<li><a href=\"javascript:change_objects_generic('"+0+"')\">"+id_main_data_layer+"</a></li>");
			jQuery("#drop_locations_sensors").html(id_main_data_layer+' <span class="caret"></span>');

		}

		jQuery("#drop_locations").html('All Spaces<span class="caret"></span>');

	

		// 3.2.02g
		// descriptions for dropdowns
		
		
			

		jQuery("#drop_floor").mouseenter(function(event) {
			// Show the descriptor with user text information
			cvjs_displayInformationModal("floorPlan_svg", "Changes layout of the drawing, in case multiple layouts for the current drawing is available.", 110, jQuery("#drop_floor").offset().left+100, jQuery("#drop_floor").offset().top + 20 );
		});


		jQuery("#drop_floor").mouseleave(function(event) {
			// hide the descriptor with user text information
			cvjs_hideInformationModal("floorPlan" );
		});

		
		jQuery("#drop_locations_sensors").mouseenter(function(event) {
			// Show the descriptor with user text information
			cvjs_displayInformationModal("floorPlan_svg", "Selects the data-layer(s) with interactive content if multiple layers are available, as default this is cvjs_Data_Layer.", 110, jQuery("#drop_locations_sensors").offset().left+100, jQuery("#drop_locations_sensors").offset().top + 20 );
		});


		jQuery("#drop_locations_sensors").mouseleave(function(event) {
			// hide the descriptor with user text information
			cvjs_hideInformationModal("floorPlan" );
		});
		
		jQuery("#drop_locations").mouseenter(function(event) {
			// Show the descriptor with user text information
			cvjs_displayInformationModal("floorPlan_svg", "Drop-down access to all interactive content in the current drawing displayed. Select the object by it's ID.", 110, jQuery("#drop_locations").offset().left+100, jQuery("#drop_locations").offset().top + 20 );
		});


		jQuery("#drop_locations").mouseleave(function(event) {
			// hide the descriptor with user text information
			cvjs_hideInformationModal("floorPlan" );
		});
		
		
	
	
		// 3.1.20i
		// Custom Lists		
		jQuery("#dropdown_custom_1").hide();
		jQuery("#dropdown_custom_2").hide();
		jQuery("#dropdown_custom_3").hide();
		// 3.2.01e
		jQuery("#dropdown_custom_4").hide();
		jQuery("#dropdown_custom_5").hide();
		jQuery("#dropdown_custom_6").hide();
	


		try{
			if (id_custom_1_dropdown_name!=""){		
				jQuery("#dropmenu_custom_1").html(id_custom_1_dropdown_name+' <span class="caret"></span>');
				cvjs_buildCustom_1_dropdownMenu();
				jQuery("#dropdown_custom_1").show();
			}
		}
		catch (err){
			console.log("1"+err);	
		}


		try{
			if (id_custom_2_dropdown_name!=""){		
				jQuery("#dropmenu_custom_2").html(id_custom_2_dropdown_name+' <span class="caret"></span>');
				cvjs_buildCustom_2_dropdownMenu();
				jQuery("#dropdown_custom_2").show();
			}
		}
		catch (err){	
			console.log("2"+err);
		}
		
				
		
		if (id_custom_3_dropdown_name!=""){		
			jQuery("#dropmenu_custom_3").html(id_custom_3_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_3_dropdownMenu();			
			jQuery("#dropdown_custom_3").show();
		}
		


		// 3.2.01e
		if (id_custom_4_dropdown_name!=""){		
			jQuery("#dropmenu_custom_4").html(id_custom_4_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_4_dropdownMenu();			
			jQuery("#dropdown_custom_4").show();
		}

		
		if (id_custom_5_dropdown_name!=""){		
			jQuery("#dropmenu_custom_5").html(id_custom_5_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_5_dropdownMenu();			
			jQuery("#dropdown_custom_5").show();
		}
		
		if (id_custom_6_dropdown_name!=""){		
			jQuery("#dropmenu_custom_6").html(id_custom_6_dropdown_name+' <span class="caret"></span>');
			cvjs_buildCustom_6_dropdownMenu();			
			jQuery("#dropdown_custom_6").show();
		}

		
		var Val = (typeof id_supress_standard_dropdown_menus === 'undefined');
//		window.alert("here "+Val+"     " + id_supress_standard_dropdown_menus);	
		// 3.2.01f
		if ( !(typeof id_supress_standard_dropdown_menus === 'undefined') && id_supress_standard_dropdown_menus != false){
			jQuery("#drop_locations").html("");
			jQuery("#drop_floor").html("");
			jQuery("#drop_locations_sensors").html("");
		}
		
		
	

		
		// selections list to the left

		//var selections_list = "<li role=\"presentation\"><a href=\"#\" class=\"mapData\">XData Maps</a></li><li role=\"presentation\" class=\"divider\"></li><li role=\"presentation\"><a href=\"#\" class=\"siteInfo\">Site Details</a></li>";
		var selections_list = "<li><a href=\"javascript:display_maps()\">Data Maps</a></li><li role=\"presentation\" class=\"divider\"></li><li><a href=\"javascript:display_info()\">Site Info</a></li>";

		//window.alert(selections_list);

		jQuery('#selections_list').html(selections_list);
		//jQuery('#selections_list').html(newFloorList);



		
/****4.1.02d - remove
		

		//*******************************************
		/*	FLOORPLAN CONTROLS
		/******************************************** /

		jQuery('#zoom-in').on('click', function() {
		
			cvjs_zoomIn(floorplan_div);
		});

		jQuery('#zoom-in').on('mouseover', function() {

		});


		jQuery('#zoom-out').on('click', function() {
			cvjs_zoomOut(floorplan_div);
		});

		jQuery('#zoom-extents').on('click', function() {
			cvjs_resetZoomPan(floorplan_div);
		});

		jQuery('#zoom-window').on('click', function() {
			cvjs_zoomWindow(floorplan_div);
		});


**/		
		
		
		cvjs_newList = "<li><a href=\"javascript:cvjs_change_space('0')\">All Spaces</a></li>";

		var roomsListNames = new Array();
		var ii = 0;
		for (spc in vqRooms[cvjs_active_floorplan_div_nr])
		{
			roomsListNames[ii] = new Array();
			roomsListNames[ii][0] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
			roomsListNames[ii][1] = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");;
			ii++;
		}

		var sorted_Rooms = sortByColumn(roomsListNames, 0);
			for (spc in sorted_Rooms)
			{
					if (myCustomFunction=="" || myCustomFunction==undefined)
						cvjs_newList = cvjs_newList + "<li><a href=\"javascript:cvjs_change_space('"+sorted_Rooms[spc][0]+"')\">"+sorted_Rooms[spc][1]+"</a></li>";
					else
						cvjs_newList = cvjs_newList + "<li><a href=\"javascript:"+myCustomFunction+"('"+sorted_Rooms[spc][0]+"')\">"+sorted_Rooms[spc][1]+"</a></li>";
			}

/*
			for (spc in vqRooms[cvjs_active_floorplan_div_nr])
			{
				var vqid = vqRooms[cvjs_active_floorplan_div_nr][spc].data("id");
					var vqname = vqRooms[cvjs_active_floorplan_div_nr][spc].data("name");
					cvjs_newList = cvjs_newList + "<li><a href=\"javascript:cvjs_change_space('"+vqid+"')\">"+vqname+"</a></li>";
			}

*/



		jQuery("#locations").html(cvjs_newList);

		
		jQuery('.siteInfo').click(function() {
			if (cvjs_debug) console.log("Site Info");
		});

		jQuery('.mapData').click(function() {
			jQuery("#mapDataModal").modal('show');
		});



		jQuery('#iconSearch').click(function() {

			jQuery('#SearchQuantity').html("");
			jQuery('#SearchResultsList').html("");
			jQuery('#searchfield_tag').val("");

			cvjs_hidePop();  // hide all pop-up menus on CADViewer JS canvas
			jQuery("#drop_locations").html('All Spaces<span class="caret"></span>');
			
			jQuery('#searchfield_tag').val("");

			buildSearchList(myCustomFunction);

//			jQuery("#searchModal").modal('show');

			 // 3.0.14f 
			 jQuery("#searchModal").show();
			
			
			
		});


		jQuery('#iconSearch').mouseover(function() {
    		jQuery('#iconSearch').css('cursor','pointer');
		});




		jQuery("#searchfield_tag").on("change keyup paste", function(){

	//console.log("on change");

			buildSearchList(myCustomFunction);

	/*
			jQuery(document).keypress(function(e) {
				if(e.which == 13) {
					// alert('You pressed enter!');
					var i=0; // do nothing

				}
				else{
					jQuery('#SearchResultsList').html("");
				}
			});
			//console.log("we have search input");

	*/


		});


		jQuery("#searchfield_tag").submit(function(){

			//console.log("submit search");

		});




		jQuery("#searchModal").submit(function() {

		// console.log("submit...");
			buildSearchList(myCustomFunction);
		});


		jQuery('#search_button').click(function() {
			buildSearchList(myCustomFunction);
		});

		jQuery('#searchfield_tag').click(function() {

		//			jQuery('#SearchTitle').html("");
		//			jQuery('#SearchTitle2').html("");
		//			jQuery('#SearchQuantity').html("");
		//			jQuery('#SearchResultsList').html("");

				buildSearchList(myCustomFunction);

		});

	});


	// display the datamaps

	cvjs_displayMapsStatus = true;
	jQuery("#datamaps_form").show();

	if ( jQuery("#cvjs_displayData_switch").prop("checked")){
		jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-197);
	}else{
		jQuery("#datamaps_form").css("left", 40).css("top", jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position().top + jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height()-120);
	}


	
// 3.0.14f
//window.alert("lets call custom");
custom_host_parser_PopUpMenu();



		
	
}


var seachInObjArrFlag = 0;
var seachInObjArrCounter = 0;

function buildSearchList(myCustomFunction){

//window.alert("buildSearchList");

		var val = jQuery('#searchfield_tag').val();

		seachInObjArrFlag = 0;
		seachInObjArrCounter = 0;

		var res = searchInObjArray(vqRooms, val.toLowerCase());

		if (seachInObjArrFlag == 1  || seachInObjArrCounter == 0){

			var jj=0;
			jQuery('#SearchQuantity').html("0 item(s)");
			jQuery('#SearchResultsList').html("");
		}
		else{

			jQuery('#SearchQuantity').html(res.length+" item(s)");

			jQuery('#SearchResultsList').html("");
//				jQuery('#SearchResultsList').html("<div class='search-results-list'>");

			for (i=0; i < res.length; i++)
			{

	// 2019-09-03
				var d ="";

				if (myCustomFunction=="" || myCustomFunction==undefined)
					d = "<div class=\"searchItem row\"><div class=\"searchSubItem col-md-12\" onmouseup=\"search_pick_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\)\"onmouseover=\"search_highlight_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\);\" onmouseout=\"search_highlight_mouseout();\">";
				else
					d = "<div class=\"searchItem row\"><div class=\"searchSubItem col-md-12\" onmouseup=\""+myCustomFunction+"(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\)\"onmouseover=\"search_highlight_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\);\" onmouseout=\"search_highlight_mouseout();\">";

//				var d = "<div class=\"searchItem row\"><div class=\"searchSubItem col-md-12\" onmouseup=\"search_pick_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\)\"onmouseover=\"search_highlight_space\(\'"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("id")+"\'\);\" onmouseout=\"search_highlight_mouseout();\">";


				// 3.1.20g  // check for <br> in name
				var typeEntry = vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("type");
				if (typeEntry.indexOf("<br>")>0){
					typeEntry = typeEntry.replace(/<br>/g,'   -   ');					
				}
				var sr = d+ "<div class=\"searchItem-name\">"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("name") +
					"</div><div class=\"searchItem-type\"><small>"+typeEntry+"</small></div>";  // 3.1.20g

//				var sr = d+ "<div class=\"searchItem-name\">"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("name") +
//					"</div><div class=\"searchItem-type\"><small>"+vqRooms[cvjs_active_floorplan_div_nr][res[i]].data("type")+"</small></div>";

				jQuery('#SearchResultsList').append(sr);
			}

//                jQuery('#SearchResultsList').append("</div>");

		}

		return false;

}



	function getUnique(a) {
	  var b = [a[0]], i, j, tmp;
	  for (i = 1; i < a.length; i++) {
		tmp = 1;
		for (j = 0; j < b.length; j++) {
		  if (a[i] == b[j]) {
			tmp = 0;
			break;
		  }
		}
		if (tmp) {
		  b.push(a[i]);
		}
	  }
	  return b;
	}




function searchInObjArray(arr, item)
{
	var newArr = new Array();

//console.log("1");

	try{

//console.log("2");

			for (var room in vqRooms[cvjs_active_floorplan_div_nr])
			{

	//console.log("3");

	//console.log(" name="+vqRooms[cvjs_active_floorplan_div_nr][room].data('name')+" type="+vqRooms[cvjs_active_floorplan_div_nr][room].data('type')+ " item="+item);

				if (vqRooms[cvjs_active_floorplan_div_nr][room].data('name').toLowerCase().indexOf(item) != -1){

	//console.log("1x push room="+room);
					seachInObjArrCounter = 1;

					newArr.push(room);
				}
				else if (vqRooms[cvjs_active_floorplan_div_nr][room].data('type').toLowerCase().indexOf(item) != -1){

	//console.log("2x push room="+room);
					seachInObjArrCounter = 1;

					newArr.push(room);
				}

			}


			item = item.replace(/ /gi, "&nbsp;");                      /// LLLLLLLL
			item = item.replace(/\u00A0/gi, "&nbsp;");


			for (var room in vqRooms[cvjs_active_floorplan_div_nr])
			{

	//console.log("item="+item);

				var i = 1;
				var tagName = "tag1";
				var tagData = vqRooms[cvjs_active_floorplan_div_nr][room].data(tagName);
				while (tagData != undefined)
					{
					if (tagData.toLowerCase().indexOf(item) != -1){
	//console.log("push room");
						seachInObjArrCounter = 1;
						newArr.push(room);
					}
					tagName = "tag" + (++i);
					tagData = vqRooms[cvjs_active_floorplan_div_nr][room].data(tagName);
					}
	//console.log("after item");

			}

	}
	catch(err){

		seachInObjArrFlag = 1;
		console.log("Err C "+err);

	}


	return getUnique(newArr);
}


var mouseout_flag = true;

function search_highlight_mouseout(){

	if (mouseout_flag)
		cvjs_clearAllDrawing();
	else
		mouseout_flag = true;

}


function search_highlight_space(trigger){

	cvjs_highlightRoomImmediate(trigger);
}


function search_pick_space(trigger){

	 cvjs_pick_space(trigger);
	 mouseout_flag = false;
//	 jQuery("#searchModal").modal('hide');

	 // 3.0.14f 
	 jQuery("#searchModal").hide();
	// no let us leave the search modal up
	 
	 
}



var settings_changes = 0;



/**
 * Settings of how Space Objects communicates with user defined back-end
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */

function cvjs_spaceObjectSettings(floorplan_div){


	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

		

	settings_changes = 0;

	jQuery("#cvjs_spaceObjectAdminSettings"+"_"+floorplan_div).show();   // 3.0.14e
			
	jQuery( "#cvjs_spaceObjectAdminSettings_"+floorplan_div ).load(cvjs_defaultJSPath+"/space/html/nav_admin_SpaceObjects_B_1_05.html", function() {

		
		jQuery("#SettingsPanel").draggable();
		jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");
		jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Inactive.png");
		jQuery("#CloseSettingsX").append("<img src=\""+cvjs_imagesLocation+"CrossX.png\">");
		
		// first time - import settings

		if (settings_changes == 0){
			jQuery("#id_api_proxy_url").val(api_proxy_url);
			jQuery("#id_usr").val(usr);
			jQuery("#id_pwd").val(pwd);
			// jQuery("#id_building").val(building_data_identifier);  // removed 2013-05-30
			jQuery("#id_building_name").val(building_name);
			jQuery("#id_company").val(company);
			jQuery("#id_address").val(address);
			jQuery("#id_city").val(city);
			jQuery("#id_zipcode").val(zipcode);
			jQuery("#id_state").val(state);
			jQuery("#id_country").val(country);
			jQuery("#id_FacMgr").val(FacMgr_name);
			jQuery("#id_FacMgr_title").val(FacMgr_title);
			jQuery("#id_FacMgr_email").val(FacMgr_email);
			jQuery("#id_FacMgr_phone").val(FacMgr_phone);
			jQuery("#id_refresh_rate").val(refresh_rate);

			jQuery("#id_data_connector").val(id_data_connector);
			jQuery("#id_data_parser").val(id_data_parser);
			jQuery("#id_publish_location").val(id_publish_location);
			jQuery("#id_main_data_layer").val(id_main_data_layer);

			jQuery("#id_datafield1_name").val(id_datafield1_name);
			jQuery("#id_datafield1_value").val(id_datafield1_value);
			jQuery("#id_datafield2_name").val(id_datafield2_name);
			jQuery("#id_datafield2_value").val(id_datafield2_value);
			jQuery("#id_datalayer1_name").val(id_datalayer1_name);
			jQuery("#id_datalayer1_value").val(id_datalayer1_value);
			jQuery("#id_datalayer2_name").val(id_datalayer2_name);
			jQuery("#id_datalayer2_value").val(id_datalayer2_value);

			jQuery("#cv_link10_id_datalayer_name").val(id_datalayer2_name);

		}
		// first time - import settings



		jQuery('#cancel_settings').mouseover(function()
			{
			    jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Over_2.png");

			});

		jQuery('#cancel_settings').mouseout(function()
			{
			    jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Inactive_4.png");

			});

		jQuery('#cancel_settings').mousedown(function()
			{
			    jQuery('#cancel_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/Cancel_Down_3.png");

				// cancel all settings - reset all
				jQuery("#id_api_proxy_url").val(api_proxy_url);
				jQuery("#id_usr").val(usr);
				jQuery("#id_pwd").val(pwd);
				// jQuery("#id_building").val(building_data_identifier);  // removed 2013-05-30
				jQuery("#id_building_name").val(building_name);
				jQuery("#id_company").val(company);
				jQuery("#id_address").val(address);
				jQuery("#id_city").val(city);
				jQuery("#id_zipcode").val(zipcode);
				jQuery("#id_state").val(state);
				jQuery("#id_country").val(country);
				jQuery("#id_FacMgr").val(FacMgr_name);
				jQuery("#id_FacMgr_title").val(FacMgr_title);
				jQuery("#id_FacMgr_email").val(FacMgr_email);
				jQuery("#id_FacMgr_phone").val(FacMgr_phone);
				jQuery("#id_refresh_rate").val(refresh_rate);


				jQuery("#id_data_connector").val(id_data_connector);
				jQuery("#id_data_parser").val(id_data_parser);
				jQuery("#id_publish_location").val(id_publish_location);
				jQuery("#id_main_data_layer").val(id_main_data_layer);



				jQuery("#id_datafield1_name").val(id_datafield1_name);
				jQuery("#id_datafield1_value").val(id_datafield1_value);
				jQuery("#id_datafield2_name").val(id_datafield2_name);
				jQuery("#id_datafield2_value").val(id_datafield2_value);
				jQuery("#id_datalayer1_name").val(id_datalayer1_name);
				jQuery("#id_datalayer1_value").val(id_datalayer1_value);
				jQuery("#id_datalayer2_name").val(id_datalayer2_name);
				jQuery("#id_datalayer2_value").val(id_datalayer2_value);


				// hide settings
				//LegendOff();
				jQuery('#Settings').hide();
				jQuery('#SettingsPanel').hide();

				jQuery('#settings_image').attr("src", ""+cvjs_imagesLocation+"Settings_Up_1.png");
				jQuery('#settings div').css('color', '#DDDDDD');

			});


		jQuery("#id_api_proxy_url").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_usr").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_pwd").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_data_connector").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_data_parser").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_publish_location").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_main_data_layer").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});


		jQuery("#id_datafield1_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datafield1_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datafield2_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datafield2_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_datalayer1_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datalayer1_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_datalayer2_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});
		jQuery("#id_datalayer2_value").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});



		//jQuery("#id_building").click(function() {
		//	settings_changes = 1;
		//	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		//});

		jQuery("#id_building_name").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_company").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_address").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_city").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_state").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_zipcode").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_country").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr_title").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr_email").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});

		jQuery("#id_FacMgr_phone").click(function() {
			settings_changes = 1;
			jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");
		});



		jQuery('#save_settings').mouseover(function()
			{
				if (settings_changes == 1)
			    	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Over.png");

			});

		jQuery('#save_settings').mouseout(function()
			{
				if (settings_changes == 0)
			    	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Inactive.png");

				if (settings_changes == 1)
			    	jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Up.png");


			});


    var settings_data_file  = "custom_settings.js";


		jQuery('#save_settings').mousedown(function()
			{

				if (settings_changes == 1){

					// check if values are OK

					refresh_rate  = jQuery('#id_refresh_rate').val();
					var number = parseInt(refresh_rate, 10);

					if (number<0){
						console.log("Refresh Rate value must be between 1 and 3600.");
						refresh_rate = -number;
						jQuery('#id_refresh_rate').val(refresh_rate);
					}
					else
						if (number<3601 && number>0){
							refresh_rate = number;
							jQuery('#id_refresh_rate').val(refresh_rate);

						}
						else{

							console.log("Refresh Rate value must be between 1 and 3600.");
							refresh_rate = 30;
							jQuery('#id_refresh_rate').val(refresh_rate);

						}



					jQuery('#save_settings_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_111x28_Down.png");

					settings_changes = 0;

					// save all settings

					// build a file with variables

					api_proxy_url 			 = jQuery('#id_api_proxy_url').val();
					usr            			 = jQuery('#id_usr').val();
					pwd						 = jQuery('#id_pwd').val();

					// building_data_identifier = jQuery('#id_building').val();  // removed 2013-05-30
					building_name            = jQuery('#id_building_name').val();
					company                  = jQuery('#id_company').val();
					address                  = jQuery('#id_address').val();
					city                     = jQuery('#id_city').val();
					zipcode                  = jQuery('#id_zipcode').val();
					state                    = jQuery('#id_state').val();
					country                  = jQuery('#id_country').val();
					FacMgr_name              = jQuery('#id_FacMgr').val();
					FacMgr_title             = jQuery('#id_FacMgr_title').val();
					FacMgr_email             = jQuery('#id_FacMgr_email').val();
					FacMgr_phone             = jQuery('#id_FacMgr_phone').val();

					refresh_rate             = jQuery('#id_refresh_rate').val();


					id_data_connector = jQuery("#id_data_connector").val();
					id_data_parser = jQuery("#id_data_parser").val();
					id_publish_location = jQuery("#id_publish_location").val();
					id_main_data_layer = jQuery("#id_main_data_layer").val();

					id_datafield1_name = jQuery("#id_datafield1_name").val();
					id_datafield1_value = jQuery("#id_datafield1_value").val();
					id_datafield2_name = jQuery("#id_datafield2_name").val();
					id_datafield2_value = jQuery("#id_datafield2_value").val();
					id_datalayer1_name = jQuery("#id_datalayer1_name").val();
					id_datalayer1_value = jQuery("#id_datalayer1_value").val();
					id_datalayer2_name = jQuery("#id_datalayer2_name").val();
					id_datalayer2_value = jQuery("#id_datalayer2_value").val();



					//maximo_rsStart = jQuery("#id_maximo_rsstart").val();
					//maximo_maxItems = jQuery("#id_maximo_maxitems").val();
					//maximo_includecols1 = jQuery("#id_maximo_includecols1").val();
					//maximo_includecols2 = jQuery("#id_maximo_includecols2").val();
					//maximo_includecols3 = jQuery("#id_maximo_includecols3").val();



					var dataUrl="";
					dataUrl = dataUrl +"var usr = \""+usr+"\";\n";
					dataUrl = dataUrl +"var pwd = \""+pwd+"\";\n";
					dataUrl = dataUrl +"var api_proxy_url = \""+api_proxy_url+"\";\n";
					//dataUrl = dataUrl +"var building_data_identifier = \""+building_data_identifier+"\";\n";
					dataUrl = dataUrl +"var building_name = \""+building_name+"\";\n";
					dataUrl = dataUrl +"var company = \""+company+"\";\n";
					dataUrl = dataUrl +"var address = \""+address+"\";\n";
					dataUrl = dataUrl +"var city = \""+city+"\";\n";
					dataUrl = dataUrl +"var zipcode = \""+zipcode+"\";\n";
					dataUrl = dataUrl +"var state = \""+state+"\";\n";
					dataUrl = dataUrl +"var country = \""+country+"\";\n";
					dataUrl = dataUrl +"var FacMgr_name = \""+FacMgr_name+"\";\n";
					dataUrl = dataUrl +"var FacMgr_title = \""+FacMgr_title+"\";\n";
					dataUrl = dataUrl +"var FacMgr_email = \""+FacMgr_email+"\";\n";
					dataUrl = dataUrl +"var FacMgr_phone = \""+FacMgr_phone+"\";\n";
					dataUrl = dataUrl +"var refresh_rate = \""+refresh_rate+"\";\n";

					dataUrl = dataUrl +"var id_data_connector = \""+id_data_connector+"\";\n";
					dataUrl = dataUrl +"var id_data_parser = \""+id_data_parser+"\";\n";
					dataUrl = dataUrl +"var id_publish_location = \""+id_publish_location+"\";\n";
					dataUrl = dataUrl +"var id_main_data_layer = \""+id_main_data_layer+"\";\n";

					dataUrl = dataUrl +"var id_datafield1_name = \""+id_datafield1_name+"\";\n";
					dataUrl = dataUrl +"var id_datafield1_value = \""+id_datafield1_value+"\";\n";
					dataUrl = dataUrl +"var id_datafield2_name = \""+id_datafield2_name+"\";\n";
					dataUrl = dataUrl +"var id_datafield2_value = \""+id_datafield2_value+"\";\n";
					dataUrl = dataUrl +"var id_datalayer1_name = \""+id_datalayer1_name+"\";\n";
					dataUrl = dataUrl +"var id_datalayer1_value = \""+id_datalayer1_value+"\";\n";
					dataUrl = dataUrl +"var id_datalayer2_name = \""+id_datalayer2_name+"\";\n";
					dataUrl = dataUrl +"var id_datalayer2_value = \""+id_datalayer2_value+"\";\n";



//					dataUrl = dataUrl +"var maximo_rsStart = \""+maximo_rsStart+"\";\n";
//					dataUrl = dataUrl +"var maximo_maxItems = \""+maximo_maxItems+"\";\n";
//					dataUrl = dataUrl +"var maximo_includecols1 = \""+maximo_includecols1+"\";\n";
//					dataUrl = dataUrl +"var maximo_includecols2 = \""+maximo_includecols2+"\";\n";
//					dataUrl = dataUrl +"var maximo_includecols3 = \""+maximo_includecols3+"\";\n";


					// save file to .js file in /javascripts folder

//					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
					// data

					var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';

					var settings_data_location = cvjs_defaultJSPath + settings_data_file;

					//NOTE!!!
					var settings_data_location = "../app/js/space/" + settings_data_file;

					var settings_data = {};
					settings_data['file'] = settings_data_location;
					settings_data['file_content'] = dataUrl;
if (cvjs_debug) console.log(dataUrl+" "+settings_data['file']+"  "+saveSettingsUrl);
					jQuery.ajax({
					  url:saveSettingsUrl,
					  type: 'post',
					  data: settings_data,
					  success: function(html){

					  }  // end success

					});


				}

					// 3.2.01g
	if ( !(typeof id_supress_call_cluster_host === 'undefined') && id_supress_call_cluster_host == true){				
		// do nothing, we are not calling cluster_host
	}
	else{
		// standard case, call cluster host
		call_cluster_host();
		
	}			
	//			call_cluster_host();
				
				jQuery('#Settings').hide();
				jQuery('#SettingsPanel').hide();
				
				
				jQuery('#settings_image').attr("src", ""+cvjs_imagesLocation+"Settings_Up_1.png");
				jQuery('#settings div').css('color', '#DDDDDD');

			});


			
			
			
		jQuery("#CloseSettingsX").click(function() {

				jQuery('#Settings').hide();
				jQuery('#SettingsPanel').hide();

		});


		
		
//		window.alert("show??");
		
// 3.0.14e				
//				jQuery('#Settings').show();
//				jQuery('#SettingsPanel').show();
		
		
		
		
		
		
	});

}

var cluster_host_flag = 0;

// CAll to HOST to check if there is a connection!

function call_cluster_host(){


if (cvjs_debug) console.log("CALL CLUSTER HOST"); 	


	// 3.2.01e   change server structure, so connectors are independent folder
	var finalUrl = cvjs_ServerUrl + id_data_connector;

	// var finalUrl = cvjs_serverHandlersPath + id_data_connector;
	
	
	var uApi_response = "";        /// THIS IS THE ARRAY WITH THE RESPONSE FROM THE UAPI CALL

	// data
	var filelist_data = {};
	filelist_data['url'] = api_proxy_url;
	filelist_data['usr'] = usr;
	filelist_data['pwd'] = pwd;
	filelist_data['id_datafield1_name'] = id_datafield1_value;   // we only want a single element to check if there is a response
	filelist_data['id_datafield1_value'] = id_datafield1_value;
	filelist_data['id_datafield2_name'] = id_datafield2_value;   // we only want a single element to check if there is a response
	filelist_data['id_datafield2_value'] = id_datafield2_value;

	filelist_data['id_datalayer1_name'] = id_datalayer1_name;
	filelist_data['id_datalayer1_value'] = id_datalayer1_value;
	filelist_data['id_datalayer2_name'] = id_datalayer2_name;
	filelist_data['id_datalayer2_value'] = id_datalayer2_value;


	//var includecols = "LOCATIONSID,LOCATION";

	//if (maximo_includecols1.length >0) includecols = includecols + "," + maximo_includecols1;
	//if (maximo_includecols2.length >0) includecols = includecols + "," + maximo_includecols2;
	//if (maximo_includecols3.length >0) includecols = includecols + "," + maximo_includecols3;

	cluster_host_flag = 1;  // we set it to one to continue   3.2.01h
	
if (cvjs_debug) console.log("CALL CLUSTER HOST finalUrl="+finalUrl); 			
	
	jQuery.ajax({
	  url:finalUrl,
	  type: 'post',
	  data: filelist_data,
	  success: function(uApi_response_all){

if (cvjs_debug) 		console.log("host_response="+uApi_response_all+"XXX");

		// this is the data_connector reply
		//uApi_response_all = uApi_response_all.substr(0, uApi_response_all.length-1);

		if (uApi_response_all=="" || uApi_response_all.indexOf("Error 500:")>-1){
			cluster_host_flag = 0;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.ErrorConnectingToHost);
		}
		else{
			// NOTE CHANGE THIS!!!
			cluster_host_flag = 1;


if (cvjs_debug) 		console.log("id_data_parser="+id_data_parser);


// "http://localhost/CV-JS_2_3_7/php/data_host_connectors/js/custom_host_parser.js"
			// we are loading in the data-parser to parse the content from the cluster host


		jQuery.getScript( id_data_parser )
		  .done(function( script, textStatus ) {
			console.log("status=" +textStatus );
		  })
		  .fail(function( jqxhr, settings, exception ) {
			console.log( "Triggered ajaxError handler. "+jqxhr+" "+settings+"  "+exception );
		});

if (cvjs_debug) 		console.log("after getScript1");



			jQuery.getScript( id_data_parser, function( data, textStatus, jqxhr ) {
//			  console.log( data ); // Data returned
//			  console.log( textStatus ); // Success
//			  console.log( jqxhr.status ); // 200
//			  console.log( "Load was performed." );

				// CUSTOM IMPLEMENTATION OF
				cvjs_customHostParser(uApi_response_all);
			});

		}

	  },  // end success

	  failure: function(uApi_response_all){
			cluster_host_flag = 0;
			cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.ErrorConnectingToHost);
	  }  // failure

	});

	
	
}














var Node_underbar = "NODE_";
var icon_command_active = 0;
var selectedLinkUnlinkLayer = "";

var space_object_input_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];


var save_drawing_flag = 0;

var space_object_edit_mode = false;
var edit_cancel_flag = false;


function cvjs_spaceObjectInputPanel(floorplan_div){

	// 3.0.14e
	jQuery( "#cvjs_spaceObjectInputPanel_"+floorplan_div ).show();

	jQuery( "#cvjs_spaceObjectInputPanel_"+floorplan_div ).load(cvjs_defaultJSPath+"/space/html/nav_admin_SpaceObjects_C_1_06.html", function() {
		jQuery("#IconMenuPanel").draggable();
		jQuery("#CloseObjectMenuX").append("<img src=\""+cvjs_imagesLocation+"CrossX.png\">");
		jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Inactive.png");

// set name of datafields
		jQuery("#cv_link10_id_datalayer_name").html(id_datalayer2_name);

		jQuery("#layer_tag").val(id_main_data_layer);

		//window.alert("XHere_4");	
		// 3.2.02c
		jQuery("#type_tag").val(id_main_data_template_type);
					
		
// generate the pulldown menu
		jQuery("#spaces_drawing").html(new_linkList);  // CH



		
		
		// 3.3.07b
		jQuery("#spaces_manual_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
			
		//	alert("we color blue...");
			
		});

		
		jQuery("#c").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});

		jQuery("#spaces_drawing").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#type_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#layer_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#occupancy_tag").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});
		jQuery("#other_tags").click(function() {
			jQuery('#done_editing_location').css('color', '#0096d7');
		});




		if (space_object_input_offset_flag[cvjs_active_floorplan_div_nr]){
			space_object_input_offset_flag[cvjs_active_floorplan_div_nr] = true;  // false = true
			// 3.1.21j .appendTo('body');
			jQuery("#IconMenuPanel").css({position: "fixed"});
			jQuery("#IconMenuPanel").offset({left:600+jQuery('#'+floorplan_div).position().left, top: 150+jQuery('#'+floorplan_div).position().top});
			
			//jQuery("#IconMenuPanel").offset({left: 600, top: 150}).appendTo('body');
		}

		jQuery("#IconMenuPanel").show();

		jQuery("#IconMenuPanel").height(140);

		jQuery("#location_text_static").hide();
		jQuery("#location_text_dynamic").hide();

// TOP CROSS


		jQuery('#CloseObjectMenuX').css( 'cursor', 'pointer' );
		jQuery("#CloseObjectMenuX").click(function() {

			jQuery("#IconMenuPanel").hide();
			cvjs_setCreationMode(!cvjs_supressPopUpModal);
			hideOnlyPop();
			cvjs_clearDrawing();


		});


		// we make saving active....  for testing...
		save_drawing_flag = 1;

// SAVE DRAWING ICON BAR


		jQuery('#save_drawing').mouseover(function()
			{
				if (save_drawing_flag == 1)
			    	jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Over.png");

			});

		jQuery('#save_drawing').mouseout(function()
			{
			    if (save_drawing_flag == 1)
			    	jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Up.png");

			});



		jQuery('#save_drawing').mousedown(function()  //ZZZ
			{

				if (save_drawing_flag == 1) {

					// Set opacity of IconMenuPanel and block interaction
					jQuery('#IconMenuPanel').css("filter", "alpha(opacity=20)");
					// filter:alpha(opacity=25);
					jQuery('#IconMenuPanel').css("opacity", "0.20");
					// 	opacity:0.2;

					//jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(500);
					//jQuery("#wait_looper_text_id").html("Saving");

// add XX
					jQuery("#savepane_small").fadeIn(500);
					jQuery("#savepane_small").show();

//v3WWW
					// block interaction!!!
					wait_looper_on = 1;

					var loc_x = jQuery(window).width()/2;  // - ( jQuery('#IconMenuPanel').width()+200)/2;   // image is 86x14    //infopane_small is 200
					var loc_y = (jQuery(window).height() - 14) / 2;

					
						var position = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();
						var floorplan_h = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
						var floorplan_w = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	var floorplan_pos = jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css('position');				
	if (floorplan_pos == 'absolute'){ // absolute location,  so we use global variables
		loc_x = position.left+floorplan_w/2-86;   // image is 86x14
		loc_y = position.top+floorplan_h/2-14;		
	}
	else{	
		loc_x = floorplan_w/2-86;   // image is 86x14
		loc_y = floorplan_h/2-14;		

	}
	
					
					
					
					//jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).css({
					//	left:loc_x,
					//	top: loc_y,
					//	position:'absolute'
					//});



					jQuery("#savepane_small").css({
						left:loc_x,
						top: loc_y,
						position:'absolute'
					});



					jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Down.png");

						save_drawing_flag = 0;

						// clear colors if in select mode
						reset_color_on_selected_space();

						// NEW
						var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
						var building_data_identifier = "BUILDING_NAME_GOES_HERE";
						var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));

						var tempstr = id_publish_location;
						
					
						// 3.3.07b  , we set the location of the save drawing to space folder files + space_ + current file name + ".js"
						// instead
						var downloadFileName = "";

						var noconvertedfile = false
						if (cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]==""){		
								console.log("Source file not DWG!");
								noconvertedfile = true;
								// return;
						}			
						var downloadFileName = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];		
						
						if (noconvertedfile)			
								downloadFileName = currentLoadedDrawingFullName; 
							
						if (downloadFileName.indexOf('/')>-1) 
							downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);

						downloadFileName = downloadFileName.substring(0, downloadFileName.lastIndexOf('.'));
						

						tempstr = cvjs_filepathServerSpaceObjects + "space_" + downloadFileName + ".js";
						// 3.3.07b
						
						
						

						var n_str = "";

						//  save .rw file with data arrays to server

						/*
							var fArr_Name = new Array();  // CH
							var fArr_Id = new Array();  // CH
							var fArr_PolygonNr = new Array();  // CH
							var fArr_PolygonLayerName = new Array();  // CH
							var fArr_Occupancy = new Array();  // CH
							var fArr_Tags = new Array();  // CH
							var fArr_Type = new Array();  // CH
						*/

						
						var handleUpdates = 0;
						var dataHandleString = "";
						
						
						var dataUrl = "";

						//  create a .js script file containing all edited objects and their reference data, save that back to server

						/*
						var buildings = {
							MY_OFFICE_BUILDING: {
								name: "Office Building",
								company: "X",
								address: "My place",
								city: "City",
								state: "CA",
								FacMgr: "admin@mycorp.com",
								floors: {
									ground : {
										name: "undefined",
										file: "x-1.dwf",
										rooms: {
											NODE_4: {
												name: "XXX",
												id: 123,
												type: "Conference Room",
												},
											NODE_3: {
												name: "YYY,
												id: 123,
												type: "Conference Room",
												},
											}
										},
									b1 : {
										name: "undefined",
										rooms: {}
										}
									}
							}

						}

						*/

						//console.log("building header");
						// create the header         - see top of file for variable names

						dataUrl="";

						// 3.3.07a
						if (cvjs_changeSpaceObject_ManualCreationMode) {
								dataUrl = cvjs_createSpaceOutput_JSfile();
						}
						else{   // we move the legacy .js space file into a separate method
								dataUrl = cvjs_createSpaceOutput_JSfile_Legacy();						
						}
						
						//var finalUrl = overlay_data_url+'save-file-p3.php';
 						var finalUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController;
						
						//4.1.01g   - For ASP.NET, the controller has to be the Redline Controller, nothing changes for PHP mode
 						var finalUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;
						if (tempstr.indexOf("\\")>-1){
							// do nothing
						}
						else{
							tempstr = encodeURIComponent(tempstr)
						}
						// //4.1.01g


					
						

						var js_data = {};
						js_data['file'] = tempstr;   // encodeURIComponent(tempstr);
						js_data['file_content'] = dataUrl;

if (cvjs_debug) console.log(finalUrl+" tempstr="+tempstr+" dataUrl="+dataUrl);
						jQuery.ajax({
						  url:finalUrl,
						  type: 'post',
						  data: js_data,
						  success: function(html){

if (cvjs_debug) console.log("succes html "+html);


//console.log("C1: make save button gray");


						// make the save button gray
						//jQuery('#save_drawing').css('background', '	#DDDDDD'); //	#CCCCFF   #EEEEEE
						//jQuery('#save_drawing').css('color', 'black');
						jQuery('#save_drawing_image').attr("src", ""+cvjs_imagesLocation+"tools/SaveChanges_240x22_Inactive.png");


						save_drawing_flag = 0;


							jQuery('#IconMenuPanel').css("filter", "alpha(opacity=100)");
							// filter:alpha(opacity=25);
							jQuery('#IconMenuPanel').css("opacity", "1");
							// 	opacity:0.2;

							//jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(500);
							//jQuery("#wait_looper_text_id").html("Saving");

		// add XX
							jQuery("#savepane_small").fadeOut(500);
							jQuery("#savepane_small").hide();


							
			//   3.2.02e   -> make an xml file for dwgMerge						
								dataHandleString ="<cvjsAddXdataToHandle>\n<totalUpdateHandles>"+handleUpdates+"</totalUpdateHandles>\n"+dataHandleString+"</cvjsAddXdataToHandle>"; 
								console.log(dataHandleString+"  "+current_selected_shortname+" "+id_publish_location);
//								window.alert(dataHandleString+"  "+current_selected_shortname+" "+id_publish_location);

								var xml_out = id_publish_location.substring(0, id_publish_location.lastIndexOf("."))+".xml";
								var js_data = {};
								js_data['file'] = encodeURIComponent(xml_out);
								js_data['file_content'] = dataHandleString;

			if (cvjs_debug) console.log(finalUrl+" tempstr="+tempstr+" dataUrl="+dataUrl);
								jQuery.ajax({
								  url:finalUrl,
								  type: 'post',
								  data: js_data,
								  success: function(html){
							
							
								  }  // end success save <file>.js

								});
							
							
							
							
							


						  }  // end success save <file>.js

						});

						

					
					
					
					
					

					
				}   // end of save_drawing_flag conditional statement

			});





		jQuery('#done_editing_location').mousedown(function()
			{

				var polygonNumberFromDrawing = currentLinkId;    // we must find the polygon number from drawing
				var userFriendlyName = "";
				var scriptName = "";

				
				// 3.2.02c
				if (cvjs_creationInputType==1){
				
			
	if (cvjs_debug) console.log("done_editing_location linkID="+currentLinkId+" link unlink layer "+selectedLinkUnlinkLayer);

					// loop over i, find the index where the currentLinkId match, that index is being updated
					for (var i=0;i<fArr_Name.length;i++)
					{
						if (fArr_Id[i] == currentLinkId){
							fArr_PolygonNr[i] = polygonNumberFromDrawing;
							fArr_PolygonLayerName[i] = selectedLinkUnlinkLayer;

							userFriendlyName = fArr_Name[i];



	if (cvjs_debug) console.log("index in array:"+i+" fArr_PolygonNr[i] "+fArr_PolygonNr[i]+" fArr_PolygonLayerName[i] "+fArr_PolygonLayerName[i]+ " " +userFriendlyName );


							// NOTE NOTE - we hardcode the type to the location

							fArr_Type[i] = jQuery('#type_tag').val();
							fArr_Occupancy[i] = jQuery('#occupancy_tag').val();
							fArr_Layer[i] = jQuery('#layer_tag').val();
	//v3xxx
							for (spc in vqRooms[cvjs_active_floorplan_div_nr])
							{
								if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == fArr_Id[i] ){
									vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("layer");
									vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer", jQuery('#layer_tag').val())
									jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
								}
							}

							fArr_Tags[i] = jQuery('#other_tags').val();

	//console.log("XX"+fArr_Occupancy[i]+"  "+fArr_Tags[i]+"XX");

							// static page
							jQuery("#location_s").html(fArr_Name[i]);
							jQuery("#type_s").html(fArr_Type[i]);
							jQuery("#occupancy_s").html(fArr_Occupancy[i]);
							jQuery("#tags_s").html(fArr_Tags[i]);
							// 3.2.02c
							jQuery("#layer_s").html(fArr_Layer[i]);


						}
					}



					for (var i=0;i<fArr_Name_fixtures.length;i++)
					{
						if (fArr_Id_fixtures[i] == currentLinkId){
							//console.log("fArr_PolygonNr_fixtures updated index in array:"+i+"  polygonNumberFromDrawing="+polygonNumberFromDrawing);
							fArr_PolygonNr_fixtures[i] = polygonNumberFromDrawing;
							fArr_PolygonLayerName_fixtures[i] = selectedLinkUnlinkLayer;

							if (fArr_Name_fixtures[i] == "")
								userFriendlyName = fArr_Id_fixtures[i];
							else
								userFriendlyName = fArr_Name_fixtures[i];

							//userFriendlyName = fArr_Name_fixtures[i];


							fArr_Type_fixtures[i] = jQuery('#type_tag').val();
							fArr_Layer_fixtures[i] = jQuery('#layer_tag').val();

							for (spc in vqRooms[cvjs_active_floorplan_div_nr])
							{
								if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == fArr_Id_fixtures[i]){
									vqRooms[cvjs_active_floorplan_div_nr][spc].removeData("layer");
									vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer", jQuery('#layer_tag').val())
									jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
								}
							}

							fArr_Occupancy_fixtures[i] = jQuery('#occupancy_tag').val();
							fArr_Tags_fixtures[i] = jQuery('#other_tags').val();;

	//console.log("XX"+fArr_Occupancy[i]+"  "+fArr_Tags[i]+"XX");


							// static page

							if (fArr_Name_fixtures[i] == "")
								jQuery("#location_s").html(fArr_Id_fixtures[i]);
							else
								jQuery("#location_s").html(fArr_Name_fixtures[i]);

							jQuery("#type_s").html(fArr_Type_fixtures[i]);
							jQuery("#occupancy_s").html(fArr_Occupancy_fixtures[i]);
							jQuery("#tags_s").html(fArr_Tags_fixtures[i]);

						}
					}



					// we update the list with available spaces,
					generate_new_linkList();
					generate_new_linkList_fixtures();


					// we color the corresponding space on the drawing "polygonNumberFromDrawing" with a different color
					//console.log("before LinkShape layer="+selectedLinkUnlinkLayer+" currentLinkId="+currentLinkId);
					scriptCode =  "officeclick('"+currentLinkId+"')";
					// color the space back to the selection tool color

					//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 65, 164, 88);  // color it with link colors
					//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 65, 164, 88, alpha_value, polygon_order, clean_polygon_space);
		
				}
				else{   //3.2.02c
					
					
					//3.2.02e					
					currentLinkId = jQuery('#spaces_manual_tag').val();
		
					userFriendlyName = currentLinkId;
					console.log("currentLinkId "+currentLinkId+" "+polygonNumberFromDrawing+"  "+currentSelectedId);					
					
					jQuery("#location_s").html(currentLinkId);
					jQuery("#type_s").html(jQuery("#type_tag").val());
					jQuery("#occupancy_s").html(jQuery("#occupancy_tag").val());
					jQuery("#tags_s").html(jQuery("#other_tags").val());
					// 3.2.02c
					jQuery("#layer_s").html(jQuery("#layer_tag").val());
										
				}
						
//v3XXXX
//console.log("currentLinkId "+currentLinkId+" userFriendlyName "+userFriendlyName);

				for (spc in vqRooms[cvjs_active_floorplan_div_nr])
				{
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currentSelectedId) {
						var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")
//console.log("node "+node+"   "+jQuery('#layer_tag').val());
						cvjs_setCurrentNodeValuesFromExistingNode(node);
//						cvjs_overwriteNodeValues( node, currentLinkId, userFriendlyName, jQuery('#layer_tag').val(), cvjs_currentNode_group, cvjs_currentNode_attributes, jQuery('#type_tag').val(), cvjs_currentNode_tags, jQuery('#occupancy_tag').val(), true);
console.log(" before cvjs_overwriteNodeValues "+node+" "+currentLinkId+" "+userFriendlyName+" "+jQuery('#layer_tag').val());
console.log(" before cvjs_overwriteNodeValues "+cvjs_currentNode_group+" unpopulated "+cvjs_currentNode_attributes);

						cvjs_overwriteNodeValues( node, currentLinkId, userFriendlyName,  jQuery('#layer_tag').val(), cvjs_currentNode_group, " "                      , "unpopulated",                        jQuery('#type_tag').val(),  " ", jQuery('#occupancy_tag').val(), true);



						cvjs_redrawPop();
					}
				}



//				document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, select_link_r, select_link_g, select_link_b, alpha_value, polygon_order, clean_polygon_space);


				// and reset set the variable
				// currentLinkId = -1;    // no only changed with new selection



				// we drop this... set the text field of the space selector to "none selected"
				// jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');

				// we clear the icon menu and reset the selected command
				// This is changed, since select is permanently on
				// icon_command_active = 0;
				// all_icons_up();

				jQuery('#unlink_location').html("Unlink Location");
				// make it blue, since the space is linked
				jQuery('#unlink_location').css('color', '#0096d7');


				jQuery('#done_editing_location').html("");
				jQuery('#edit_cancel_location').html("Edit Fields");
				edit_cancel_flag = false;


				//  switch to static page
				jQuery("#location_text_static").show();
				jQuery("#location_text_dynamic").hide();


				// make the save field green
				save_drawing_flag = 1;

				// make the save drawing button green
			    //jQuery('#save_drawing').css('background', '#45AC5C');
			    //jQuery('#save_drawing').css('color', 'white');
				jQuery('#save_drawing_image').attr("src", "../app/images/tools/SaveChanges_240x22_Up.png");



				// now we have to update the select tool with the new information

				// v3 document.applets[0].TurnOffLinkShapes();
				//cvjs_hidePop();



				var layerLinkList = "";
				for (var i=0;i<fArr_Name.length;i++){
					 if (fArr_PolygonLayerName[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName[i] + ";" ;
					}
				}
				for (var i=0;i<fArr_Name_fixtures.length;i++){
					 if (fArr_PolygonLayerName_fixtures[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName_fixtures[i] + ";" ;
					}
				}


				
				// 3.2.02c
				cvjs_draw_space_object_names_on_spaces();				
				
				

				//   call linkmethod to select any type of shape

//console.log("done editing!");

			});



		jQuery('#unlink_location').mousedown(function()
			{


				// remove this layer from the space allocation list
				for (var i=0;i<fArr_Name.length;i++)
				{
					if (fArr_PolygonLayerName[i] == selectedLinkUnlinkLayer){
						fArr_PolygonNr[i] = -1;
						fArr_PolygonLayerName[i] = "none";
						fArr_Type[i] = -1;
						fArr_Occupancy[i] = -1;
						fArr_Tags[i] = -1;
					}
				}

				for (var i=0;i<fArr_Name_fixtures.length;i++)
				{
					if (fArr_PolygonLayerName_fixtures[i] == selectedLinkUnlinkLayer){
						fArr_PolygonNr_fixtures[i] = -1;
						fArr_PolygonLayerName_fixtures[i] = "none";
						fArr_Type_fixtures[i] = -1;
						fArr_Occupancy_fixtures[i] = -1;
						fArr_Tags_fixtures[i] = -1;
					}
				}


				// update the space list table
				generate_new_linkList();
				generate_new_linkList_fixtures();


				// update the hyperlink information on the polygon on the drawing

				var tempstr = selectedLinkUnlinkLayer.substring(5);
				// console.log(tempstr);
				var scriptCode = "officeclick('"+tempstr+"')";
				var userFriendlyName = "Object "+tempstr;

				// use the selection space colors for this shape
				// color the space back to the selection tool color

				//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 141, 192, 47);  // color it in unlink colors
				//document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 141, 192, 47, alpha_value, polygon_order, clean_polygon_space);


//console.log("currentLinkId "+currentLinkId+" userFriendlyName "+userFriendlyName);

//v3XXX
				for (spc in vqRooms[cvjs_active_floorplan_div_nr])
				{
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currentSelectedId) {
						var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node");
						if (cvjs_debug) console.log("node="+node);
						var linkId = node.substring(node.lastIndexOf("NODE_")+5);
						cvjs_overwriteNodeValues( node, node, "unassigned_"+linkId, "unassigned", "unassigned", "unassigned", "unassigned", "unassigned", "unassigned", false);
						cvjs_redrawPop();
					}
				}


//				document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, select_no_link_r, select_no_link_g, select_no_link_b, alpha_value, polygon_order, clean_polygon_space);

//console.log("selectedLinkUnlinkLayer="+selectedLinkUnlinkLayer);


				// now we have to update the select tool with the new information

//v3				document.applets[0].TurnOffLinkShapes();
				//cvjs_hidePop();



				var layerLinkList = "";
				for (var i=0;i<fArr_Name.length;i++){
					 if (fArr_PolygonLayerName[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName[i] + ";" ;
					}
				}

				for (var i=0;i<fArr_Name_fixtures.length;i++){
					 if (fArr_PolygonLayerName_fixtures[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName_fixtures[i] + ";" ;
					}
				}


				//   call linkmethod to select any type of shape


if (cvjs_debug) console.log("done unlink!");


				// we set the text field of the space selector to "none selected"
				//jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
				// all_icons_up();

				// make it gray, since the space is now unlinked
				jQuery('#unlink_location').css('color', '#999999');

				// clear the fields since the space is now unlinked
				// dynamic page
				jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
				jQuery("#drop_link_fixtures").html('None Selected'+'<b class="caret"></b>');
				jQuery("#type_tag").val(" ");

				//window.alert("XHere");	
				// 3.2.02c
				jQuery("#type_tag").val(id_main_data_template_type);

				
				
				jQuery("#layer_tag").val(" ");
				jQuery("#layer_tag").val(id_main_data_layer);


				jQuery("#occupancy_tag").val(" ");
				jQuery("#other_tags").val(" ");

				// static page
				jQuery("#location_s").html("None Selected");
				jQuery("#type_s").html("-");
				jQuery("#occupancy_s").html("-");
				jQuery("#tags_s").html("-");
				jQuery("#layer_s").html("-");

				jQuery("#maximoid1_s").html("-");
				jQuery("#maximoid2_s").html("-");
				jQuery("#maximoid3_s").html("-");

				jQuery("#maximo_df_1").html("-");
				jQuery("#maximo_df_2").html("-");
				jQuery("#maximo_df_3").html("-");


				// make the save field green
				// make the save drawing button green
			    //jQuery('#save_drawing').css('background', '#45AC5C');
			    //jQuery('#save_drawing').css('color', 'white');
			    jQuery('#save_drawing_image').attr("src", "../app/images/tools/SaveChanges_240x22_Up.png");

			    save_drawing_flag = 1;


			});




		jQuery('#edit_cancel_location').mousedown(function()
			{


			 if (edit_cancel_flag == false){

				if (lastObj==-1){

					cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.NoObjectSelected);

				}
				else{

					//ZZZZ jQuery('body').css('overflow', 'scroll');  // make scroll mode to be able to select from location list

					// we are pressing the edit cancel button to enter edit mode
					jQuery('#edit_cancel_location').html("Cancel");
					jQuery('#done_editing_location').html("Done Editing");
					jQuery('#unlink_location').html("");


					//  switch to dynamic page
					jQuery("#location_text_static").hide();
					jQuery("#location_text_dynamic").show();



					jQuery("#IconMenuPanel").height(370);



	//v3				document.applets[0].TurnOffLinkShapes();   // turn off LinkShapes
					//cvjs_hidePop();


					edit_cancel_flag = true;

				}

			 }else{

			 	// we are in cancel mode and want to revert to init mode
			 	jQuery('#edit_cancel_location').html("Edit Fields");
			 	jQuery('#done_editing_location').html("");
			 	jQuery('#unlink_location').html("Unlink Location");



				//  switch to static page
				jQuery("#location_text_static").show();
				jQuery("#location_text_dynamic").hide();



				jQuery("#IconMenuPanel").height(240);


				// turn on LinkShapes
				//cvjs_hidePop();


				var layerLinkList = "";
				for (var i=0;i<fArr_Name.length;i++){
					 if (fArr_PolygonLayerName[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName[i] + ";" ;
					}
				}

				for (var i=0;i<fArr_Name_fixtures.length;i++){
					 if (fArr_PolygonLayerName_fixtures[i].indexOf("NODE_")>=0){
						layerLinkList =	layerLinkList + fArr_PolygonLayerName_fixtures[i] + ";" ;
					}
				}


				//   call linkmethod to select any type of shape


			if (cvjs_debug) console.log("edit_cancel_location");



			 	edit_cancel_flag = false;

			 }

				// old stuff
				// color the selected layer in the color it had before selection
				// reset_color_on_selected_space();
				// all_icons_up();
				// do nothing with the save field


			});



//			window.alert(cvjs_creationInputType+" cvjs_creationInputType");

			// 3.2.02c
				if (cvjs_creationInputType==1){      // pull down menu setup
					jQuery("#cv_link11").show();
					jQuery("#cv_link11_B2").hide();
					jQuery("#cv_link11_B3").show();
				}
				else{                                // individual tag add setup
					jQuery("#cv_link11").hide();
					jQuery("#cv_link11_B2").show();
					jQuery("#cv_link11_B3").hide();
				}
	














	});

}


    function CADViewer_floorplan_methods(parameter1)
    {

if (cvjs_debug) console.log("CADViewer_floorplan_methods parameter1="+parameter1+" icon_command_active="+icon_command_active);


	try{

		// 2016-12-4
		if (space_object_edit_mode){
			jQuery("#location_text_static").hide();
			jQuery("#location_text_dynamic").show();
			jQuery("#IconMenuPanel").height(240);
		}
		else{
			jQuery("#location_text_static").show();
			jQuery("#location_text_dynamic").hide();
			jQuery("#IconMenuPanel").height(240);
		}




		if (icon_command_active == 1  || icon_command_active == 6 ){

			// A) we have selected a link polygons, which must be assigned with a space
			// B) or we have clicked the select button and the canvas, which means that something has been selected


			 if (selectedLinkUnlinkLayer != parameter1)
			 	reset_color_on_selected_space();

			 	selectedLinkUnlinkLayer = parameter1;

			// index_47:  selection mode is always on
			// if nothing is selected, then we hide the select window

				if (selectedLinkUnlinkLayer == "nolayername"){
					jQuery('#link_tags_table').hide();
				}
				else{
					jQuery('#link_tags_table').show();
				}



				// check what type of object that has been clicked

					// remove this layer from the space allocation list
				var linkflag = -1;
				for (var i=0;i<fArr_Name.length;i++)
				{
					if (fArr_PolygonLayerName[i] == selectedLinkUnlinkLayer){
						linkflag = i;
					}
				}

// fixtures
				var linkflag_fixture = -1;
				for (var i=0;i<fArr_Name_fixtures.length;i++)
				{
					if (fArr_PolygonLayerName_fixtures[i] == selectedLinkUnlinkLayer){
						linkflag_fixture = i;
					}
				}

//console.log("linkflag="+linkflag+" linkflag_fixture="+linkflag_fixture);

				if (linkflag > -1 ){
					// this object is linked and therefore unlink buttons must be active
					// link will be active when action in the location field is done
					jQuery('#unlink_location').css('color', '#0096d7');
					jQuery('#done_editing_location').css('color', '#999999');  // #dddddd

					// now we must populate the location and tag fields in the menu correctly

					// dynamic page
					jQuery("#drop_link_spaces").html(fArr_Name[linkflag]+'<b class="caret"></b>');
					jQuery("#drop_link_fixtures").html("None Selected"+'<b class="caret"></b>');

					jQuery("#type_tag").val(fArr_Type[linkflag]);

					var nval = fArr_Name[linkflag];

					jQuery("#layer_tag").val("");
					jQuery("#layer_tag").val(id_main_data_layer);

					jQuery("#layer_s").html("");


//v3XXX
					var currId =  fArr_Id[linkflag];

//console.log("  currId "+currId);

					for (spc in vqRooms[cvjs_active_floorplan_div_nr])
					{
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currId ){


							jQuery("#layer_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
							jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
						}
					}

					jQuery("#occupancy_tag").val(fArr_Occupancy[linkflag]);
					jQuery("#other_tags").val(fArr_Tags[linkflag]);

					// static page
					jQuery("#location_s").html(fArr_Name[linkflag]);
					jQuery("#type_s").html(fArr_Type[linkflag]);
					jQuery("#occupancy_s").html(fArr_Occupancy[linkflag]);
					jQuery("#tags_s").html(fArr_Tags[linkflag]);

					jQuery("#maximoid1_s").html(fArr_Maximo_Datafield1[linkflag]);
					jQuery("#maximoid2_s").html(fArr_Maximo_Datafield2[linkflag]);
					jQuery("#maximoid3_s").html(fArr_Maximo_Datafield3[linkflag]);

					jQuery("#maximo_df_1").html(fArr_Maximo_Datafield1[linkflag]);
					jQuery("#maximo_df_2").html(fArr_Maximo_Datafield2[linkflag]);
					jQuery("#maximo_df_3").html(fArr_Maximo_Datafield3[linkflag]);

					currentLinkId = fArr_Id[linkflag];
				}

				if (linkflag_fixture > -1 ){
					// this object is linked and therefore unlink buttons must be active
					// link will be active when action in the location field is done
					jQuery('#unlink_location').css('color', '#0096d7');
					jQuery('#done_editing_location').css('color', '#999999');  // #dddddd

					// now we must populate the location and tag fields in the menu correctly

					// dynamic page
					jQuery("#drop_link_spaces").html("None Selected"+'<b class="caret"></b>');
					jQuery("#drop_link_fixtures").html(fArr_Name_fixtures[linkflag_fixture]+'<b class="caret"></b>');

					jQuery("#type_tag").val(fArr_Type_fixtures[linkflag_fixture]);


					var nval = fArr_Name_fixtures[linkflag_fixture];
					jQuery("#layer_tag").val("");
					jQuery("#layer_tag").val(id_main_data_layer);



					jQuery("#layer_s").html("");

					var currId =  fArr_Id_fixtures[linkflag_fixture];

//console.log("  currId fixtures "+currId);

					for (spc in vqRooms[cvjs_active_floorplan_div_nr])
					{
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == currId ){
							jQuery("#layer_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
							jQuery("#layer_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer"));
						}
					}

					jQuery("#occupancy_tag").val(fArr_Occupancy_fixtures[linkflag_fixture]);
					jQuery("#other_tags").val(fArr_Tags_fixtures[linkflag_fixture]);

					// static page
					jQuery("#location_s").html(fArr_Name_fixtures[linkflag_fixture]);
					jQuery("#type_s").html(fArr_Type_fixtures[linkflag_fixture]);
					jQuery("#occupancy_s").html(fArr_Occupancy_fixtures[linkflag_fixture]);
					jQuery("#tags_s").html(fArr_Tags_fixtures[linkflag_fixture]);

					currentLinkId = fArr_Id_fixtures[linkflag_fixture];
				}


//console.log("currentLinkId="+currentLinkId);

				if (linkflag_fixture == -1  && linkflag == -1 ){
					// this object is an unlinked new object and therefore no is active
					// link will be active when action in the location field is done
					jQuery('#unlink_location').css('color', '#999999');
					jQuery('#done_editing_location').css('color', '#999999');

					// dynamic page
					jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
					jQuery("#drop_link_fixtures").html("None Selected"+'<b class="caret"></b>');

					jQuery("#type_tag").val("");
					
					//window.alert("XHere_2");	
					// 3.2.02c
					jQuery("#type_tag").val(id_main_data_template_type);
					
					
					jQuery("#layer_tag").val("");
					jQuery("#layer_tag").val(id_main_data_layer);


					jQuery("#occupancy_tag").val("");
					jQuery("#other_tags").val("");

					// static page
					jQuery("#location_s").html("None Selected");
					jQuery("#type_s").html("-");
					jQuery("#occupancy_s").html("-");
					jQuery("#tags_s").html("-");
					jQuery("#layer_s").html("-");

					jQuery("#maximoid1_s").html("-");
					jQuery("#maximoid2_s").html("-");
					jQuery("#maximoid3_s").html("-");

					currentLinkId = -1;

				}



		}
		else{   // all other commands release icons

			if (icon_command_active == 2){
				if (selectedLinkUnlinkLayer == "nolayername"){

					// do nothing
				}
				else{

					// remove this layer from the space allocation list
					for (var i=0;i<fArr_Name.length;i++)
					{
						if (fArr_PolygonLayerName[i] == selectedLinkUnlinkLayer){
							fArr_PolygonNr[i] = -1;
							fArr_PolygonLayerName[i] = "none";
							fArr_Type[i] = -1;
							fArr_Layer[i] = -1;
							fArr_Occupancy[i] = -1;
							fArr_Tags[i] = -1;
						}
					}


					for (var i=0;i<fArr_Name_fixtures.length;i++)
					{
						if (fArr_PolygonLayerName_fixtures[i] == selectedLinkUnlinkLayer){
							fArr_PolygonNr_fixtures[i] = -1;
							fArr_PolygonLayerName_fixtures[i] = "none";
							fArr_Type_fixtures[i] = -1;
							fArr_Layer_fixtures[i] = -1;
							fArr_Occupancy_fixtures[i] = -1;
							fArr_Tags_fixtures[i] = -1;
						}
					}



					// update the space list table
					generate_new_linkList();

					generate_new_linkList_fixtures();


					// update the hyperlink information on the polygon on the drawing

					var tempstr = selectedLinkUnlinkLayer.substring(5);

					var scriptCode = "officeclick('"+tempstr+"')";
					var userFriendlyName = "Object "+tempstr;

//					document.applets[0].LinkShape(selectedLinkUnlinkLayer, scriptCode, userFriendlyName, 153, 153, 153, alpha_value, polygon_order, clean_polygon_space);


//console.log("before calling LinkShape selectedLinkUnlinkLayer "+selectedLinkUnlinkLayer);


					// we set the text field of the space selector to "none selected"
					jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');

				}
			}

			icon_command_active = 0;

			// reset all icon images
			//all_icons_up();

//v3
			icon_command_active = 6;
			jQuery('#select_image').attr("src", ""+cvjs_imagesLocation+"tools/Select_Selected_2.png");
			jQuery('#cv_select div').css('color', '#000000');
			jQuery('#cv_select').css('background', '#a4d7f4');


    	}

    	}
    	catch(err) {  console.log(err); }



    }




function cvjs_addCircleAccessPointObject(){

	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);
	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = "NODE_"+Node_id;
//console.log(currentNode_id+" "+Node_id+" "+currentNode_underbar);
	currentNode_name = "unassigned";
	currentNode_layer = "unassigned";
	currentNode_group = "unassigned";
	currentNode_attributes = "unassigned";
	currentNode_attributeStatus = "unpopulated";  // 3.2.02b
	currentNode_type = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_CircleAccessPoint();

}


var AP_diameter = 400;

function cvjs_addHandleFunc_CircleAccessPoint() {

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,60, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(0, 0, 1, 1).attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});
//	handleGroup.drag(move_cvjs_create_circle_ap,start_cvjs_create_circle_ap,stop_cvjs_create_circle_ap);

	handleGroup.mousedown(mousedown_copycircle_ap);
}


function cvjs_removeHandleFunc_CircleAccessPoint() {
		handleGroup.selectAll('handler').remove();
		handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_circle_ap = function() {
	flag_c = false;
	 tRubberBand_c.attr({stroke: "#b00000", "stroke-width" : "0.01", "fill" : "none", "fill-opacity" : "0.01", "opacity" : "0.01"});
}

var move_cvjs_create_circle_ap = function(dx,dy,x,y) {

var text = x+" "+y+" dx="+dx+" dy="+dy+" viewbox "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//myText.attr({'text': text});

		if (!flag_c){
			firstX_c = x;
			firstY_c = y;
			lastX_c = dx;
			lastY_c = dy;
			flag_c = true;
		}
		else{
			lastX_c = dx;
			lastY_c = dy;

		}

	delta = Math.sqrt(dx*dx+dy*dy);

	// Move to Global_scale.

//	tTransform_c = "t" + firstX_c + "," + firstY_c;
	tTransform_c = "t" + (firstX_c-delta_x)/global_scale + "," + (firstY_c-delta_y)/global_scale;

	delta/=global_scale;

	tTransform_c += "S"+(delta);
	tRubberBand_c.attr({'transform': tTransform_c , "opacity" : "1"});
}

var stop_cvjs_create_circle_ap = function() {

// selected unlinked red: #ff9999 : 255, 153, 153
// #5BBEF6
	tRubberBand_c.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});





//test
	tRubberBand_c.attr({fill: '#00ff99', "fill-opacity": "0.5", stroke: '#009999', 'stroke-opacity': "1"});


	// remove handler
//	cvjs_removeHandleFunc_Circle();



var startColor = '#CD9A97';
var middleColor = '#F8FD96';
var endColor = '#99FEC5';
var xC = 0.5;
var yC = 0.5;
var radius = 0.5;
var fillOpacity = 0.8;


	var radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

	if (cvjs_debug) console.log(radial_gradient);


	tRubberBand_c.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });



	if (cvjs_debug) console.log(tRubberBand_c);




var bigCircle = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(1200, 1000, 800);


bigCircle.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});



bigCircle.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


if (true) return;



	tRubberBand_c.attr({
		clip: vqRedlines[0]
//		clip: bigCircle
	});



	bigCircle.attr({
		clip: tRubberBand_c
	});





//	tRubberBand_c.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


//var bigCircle = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(1200, 1000, 800);


//bigCircle.attr({
//    fill: "#bada55",
//    stroke: "#000",
//    strokeWidth: 5
//});



//	bigCircle.attr({
//		mask: tRubberBand_c
//	});


if (cvjs_debug) console.log(vqRedlines[0]);


//	bigCircle.attr({
//		clip: vqRedlines[0]
//	});


//	vqRedlines[0].attr({
//		clip: bigCircle
//	});





//	bigCircle.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


//	tRubberBand_c.attr({
//		mask: bigCircle
//	});





if (true) return;



	// remove handler
	cvjs_removeHandleFunc_CircleAccessPoint();
	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('Circle');
};




var mousedown_copycircle_ap = function(e,x,y) {


//console.log(e+" "+x+" "+y);

	tRubberBand_c = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle((x-delta_x)/global_scale, (y-delta_y)/global_scale, AP_diameter , AP_diameter );

//	tRubberBand_c.attr({	fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1" });

	var startColor = '#CD9A97';
	var middleColor = '#F8FD96';
	var endColor = '#99FEC5';
	var xC = 0.5;
	var yC = 0.5;
	var radius = 0.5;
	var fillOpacity = 0.8;

	var radial_gradient = cvjs_rPaper[cvjs_active_floorplan_div_nr].gradient("r("+xC+", "+yC+", "+radius+" )"+startColor+"-"+middleColor+"-"+endColor);

//	console.log(radial_gradient);
	tRubberBand_c.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });

//	console.log(tRubberBand_c);
//var bigCircle = cvjs_rPaper[cvjs_active_floorplan_div_nr].circle(1200, 1000, 800);

/*
bigCircle.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});
*/
//bigCircle.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });
//	console.log(bigCircle);


//	var walls_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(bigCircle);

//	var walls_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].group();



//walls_all.attr({
//    fill: "#bada55",
//    stroke: "#000",
//    strokeWidth: 5
//});

//walls_all.attr({'fill': radial_gradient, 'fill-opacity': fillOpacity, 'stroke-opacity': fillOpacity });


/*
	for (i=0; i<vqRooms.length; i++)
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{

		vqRooms[cvjs_active_floorplan_div_nr][spc].attr({
   			 fill: "#FF0000"
		});

		walls_all.add(vqRooms[cvjs_active_floorplan_div_nr][spc]);
	}

*/

//var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 0 0 L 0 2000 L 2000 2000 L 2000 0 z");

//var x84=cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M567.29,1473.8h-97.37L469.93,1773.29h97.37L567.29,1473.8").data("node","NODE_84");

//var x25=cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M738.34,1477.69H567.37L567.37,1647.89H738.34L738.34,1477.69").data("node","NODE_25");



var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M -500 0 L 3000 0 L 3000 3000 L 0 3000 z" + "M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53"+"M567.29,1473.8h-97.37L469.93,1773.29h97.37L567.29,1473.8"+"M738.34,1477.69H567.37L567.37,1647.89H738.34L738.34,1477.69").data("node","NODE_70");

x70.attr({
    fill: middleColor,
    'fill-opacity': fillOpacity

//    stroke: "#000",
//    strokeWidth: 5
});



//var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 0 0 L 0 000 L 2000 2000 L 2000 0 z" + "M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53"+"M567.29,1473.8h-97.37L469.93,1773.29h97.37L567.29,1473.8"+"M738.34,1477.69H567.37L567.37,1647.89H738.34L738.34,1477.69").data("node","NODE_70");
var x85= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("").data("node","NODE_85");

//var x70= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14");
//var x85= cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53");



//cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 50 50 L 50 150 L 150 150 L 150 50 z" + " M 75 75 L 75 125 L 125 125 L 125 75 z").attr("fill", "#f00");

cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M 50 50 L 50 150 L 150 150 L 150 50 z" + " M 75 75 L 125 75 L 125 125 L 75 125 z").attr("fill", "#00ff00");



	tRubberBand_c.attr({
//		clip: x85,
		clip: x70 ,
//		'clip-rule': 'nonzero'
		'clip-rule': 'evenodd'
	});



	cvjs_removeHandleFunc_CircleAccessPoint();

if (true) return;

/*
x70.attr({
    fill: "#bada55",
    stroke: "#000",
    strokeWidth: 5
});

x85.attr({
    fill: "#ba5500",
    stroke: "#000",
    strokeWidth: 5
});

*/

try{


	var walls_all = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M567.37,1717.21H738.34l0,19.47h1.95l0,34.66H567.29l0.07,-54.14"),cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M448.9,1594.53H329.53L329.53,1773.29h40.5l0,-19.08h78.87L448.9,1594.53"));
	//walls_all.add(x85);
	//walls_all.add(x70);


	walls_all.attr({
		fill: "#00ff00"
	});


if (cvjs_debug) console.log(tRubberBand_c+"  "+walls_all);

	tRubberBand_c.attr({
		clip: x85
//		clip: walls_all
//		clip: bigCircle,
//		'clip-rule':"evenodd"

	});


}catch (err){console.log(err);}



//		walls_all.add(bigCircle);

//walls_all.attr({
//    fill: "#00ff00"
//});


/*
	tRubberBand_c.attr({
		clip: x85
//		clip: walls_all
//		clip: bigCircle,
//		'clip-rule':"evenodd"

	});

*/

//	tRubberBand_c.attr({
//		clip: x70
//		clip: walls_all
//		clip: bigCircle,
//		'clip-rule':"evenodd"
//
//	});






//console.log(walls_all);

/*

	tRubberBand_c.attr({
//		clip: walls_all
		clip: bigCircle,
		'clip-rule':"evenodd"
	});

*/

/*

	tRubberBand_c.attr({
		clip: vqRedlines[0]
//		clip: bigCircle
	});


*/








	cvjs_removeHandleFunc_CircleAccessPoint();

//	cvjs_removeHandleFunc_CopyCircle();

//	cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar, tRubberBand_c);
//	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);

	cvjs_graphicalObjectCreated('CopyCircleAP');


}

// END- Draw Circle



// https://en.wikipedia.org/wiki/List_of_ISO_739-1_codes



function cvjs_setLanguage(Language){
	try{
		cvjs_currentLanguage = 1;
		for (var i=0; i<lTable.numberOfLanguages; i++) {
			//console.log(i+" "+Language.toLowerCase()+" "+(lTable.languages[i].thisLanguage).toLowerCase());
			if ( Language.toLowerCase().indexOf((lTable.languages[i].thisLanguage).toLowerCase()) == 0  && (Language.length == lTable.languages[i].thisLanguage.length) )
				cvjs_currentLanguage = i;
		}
		//console.log(lTable.languages[cvjs_currentLanguage].thisLanguage)
	}
	catch (err){  console.log(err)}

	//   After we have set the language, we have to update the modals
	//  No we do not update, because of the color palette and slider..... setLanguage is only called on intialization
	//  cvjs_updateModals();

	try{
		for (var i=0; i<lTable.numberOfLanguages; i++) {
			//console.log(i+" "+Language.toLowerCase()+" "+(lTable.languages[i].thisLanguage).toLowerCase());
			if ( Language.indexOf(lTable.languages[i].languageCode) == 0)
				cvjs_currentLanguage = i;
		}
		//console.log(lTable.languages[cvjs_currentLanguage].thisLanguage)
	}
	catch (err){  console.log(err)}






}

function cvjs_getLanguages(){

	var string = "";
	try{
		for (var i=0; i<lTable.numberOfLanguages; i++) {
			string += lTable.languages[i].languageCode+":"+lTable.languages[i].thisLanguage+";";
		}
	}
	catch (err){  console.log(err)}

	return string;
}



function cvjs_setLanguageIndexIncrement(){


	var i = cvjs_currentLanguage+1;

	//console.log(i+"  language "+cvjs_currentLanguage+" number of languages "+lTable.numberOfLanguages);

	cvjs_setLanguageIndex(i);

}


function cvjs_setLanguageIndex(languageIndex){


	if (languageIndex >= lTable.numberOfLanguages) languageIndex = 0;
	if (languageIndex<0) languageIndex = lTable.numberOfLanguages-1;



	cvjs_currentLanguage = languageIndex;

	//console.log("language is "+ lTable.languages[cvjs_currentLanguage].thisLanguage);

	// After we have set the language, we have to update the modals
	cvjs_updateModals();
}


function cvjs_updateModals(){

//	window.alert("are we updating?");

	console.log("are we updating?");


	cvjs_printModal_content ="<table><tr><td><div id=\"printModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_printHeader\">"+lTable.languages[cvjs_currentLanguage].PrintModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitPrintModal(\'"+floorplan_div+"\', 1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"25\"></canvas>"+lTable.languages[cvjs_currentLanguage].PrintModal.Paper+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_paperSize\"><option value=\"1\">A4</option><option value=\"2\">A3</option><option value=\"3\">A2</option><option value=\"4\">Letter</option><option value=\"5\">Ledger</option><option value=\"6\">Legal</option><option value=\"7\">ANSI C</option><option value=\"8\">A1</option><option value=\"9\">A0</option><option value=\"10\">US Arch D</option><option value=\"11\">US Arch E1</option></select><canvas id=\"dummy\" width=\"45\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].PrintModal.Orientation+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_paperOrientation\"><option value=\"1\">Landscape</option><option value=\"2\">Portrait</option></select></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"25\"></canvas>"+lTable.languages[cvjs_currentLanguage].PrintModal.Resolution+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"300\" id=\"cvjs_printResolution\" class=\"cvjs_inputCalibrateModal\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><i class=\"cvjs_textModalSmall\">"+lTable.languages[cvjs_currentLanguage].PrintModal.ResolutionText+"</i><canvas id=\"dummy\" width=\"32\" height=\"10\"></canvas><input id=\"cvjs_print_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].PrintModal.Print+"\" onmousedown=\"cvjs_exitPrintModal(\'"+floorplan_div+"\', 2);\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><table><tr><td><input type=\"checkbox\" id=\"cvjs_grayscale_checkbox\" value=\"grayscale_status\"></td><td><canvas id=\"dummy\" width=\"30\" height=\"30\"></canvas></td><td>"+lTable.languages[cvjs_currentLanguage].PrintModal.Grayscale+"</td><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td><td><input type=\"checkbox\" id=\"cvjs_printpdf_checkbox\" value=\"grayscale_status\"></td><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td><td id=\"printToPdfLocation\">"+lTable.languages[cvjs_currentLanguage].PrintModal.PrintPDF+"</td></tr></table></td></tr></table>";

	jQuery("#printModal").html(cvjs_printModal_content);

	cvjs_textSearchModal_content = "<table><tr><td><div id=\"textSearchHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_searchTextHeader\">"+lTable.languages[cvjs_currentLanguage].SearchTextModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_textsearchmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].SearchTextModal.SearchText+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"\" id=\"cvjs_searchTextFromModal\" class=\"cvjs_inputTextSearchModalwide\"></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas>"+lTable.languages[cvjs_currentLanguage].SearchTextModal.Zoom+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1000\" id=\"cvjs_percentageLevelFromModal\" class=\"cvjs_inputTextSearchModal\"><canvas id=\"dummy\" width=\"5\" height=\"10\"></canvas></canvas><b class=\"cvjs_textModalSmall\">(%)</b><canvas id=\"dummy\" width=\"30\" height=\"10\"></canvas><input id=\"cvjs_textsearch_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].SearchTextModal.Search+"\" onClick=\"cvjs_startSearchText();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>"
	jQuery("#textsearchModal").html(cvjs_textSearchModal_content);

//CCCCC
	cvjs_infoMessageModal_content = "<div class=\"modal-dialog modal-dialog-md\"><div class=\"info_messageModalWrapper\"><table><tr><td><div id=\"infoModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_infoMessageHeader\">"+lTable.languages[cvjs_currentLanguage].InfoMessageModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_informationmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><div id=\"cvjs_informationModalText_"+floorplan_div+"\">Text here</div></td></tr></table></div></div>"
	jQuery("#info_messageModal").html(cvjs_infoMessageModal_content);

	cvjs_infoMessageModal_content = "<table><tr><td><div id=\"infoModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_infoMessageHeader\">"+lTable.languages[cvjs_currentLanguage].InfoMessageModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_informationmodal_2(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\" fillStyle=\"#FF9900\"></canvas><div id=\"cvjs_informationModalText_2\"> Text here</div></td></tr></table>"
	jQuery("#info_messageModal_2").html(cvjs_infoMessageModal_content);


	cvjs_redlineThicknessModal_content = "<table><tr><td><div id=\"thicknessHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_redlineThicknessHeader\">"+lTable.languages[cvjs_currentLanguage].RedlineThicknessModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_redlinethicknessmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].RedlineThicknessModal.Thickness+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"3\" id=\"cvjs_redlineThicknessInput\" class=\"cvjs_inputThicknessModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></canvas><input id=\"cvjs_thickness_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].RedlineThicknessModal.OK+"\" onClick=\"cvjs_setRedlineThicknessViaButton();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>";
	jQuery("#thicknessModal").html(cvjs_redlineThicknessModal_content);

	cvjs_collabStartModal_content = "<table><tr><td><div id=\"collabStartHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_redlineThicknessHeader\">"+lTable.languages[cvjs_currentLanguage].CollaborationStartModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_startcollabmodal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].CollaborationStartModal.Session+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"3\" id=\"cvjs_redlineThicknessInput\" class=\"cvjs_input_collabStartModal\"><canvas id=\"dummy\" width=\"70\" height=\"5\"></canvas><input id=\"cvjs_collabStart_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].CollaborationStartModal.OK+"\" onClick=\"cvjs_start_collab_button();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr></table>";
	jQuery("#collabStartModal").html(cvjs_collabStartModal_content);



//	jQuery("#colorModal").removeClass("cvjs_inputRedlineColor jscolor");
//	jQuery("#cvjs_colorPickerValue").removeClass("cvjs_inputRedlineColor jscolor");
//	jQuery("#cvjs_colorPickerValue").html("cvjs_inputRedlineColor jscolor");

	cvjs_redlineColorModal_content = "<table><tr><td><div id=\"colorModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_redlineColorHeader\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_color_modal_hide();\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.PickColor+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_colorPickerValue\" value=\"FF0000\" class=\"cvjs_inputRedlineColorModal jscolor {width:101, padding:10, shadow:false, borderWidth:0, backgroundColor:\'transparent\', insetColor:\'#000\',closable:true, closeText:'Close Color Picker!', onFineChange:\'cvjs_setRedlineColorFromPicker(this)\'}\"><canvas id=\"dummy\" width=\"40\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.SelectColor+"<canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input id=\"radioColor1\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><img id=\"cvjs_radioColor1_img\" src=\""+cvjs_imagesLocation+"blue_color.png\" border=\"1\"/><label id=\"cvjs_radio1\" for=\"radio1\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Blue+"</label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input id=\"radioColor2\" type=\"radio\" name=\"radioColor\" value=\"2\"><img id=\"cvjs_radioColor2_img\" src=\""+cvjs_imagesLocation+"red_color.png\" border=\"1\"/><label id=\"cvjs_radio2\" for=\"radio2\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Red+"</label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input id=\"radioColor3\" type=\"radio\" name=\"radioColor\" value=\"3\"><img id=\"cvjs_radioColor3_img\" src=\""+cvjs_imagesLocation+"orange_color.png\" border=\"1\"/><label id=\"cvjs_radio3\" for=\"radio3\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Orange+"</label><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"radioColor4\" type=\"radio\" name=\"radioColor\" value=\"4\"><img id=\"cvjs_radioColor4_img\" src=\""+cvjs_imagesLocation+"yellow_color.png\" border=\"1\"/><label id=\"cvjs_radio4\" for=\"radio4\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Yellow+"</label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input id=\"radioColor5\" type=\"radio\" name=\"radioColor\" value=\"5\"><img id=\"cvjs_radioColor5_img\" src=\""+cvjs_imagesLocation+"green_color.png\" border=\"1\"/><label id=\"cvjs_radio5\" for=\"radio5\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Green+"</label><canvas id=\"dummy\" width=\"17\" height=\"10\"></canvas><input id=\"radioColor6\" type=\"radio\" name=\"radioColor\" value=\"6\"><img id=\"cvjs_radioColor6_img\" src=\""+cvjs_imagesLocation+"purple_color.png\" border=\"1\"/><label id=\"cvjs_radio6\" for=\"radio6\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Purple+"</label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input id=\"radioColor7\" type=\"radio\" name=\"radioColor\" value=\"7\"><img id=\"cvjs_radioColor7_img\" src=\""+cvjs_imagesLocation+"gray_color.png\" border=\"1\"/><label id=\"cvjs_radio7\" for=\"radio7\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Gray+"</label><canvas id=\"dummy\" width=\"24\" height=\"10\"></canvas><input id=\"radioColor8\" type=\"radio\" name=\"radioColor\" value=\"8\"><img id=\"cvjs_radioColor8_img\" src=\""+cvjs_imagesLocation+"brown_color.png\" border=\"1\"/><label id=\"cvjs_radio8\" for=\"radio8\">"+lTable.languages[cvjs_currentLanguage].RedlineColorModal.Brown+"</label> </td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_redlinecolor_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].RedlineColorModal.OK+"\" onClick=\"cvjs_setRedlineColorViaButton();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr></table>";
	jQuery("#colorModal").html(cvjs_redlineColorModal_content);

	cvjs_backgroundColorModal_content = "<table><tr><td><div id=\"backgroundModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_backgroundColorHeader\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exit_backgroundColor(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.PickColor+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_backgroundPickerValue\" value=\"FFFFFF\" class=\"cvjs_inputBackgroundColorModal jscolor {width:101, padding:10, shadow:false, borderWidth:0, backgroundColor:\'transparent\', insetColor:\'#000\',closable:true, closeText:'Close Color Picker!', onFineChange:\'cvjs_setBackgroundColorHex(this,\""+floorplan_div+"\")\'}\"><canvas id=\"dummy\" width=\"40\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.SelectColor+"<canvas id=\"dummy\" width=\"20\" height=\"10\"></canvas><input id=\"radioColor1_background\" type=\"radio\" name=\"radioColor\" value=\"1\" checked=\"checked\"><img id=\"cvjs_radioColor1_img_background\" src=\""+cvjs_imagesLocation+"white_color.png\" border=\"1\"/><label id=\"cvjs_radio1\" for=\"radio1\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.White+"</label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input id=\"radioColor2_background\" type=\"radio\" name=\"radioColor\" value=\"2\"><img id=\"cvjs_radioColor2_img_background\" src=\""+cvjs_imagesLocation+"black_color.png\" border=\"1\"/><label id=\"cvjs_radio2\" for=\"radio2\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Black+"</label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input id=\"radioColor3_background\" type=\"radio\" name=\"radioColor\" value=\"3\"><img id=\"cvjs_radioColor3_img_background\" src=\""+cvjs_imagesLocation+"azure_color.png\" border=\"1\"/><label id=\"cvjs_radio3\" for=\"radio3\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Azure+"</label><canvas id=\"dummy\" width=\"24\" height=\"10\"></canvas><input id=\"radioColor4_background\" type=\"radio\" name=\"radioColor\" value=\"4\"><img id=\"cvjs_radioColor4_img_background\" src=\""+cvjs_imagesLocation+"pink_color.png\" border=\"1\"/><label id=\"cvjs_radio4\" for=\"radio4\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Pink+"</label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input id=\"radioColor5_background\" type=\"radio\" name=\"radioColor\" value=\"5\"><img id=\"cvjs_radioColor5_img_background\" src=\""+cvjs_imagesLocation+"snow_color.png\" border=\"1\"/><label id=\"cvjs_radio5\" for=\"radio5\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Snow+"</label><canvas id=\"dummy\" width=\"26\" height=\"10\"></canvas><input id=\"radioColor6_background\" type=\"radio\" name=\"radioColor\" value=\"6\"><img id=\"cvjs_radioColor6_img_background\" src=\""+cvjs_imagesLocation+"silver_color.png\" border=\"1\"/><label id=\"cvjs_radio6\" for=\"radio6\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Silver+"</label></td></tr><tr><td><canvas id=\"dummy\" width=\"303\" height=\"10\"></canvas><input id=\"radioColor7_background\" type=\"radio\" name=\"radioColor\" value=\"7\"><img id=\"cvjs_radioColor7_img_background\" src=\""+cvjs_imagesLocation+"gray_color.png\" border=\"1\"/><label id=\"cvjs_radio7\" for=\"radio7\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Gray+"</label><canvas id=\"dummy\" width=\"29\" height=\"10\"></canvas><input id=\"radioColor8_background\" type=\"radio\" name=\"radioColor\" value=\"8\"><img id=\"cvjs_radioColor8_img_background\" src=\""+cvjs_imagesLocation+"brown_color.png\" border=\"1\"/><label id=\"cvjs_radio8\" for=\"radio8\">"+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.Brown+"</label> </td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input id=\"cvjs_redlinecolor_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].BackgroundColorModal.OK+"\" onClick=\"cvjs_setBackgroundColorViaButton();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></td></tr></table>";
	jQuery("#backgroundModal").html(cvjs_backgroundColorModal_content);

	cvjs_redlinetextModal_content = "<table><tr><td><div id=\"redlinetextModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_redlineTextHeader\">"+lTable.languages[cvjs_currentLanguage].RedlineTextModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_hide_redline_text_modal(\'"+floorplan_div+"\')\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><textarea class=\"cvjs_stickynotes_edit_text_1\" id=\"redline_text\" cols=\"33\" rows=\"3\"></textarea><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas><input id=\"cvjs_redlinetext_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].RedlineTextModal.OK+"\" onClick=\"cvjs_initiateInsertRedlineText();\"></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas></td></tr><tr><td><div id=\"cvjs_calibrationModalText\">"+lTable.languages[cvjs_currentLanguage].RedlineTextModal.Text+"</div></td></tr></table>";
	jQuery("#redlinetextModal").html(cvjs_redlinetextModal_content);

	cvjs_lineThicknessModal_content = "<table><tr><td><div id=\"linethicknessModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_lineThicknessHeader\">"+lTable.languages[cvjs_currentLanguage].LineThicknessModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitLineThicknessModal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"50\" height=\"6\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><table><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><div id=\"lineThicknessText\">"+lTable.languages[cvjs_currentLanguage].LineThicknessModal.LineThickness+"</div></td><td><div id=\"lineThickness\"></td></tr></table></td></tr><tr><td><canvas id=\"dummy\" width=\"50\" height=\"5\"></canvas><div id=\"cvjs_slider2\"><canvas id=\"dummy\" width=\"50\" height=\"5\"></canvas></td></tr></table>";
	jQuery("#linethicknessModal").html(cvjs_lineThicknessModal_content);

	cvjs_calibrateModal_content = "<table><tr><td><div id=\"calibrateModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_calibrateModalHeader\">"+lTable.languages[cvjs_currentLanguage].CalibrateModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',1);\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].CalibrateModal.Unit+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><select id=\"cvjs_unitForScale\"><option value=\"1\">m</option><option value=\"2\">cm</option><option value=\"3\">mm</option><option value=\"4\">km</option><option value=\"5\">feet</option><option value=\"6\">inches</option><option value=\"7\">miles</option></select></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"5\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas>"+lTable.languages[cvjs_currentLanguage].CalibrateModal.Distance+"<canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><input value=\"1\" id=\"cvjs_calibrateReferenceDistance\" class=\"cvjs_inputCalibrateModal\"><canvas id=\"dummy\" width=\"116\" height=\"10\"></canvas><input id=\"cvjs_calibrate_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].CalibrateModal.OK+"\" onClick=\"cvjs_exitCalibrateModal(\'"+floorplan_div+"\',2);\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><div id=\"cvjs_calibrationModalText\">"+lTable.languages[cvjs_currentLanguage].CalibrateModal.Text+"</div></td></tr></table>";
	jQuery("#calibrateModal").html(cvjs_calibrateModal_content);

	cvjs_measurementModal_content = "<table><tr><td><div id=\"measurementModalHeader\"><b class=\"top_bar_gray_underbar\">_</b><a href=\"http://cadviewerjs.com\"><img src=\""+cvjs_imagesLocation+"logoJS.png\" border=\"2\" width=\"20\" height=\"20\" /></a><b class=\"top_bar_gray_underbar\">__</b><b id=\"cvjs_measurementModalHeader\">"+lTable.languages[cvjs_currentLanguage].MeasurementModal.Header+"</b><button type=\"button\" class=\"close\" data-dismiss=\"modal\" onClick=\"cvjs_exitMeasurementModal(\'"+floorplan_div+"\');\">&times;<b class=\"top_bar_gray_underbar\">_</b></button></div></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas><div id=\"cvjs_measurementLength\">"+lTable.languages[cvjs_currentLanguage].MeasurementModal.Distance+"</div><canvas id=\"dummy\" width=\"5\" height=\"5\"></canvas><input id=\"cvjs_measurement_button\" type=\"button\" name=\"bPrint\" value=\""+lTable.languages[cvjs_currentLanguage].MeasurementModal.MeasureAgain+"\" onClick=\"cvjs_repeatMeasurementModal();\"><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><canvas id=\"dummy\" width=\"10\" height=\"10\"></canvas></td></tr><tr><td><div id=\"cvjs_calibrationModalText\">"+lTable.languages[cvjs_currentLanguage].MeasurementModal.Text+"</div></td></tr></table>";
	jQuery("'#measurementModal_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]").html(cvjs_measurementModal_content);


	cvjs_initialize_allColorCheckboxes();

}





/**
 * Set the ajax control callback variable
 * @param {boolean} callbackStatus - set to false then monitor then true
 */

function cvjs_ajaxPostCallbackVariable_thumbNails(callbackStatus){

	cvjs_ajaxPostStatus_thumbNails = callbackStatus;

}



function cvjs_rPaperIndex(floorplan_div){

	for (var i=0; i< floorplan_div_Array.length; i++){
		if (floorplan_div_Array[i].indexOf(floorplan_div)>-1 && floorplan_div_Array[i].length == floorplan_div.length){
//		if (cvjs_debug) console.log("cvjs_rPaperIndex "+floorplan_div+" return index "+i);
			return i;
		}
	}

	floorplan_div = floorplan_div+"_svg";
	
	for (var i=0; i< floorplan_div_Array.length; i++){
		if (floorplan_div_Array[i].indexOf(floorplan_div)>-1 && floorplan_div_Array[i].length == floorplan_div.length){
//		if (cvjs_debug) console.log("cvjs_rPaperIndex (with _svg) "+floorplan_div+" return index "+i);
			return i;
		}
	}
	
	
//	if (cvjs_debug) console.log("cvjs_rPaperIndex "+floorplan_div+"not defined returning -1  length="+ floorplan_div_Array.length);
		
	return -1;  // as default
}






	var string_X = "";


	var totalDragStart = 0;
	var firstFingerX = 0;
	var firstFingerY = 0;
	var secondFingerX = 0;
	var secondFingerY = 0;

	var firstFingerX1 = 0;
	var firstFingerY1 = 0;


	var firstFingerXinit = 0;
	var firstFingerYinit = 0;

	var ttest = 0;
	var flagOK = true;
	
	var preventDrag = true;

	var base_x=0;
	var base_y=0;

	   function dragStart(x, y, event)
	   {

		
if (cvjs_debug)		console.log("dragstart "+cvjs_floorplan_div+" "+cvjs_rPaperIndex(cvjs_floorplan_div));
		
			// dragstart is called before mousedown!!!
			
			try{
			cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(cvjs_floorplan_div);
			
			currentMasterDiv = this.data("id");
			currentMasterDiv = currentMasterDiv.substring(7);  //  master_floorPlan1_svg, etc....		

			}
			catch (err){console.log(" err "+err);}
		   
	   
//string_X = "vqjs dragStart x="+x+" y="+y;
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);


//lastObj[cvjs_active_floorplan_div_nr] = null;

		pdx = 0;
		pdy = 0;
		lastDx = 0;
		lastDy = 0;

//console.log("before error "+cvjs_active_floorplan_div_nr);		
		
		vbx = viewBox[cvjs_active_floorplan_div_nr].X;
		vby = viewBox[cvjs_active_floorplan_div_nr].Y;

		hideOnlyPop();

		base_x = 0;
		base_y = 0;


string_X = "vqjs dragStart x="+x+" y="+y+" vbx "+vbx+" vby "+vby+" cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr+"  "+this.data("id");
if (cvjs_debug) console.log(string_X);
//jQuery('#temperature').css('color', '#FF00FF');
//jQuery("#temperature").html(string_X);

		if (!thumb_loaded){
			base_x = x;
			base_y = y;
		}



//string_X = "vqjs dragstart "+base_x+" "+base_y+" x="+x+" y="+y+"  cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr  ;
//jQuery('#movements2').css('color', '#FF00FF');
//jQuery("#movements2").html(string_X);



		if (!thumb_loaded){
			thumb_loaded = true;
			try{

//console.log("before drawThumb dragstart");

//				drawThumb(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				//console.log(err);
			}
		}




		var flagCounter = 0;


		try{

			flagCounter = 1;
			firstFingerX = event.touches[0].pageX;

			flagCounter = 2;
			firstFingerY = event.touches[0].pageY;

			totalDragStart = 1;

			flagCounter = 3;
			secondFingerX = event.touches[1].pageX;
			flagCounter = 4;
			secondFingerY = event.touches[1].pageY;
			totalDragStart = 2;
			flagCounter = 5;

		}
		catch(err){

			//console.log("vqjs_sn_51 : flag="+flagCounter+" : "+err);

			//console.log(err);

			var dummy3 = 1;

		}


		try{

			event.preventDefault();
			event.stopPropagation();

			if (totalDragStart == 2 ){

				event.preventDefault();
				event.stopPropagation();

	//string_X = "startDrag propagation stop "+totalDragStart;
	//jQuery('#occupancy').css('color', '#F0F0FF');
	//jQuery("#occupancy").html(string_X);

			}

//  find the case where the thumb layers should be used
//			layer_thumb.attr(show);
//			layers_all.attr(hide);


/*

console.log("here! "+panWithThumb+"  "+(base_x-x)+" "+(base_y-y));

			if (panWithThumb && ((base_x-x) != 0) && ((base_y-y) != 0)){

				layers_all.attr(hide);
				layer_thumb.attr(show);
				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);
			}
*/



		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t7 "+err);
		}

	   };




	   function dragEnd(e)
	   {

	

		var testVar = "drag end ";
		//alert(testVar);
		//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
		//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(250,000,150)", stroke:"rgb(250,000,150)", "fill-opacity":"1"});



	
//window.alert("DragEnd");				
	   
			//*******   2018-05-14, if dragging 
			if (cvjs_SVGHyperLinkCSSAll_Drag){
					cvjs_SVGHyperLinkCSSAll_Drag = false;				
					//window.alert("DragEND Undrag");
					cvjs_SVGGroup[cvjs_active_floorplan_div_nr].undrag();
					console.log("no mouseup undrag dragend");
			}

	   
	   
	   
	   
	   
	   
	   
	   
	   
		preventDrag = true;


//string_X = "dragEnd "+totalDragStart+" vbx="+vbx+" vby="+vby+" XX";
//jQuery('#occupancy').css('color', '#FF0DDF');
//jQuery("#occupancy").html(string_X);


		if (totalDragStart == 2){

			e.preventDefault();
			e.stopPropagation();

		}


			try{

				if (totalDragStart == 2){


					viewBox[cvjs_active_floorplan_div_nr].X = viewBox_initX[cvjs_active_floorplan_div_nr];
					viewBox[cvjs_active_floorplan_div_nr].Y = viewBox_initY[cvjs_active_floorplan_div_nr];
					vBHo = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
					vBWo = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
					viewBoxWidth[cvjs_active_floorplan_div_nr] = viewBoxWidth_init[cvjs_active_floorplan_div_nr];
					viewBoxHeight[cvjs_active_floorplan_div_nr] = viewBoxHeight_init[cvjs_active_floorplan_div_nr];
					viewBoxWidth[cvjs_active_floorplan_div_nr] /= deltaDynamic/deltaBase;
					viewBoxHeight[cvjs_active_floorplan_div_nr]/= deltaDynamic/deltaBase;

					viewBox[cvjs_active_floorplan_div_nr].X -= (viewBoxWidth[cvjs_active_floorplan_div_nr] - vBWo) / 2;
					viewBox[cvjs_active_floorplan_div_nr].Y -= (viewBoxHeight[cvjs_active_floorplan_div_nr] - vBHo) / 2;


					//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init);
					//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init);

					//viewBox[cvjs_active_floorplan_div_nr].X -= (firstFingerX-firstFingerX_init)*(deltaDynamic/deltaBase);
					//viewBox[cvjs_active_floorplan_div_nr].Y -= (firstFingerY-firstFingerY_init)*(deltaDynamic/deltaBase);

//console.log("viewBoxWidth[cvjs_active_floorplan_div_nr] "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" cvjs_rPaper[cvjs_active_floorplan_div_nr]Width "+cvjs_rPaper[cvjs_active_floorplan_div_nr].width);

					zoomScale = viewBoxWidth[cvjs_active_floorplan_div_nr]/cvjs_rPaper[cvjs_active_floorplan_div_nr].width;

					//setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);
//NNN					cvjs_rPaper[cvjs_active_floorplan_div_nr].setViewBox(viewBox[cvjs_active_floorplan_div_nr].X, viewBox[cvjs_active_floorplan_div_nr].Y, viewBoxWidth[cvjs_active_floorplan_div_nr], viewBoxHeight[cvjs_active_floorplan_div_nr]);


// 2015-05-05					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+wid+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

					var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

//console.log("x8 attr_2="+attr_2);

					var json_obj = jQuery.parseJSON(attr_2);
					cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

//var string_X = " viewBox[cvjs_active_floorplan_div_nr].X="+viewBox[cvjs_active_floorplan_div_nr].X+" viewBox[cvjs_active_floorplan_div_nr].Y="+viewBox[cvjs_active_floorplan_div_nr].Y+"secondFingerX="+secondFingerX+" secondFingerY="+secondFingerY+" deltaDynamic="+deltaDynamic+" cvjs_rPaper[cvjs_active_floorplan_div_nr].width="+cvjs_rPaper[cvjs_active_floorplan_div_nr].width+" viewBoxWidth[cvjs_active_floorplan_div_nr]="+viewBoxWidth[cvjs_active_floorplan_div_nr]+" vBWo="+vBWo+" firstFingerX-firstFingerX1="+(firstFingerX-firstFingerX1);
//jQuery('#temperature').css('color', '#F000FF');
//jQuery("#temperature").html(string_X);

				}

			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				//console.log(err);
			}




			try{


//  find the case where the thumb layers should be used
//				layer_thumb.attr(hide);
//				layers_all.attr(show);


				if (panWithThumb){
//					layers_all.show();
//					layer_thumb.hide();
					layers_all.attr(show);
					layer_thumb.attr(hide);

					// for SVG drawings from AX, 2017-09-04
					all_layer_on_thumb_off();

				}

				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(show);

				thumb_loaded = false;
				
			}
			catch(err){
				//  allow the code to work with both version 1.1 and 1.2
				console.log("t8 "+err);
			}

	   }



	   function dragMove(dx, dy, x, y, e)
	   {


//string_X = "vqjs dragMove "+totalDragStart+" "+dx+" "+dy+" vbx="+vbx+" vby="+vby+" zoomSc="+zoomScale;
//jQuery('#movements2').css('color', '#FF00FF');
//jQuery("#movements2").html(string_X);

		var testVar = "dragmove "+x+" "+y;
		//alert(testVar);
		//cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(400, 275, 300, 100  ).attr({fill:"rgb(255,255,255)", stroke:"rgb(0,0,0)", "fill-opacity":"1"});
		//cvjs_rPaper[cvjs_active_floorplan_div_nr].text(actualLLX[cvjs_active_floorplan_div_nr]+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])*0.2,actualLLY[cvjs_active_floorplan_div_nr]+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr])*0.2, testVar ).attr({fill:"rgb(250,000,250)", stroke:"rgb(250,000,250)", "fill-opacity":"1"});




		try{

//console.log("here! "+panWithThumb+"  "+(base_x-x)+" "+(base_y-y));

			if (panWithThumb && (((base_x-x) != 0) || ((base_y-y) != 0))){

			
			
				layers_all.attr(hide);
				layer_thumb.attr(show);
				
				
console.log("hide vqrooms   cvjs_active_floorplan_div_nr "+cvjs_active_floorplan_div_nr);
				
				layer_vqrooms[cvjs_active_floorplan_div_nr].attr(hide);

				// this is for SVG files created with TMS   2017-09-04
				all_layer_off_thumb_on();

			}


		}
		catch(err){
			//  allow the code to work with both version 1.1 and 1.2
			console.log("t7 "+err);
		}


	 	if (totalDragStart == 2) return;
		// Snap  - moved from move()
		if (totalDragStart<2){
			if ((Math.abs(lastDx-dx)>4) || (Math.abs(lastDy-dy)>4))
				{

					if (!dragMoveControl){

					}
					else{
						//dragMoveControl = false;


						tip[cvjs_active_floorplan_div_nr].hide();
						lastDx = dx;
						lastDy = dy;

		//console.log("dx="+dx+" dy="+dy+" zoomScale="+zoomScale);

						pdx = dx*zoomScale;                       // change * to / ?
						pdy = dy*zoomScale;


		// 	pdx    dx/window-width * viewBoxWidth[cvjs_active_floorplan_div_nr]
		// 	pdx    dy/window-height * viewBoxHeight[cvjs_active_floorplan_div_nr]

						var xscale = viewBoxWidth[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
						var yscale = viewBoxHeight[cvjs_active_floorplan_div_nr]/jQuery('#'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();
						var scale = 1;
						if (xscale>yscale) {
							scale = xscale
						}
						else{
							scale = yscale;
						}
						pdx = dx*scale;
						pdy = dy*scale;

						viewBox[cvjs_active_floorplan_div_nr].X = vbx - pdx;
						viewBox[cvjs_active_floorplan_div_nr].Y = vby - pdy;

//		string_X = "dragMove width "+jQuery("#floorPlan").width()+" height "+jQuery("#floorPlan").height()+"viewbox: "+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr];
//		jQuery('#movements3').css('color', '#0000FF');
//		jQuery("#movements3").html(string_X);

						var attr_2 = "{\"viewBox\" : \""+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]+"\" }";

		//console.log("x10 attr_2="+attr_2);
						var json_obj = jQuery.parseJSON(attr_2);

						//console.log("json_obj="+json_obj);
						cvjs_rPaper[cvjs_active_floorplan_div_nr].attr(json_obj);

						// NNN setView(cvjs_rPaper[cvjs_active_floorplan_div_nr], vbx - pdx, vby - pdy,viewBoxWidth[cvjs_active_floorplan_div_nr],viewBoxHeight[cvjs_active_floorplan_div_nr]);


						//dragMoveControl = true;
					}



				}
		     }
	   }


var cvjs_serverSendPDFEmailController = "mail-pdf-redline.php"; 
//var cvjs_serverSendDWGEmailController = "mail-dwg-redline.php"; 
var cvjs_mailServerSetup = false;	   
	   
var cvjs_from_name = "";
var cvjs_from_mail = "";
var cvjs_cc_mail = "";
var cvjs_replyto = "";
var cvjs_to_mail = "";
var cvjs_mail_title = "";
var cvjs_mail_message = "";
 	


	
/**
 * Settings for email sender in the PDF publish method. When calling this method, email will be activated
 * @param {string} from_name - name of the from sender in redline PDF email
 * @param {string} from_mail - email address of the from sender in redline PDF email
 * @param {string} cc_mail - email of the cc address when sending redline PDF email
 * @param {string} replyto - mail of the reply to sender in redline PDF email
 */
	
function cvjs_emailSettings_PDF_publish(from_name, from_mail, cc_mail, replyto){
	
	cvjs_mailServerSetup = true;	   
	   
	cvjs_from_name = from_name;
	cvjs_from_mail = from_mail;
	cvjs_cc_mail = cc_mail;
	cvjs_replyto = replyto;
	

}




/**
 * Saves a floorplan with overlays as SVG file, then embed it into a pdf and send it as email
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
	
function cvjs_emailScreenAsPDFwithRedlines(floorplan_div){



	// make temp file name
		
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		
	
	var cvjs_phpSaveSVGUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;
	var js_data = {};
	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.pdf';

	
	var htmlName = cvjs_FileNameNoExtension+'_'+datetime+'.html';	
	
	
//	var fileName = "tempXXXX.pdf";
	var myfolderFile = cvjs_ServerLocation+fileName; 
//	var myfolderFile = cvjs_ServerLocation+"/"+ fileName; 

//	window.alert(myfolderFile);
	
	var counter = myfolderFile.lastIndexOf(".");
	var svgFile = myfolderFile.substring(0,counter)+".svg";
	
	js_data['file'] = svgFile;
	js_data['file_content'] = myFloorPlan;

	if (cvjs_debug) console.log("make pdf "+svgFile+"  "+cvjs_phpSaveSVGUrlLocation);	
	
	jQuery.ajax({
	  url:cvjs_phpSaveSVGUrlLocation,
	  type: 'post',
	  data: js_data,
	  success: function(html){
		var status ="Save floorplan: "+html;
		
		if (cvjs_debug) console.log(status);
		
		var finalUrl = cvjs_serverHandlersPath + cvjs_serverSVGtoPDFConverterController;
		var filelist_data = {};

		filelist_data['pdf_file'] = myfolderFile;
		filelist_data['svg_file'] = svgFile;

		
		// we hardcode conversion  - test only
		//filelist_data['pdf_file'] = "c:/xampp/htdocs/cadviewer_3_0_1/m4.pdf";
		//filelist_data['svg_file'] = "c:/xampp/htdocs/cadviewer_3_0_1/m4.svg";
	
		
		jQuery.ajax({
		  url:finalUrl,
		  type: 'post',
		  data: filelist_data,
		  success: function(html){
				if (cvjs_debug) console.log("PDF file is now created: "+html);
				
//				if (true) return;
				
				var filelist_data = {};

				filelist_data['pdf_file'] = myfolderFile;

				filelist_data['from_name'] = cvjs_from_name;
				filelist_data['from_mail'] = cvjs_from_mail;
				filelist_data['cc_mail'] = cvjs_cc_mail;
				filelist_data['replyto'] = cvjs_replyto;
				
				
				// replace , with ;
				cvjs_to_mail = cvjs_to_mail.replace(/,/g, ';');
				
				filelist_data['to_mail'] = cvjs_to_mail;
				filelist_data['mail_title'] = cvjs_mail_title;
				filelist_data['mail_message'] = cvjs_mail_message;
				
				var cvjs_phpSendPDFEmail = cvjs_serverHandlersPath + cvjs_serverSendPDFEmailController;
		

//window.alert(filelist_data['pdf_file']);
//if (true) return;
		
				jQuery.ajax({
				  url:cvjs_phpSendPDFEmail,
				  type: 'post',
				  data: filelist_data,
				  success: function(html){

						window.alert("e-mail sent!  "+html);

						}
					});
			
				
		  }
		});

		
		//window.alert(status);
	  },
	  error:function(data_e){console.log("Error "+data_e); return;}
	});
}



/**
 * Brings the dragging background to front - used for drawings with static filled polygons
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
function cvjs_dragBackgroundToFront_SVG(floorplan_div){
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div)		
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].before(cvjs_SVGGroup[cvjs_active_floorplan_div_nr]);
}

/**
 * Sends the dragging background to back  - default 
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
function cvjs_dragBackgroundToBack_SVG(floorplan_div){
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div)
	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].before(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
}


/**
 * Save current object as SVG, including redlines and space objects 
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */

function cvjs_saveAsSVG(floorplan_div){


try{
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	// make temp file name

//window.alert("cvjs_saveAsSVG");

	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		

	
	//3.01.03a   - we have to strip out any assets and swap for /cadviewer nodejs folder, 
	if (cvjs_NodeJSserver)  {	
			myFloorPlan = myFloorPlan.replace(/xlink:href=["]assets[/]cadviewer/g, 'xlink:href=\"'+ServerUrl+"files?file=");	
	}
	
	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.svg';

	
}
catch(err){
	console.log(err);
}	
	
	download(fileName, myFloorPlan);

}	
	
	
function download(filename, text) {
    var pom = this.document.createElement('a');
	pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
 
//    pom.setAttribute('href', ServerUrl+"content_dev/thingable/D613R4wB9kx9m4K/_XREF/P1_LG1.dwg");
//window.alert( "pom="+pom)	
 
	pom.setAttribute('download', filename);
	
    if (this.document.createEvent) {
//window.alert( "1");	
        var event = this.document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }
}	



function downloadFile(filename, file) {
    var pom = this.document.createElement('a');
	pom.setAttribute('href', file);  
	pom.setAttribute('download', filename);
	
    if (this.document.createEvent) {
        var event = this.document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }
}	


	
function download_link(filename, binaryFile) {


// NEED TO MAKE A DIRECT DOWNLOAD, NOT VIA WINDOW!!!!



//    var pom = this.document.createElement('a');
	
//	console.log("loaded from server length "+binaryFile.length+" "+binaryFile);
	
//	var encode = btoa(unescape(encodeURIComponent(binaryFile)));
	
//	console.log("encoded length "+encode.length+" "+encode);
	
//      pom.setAttribute('href', 'data:application/zip;base64,' + encode);
//    pom.setAttribute('href', 'data:application/zip;base64,' + window.btoa(text));
//    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
//    pom.setAttribute('href', cvjs_ServerLocation+"/converters/files/merged/"+filename);


//    pom.setAttribute('download', filename);
	
	//window.alert("before open window");
	
				printWindow = window.open('', 'CADViewer JS - Download', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer JS - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer JS - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=

				var xfilelocation = cvjs_ServerLocation+"/converters/files/merged/"+filename;
				var filelocation = cvjs_ServerUrl+"/converters/files/merged/"+filename;
				
				
//				printWindow.document.write("jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>");
//				text = text + "jQuery(window).on('beforeunload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}});  }); jQuery(window).on('unload', function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}})  }); window.onbeforeunload = function (){ jQuery.ajax({url:'"+cvjs_serverHandlersPath+"/"+cvjs_serverDeleteFileController+"?file="+xfilelocation+"', cache: false, success: function(html){}}) }; </script>";

			
				printWindow.document.write('</script></head><body><div id="dwg">');
				text = text + '</script></head><body><div id="dwg">';

//				printWindow.document.write('<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="1654" height="2339" type="application/pdf" data="'+filelocation+'" id="pdf_content"><p>Please install a PDF viewer, the CADViewer JS batch file PDF cannot be displayed.</p></object></div></body></html>';

				printWindow.document.write('<a href="'+filelocation+'">Download '+filename+'</a></div></body></html>');

				
				text = text + '<a href="'+filelocation+'">Download '+filename+'</a></div></body></html>';
				

//a href="http://onlinedemo.cadviewerjs.com/cadviewer_3_0_1/html/CVJS_visual_query_301.html">Dynamic interactive content from MySQL</a>

//				printWindow.document.write('<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/dwg" data="'+filelocation+'" id="pdf_content"><p>Please install a DWG viewer, the CADViewer JS DWG cannot be displayed.</p></object></div></body></html>');
//				text = text + '<object width="'+screen.width*cvjs_print_to_pdf_windowRelativeSize+'" height="'+screen.width*cvjs_print_to_pdf_windowRelativeSize*2339/1654+'" type="application/dwg" data="'+filelocation+'" id="pdf_content"><p>Please install a DWG viewer, the CADViewer JS DWG cannot be displayed.</p></object></div></body></html>';

//console.log(text);

				
				console.log(text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();

	
	//window.alert("after open window");
	
	
	
	
/*	
	

//window.alert( "pom="+pom)	
	
	
    if (this.document.createEvent) {
//window.alert( "1");	
        var event = this.document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }

*/	
	
	
}	

// 3.2.01g

function cvjs_download_link(filename, filelocation) {


console.log(" in download "+filename+"  "+filelocation);	
//				printWindow = window.open('', 'CADViewer JS - Download', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height='+ screen.height*cvjs_print_to_pdf_windowRelativeSize);
				printWindow = window.open('', 'CADViewer JS - Download', 'width='+screen.width*cvjs_print_to_pdf_windowRelativeSize+',height=40px');
				var text = "";

				printWindow.document.write('<!DOCTYPE html><html><title>CADViewer JS - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>');
				text = text + '<!DOCTYPE html><html><title>CADViewer JS - Download</title><head><script src="'+cvjs_defaultJSPath+'/jquery-2.2.3.js" type="text/javascript"></script>';

				printWindow.document.write('<script type="text/javascript">');
				text = text + '<script type="text/javascript">';
				// file=
	
				printWindow.document.write('</script></head><body><div id="dwg">');
				text = text + '</script></head><body><div id="dwg">';
//				printWindow.document.write('<button class="btn" style="width:100%"><a href="'+filelocation+'" download="'+filename+'">Download '+filename+'</a></button>');
				
				printWindow.document.write('<br><div style="width:100%;background:#B9EAFF;color:#000000;border:1px black"><a style="width:100%;color:#000000;left:50px;border:1px black" href="'+filelocation+'" download="'+filename+'">Download '+filename+'</a></div>');

//				printWindow.document.write('<button class="btn" style="width:100%"><i class="fa fa-download"></i> Download '+filename+'</button>');
			
//				printWindow.document.write('<form method="get" action="'+filelocation+'"><button type="submit">Download: '+filename+'</button></form>');
			
			
			
			
				text = text + '<a href="'+filelocation+'" download="'+filename+'">Download '+filename+'</a></div></body></html>';
					
//				printWindow.document.write('<a href="/path/to/file/test_modified.xlsx"><button type="button"></button></a>');


				printWindow.document.write('</div></body></html>');

					
				console.log("before focus incomplete text: "+text);

				printWindow.document.close(); //this seems to be the thing doing the trick
				printWindow.focus();

		
	
}	




	
	
	
	
	
	
	
	
/**
 * Save current object as SVG, including redlines and space objects 
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {string} FileLocation - name of file to save
 */

function cvjs_saveAsSVGOnServer(floorplan_div, FileLocation){

// 3.2.02b

try{
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	// make temp file name

//window.alert("cvjs_saveAsSVG");

	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();
		
	var header = '<?xml version="1.0" encoding="utf-8" ?>';
	header +=  ' <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'; 
	header +=  '<svg contentScriptType="text/ecmascript" xmlns:xlink="http://www.w3.org/1999/xlink" zoomAndPan="magnify" contentStyleType="text/css" preserveAspectRatio="xMidYMid meet"' ;
	header += ' width="'+bbox.width+'" height="'+bbox.height+'" viewbox="'+bbox.x+' '+bbox.y+' '+bbox.width+' '+bbox.height+'"';
	header += ' version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:cvjs="http://www.tailormade.com/" stroke-linecap="butt" stroke-linejoin="round" fill-rule="evenodd" >';
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	var myFloorPlan = header + cvjs_rPaper[cvjs_active_floorplan_div_nr] + "</svg>";		

	
	// we use the folder one step above app folder as temp folder
	
	
	var currentdate = new Date();
	var datetime = "y"+currentdate.getFullYear() +"_m"+(currentdate.getMonth()+1)+"_d"+(currentdate.getDate())+"_h"+currentdate.getHours()+"_m"+currentdate.getMinutes()+"_s"+currentdate.getSeconds();

	var month = "jan";
	var hours = currentdate.getHours(); 
	
	if (hours<10) hours = "0"+hours;
	switch(currentdate.getMonth()) {
		case 0:
			month = "Jan";
			break;
		case 1:
			month = "Feb";
			break;
		case 2:
			month = "Mar";
			break;
		case 3:
			month = "Apr";
			break;
		case 4:
			month = "May";
			break;
		case 5:
			month = "Jun";
			break;
		case 6:
			month = "Jul";
			break;
		case 7:
			month = "Aug";
			break;
		case 8:
			month = "Sep";
			break;
		case 9:
			month = "Oct";
			break;
		case 10:
			month = "Nov";
			break;
		case 11:
			month = "Dec";
			break;
		default:
			month = "Jan";
	}
	
	var datetime = month+"_"+(currentdate.getDate())+"_H"+hours+"_"+currentdate.getMinutes();
	//var random = Math.random().toString().substring(2,5);
	var fileName = cvjs_FileNameNoExtension+'_'+datetime+'.svg';

	
}
catch(err){
	console.log(err);
}	
		
		var cvjs_phpSaveRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileControllerRedlines;

		var js_data = {};
		js_data['file'] = FileLocation+fileName;
		js_data['file_content'] = myFloorPlan;


		jQuery.ajax({
		  url:cvjs_phpSaveRedlineUrlLocation,
		  type: 'post',
		  data: js_data,
		  success: function(html){
			
			console.log("saved "+html);
			
			var fileUrl = FileLocation.substring(FileLocation.indexOf(ServerLocation)+ServerLocation.length);
			
			
			downloadFile(fileName, ServerUrl+fileUrl+fileName);
			
		  },
		  error:function(data_e){console.log("Error "+data_e); return;}

		});

	download(fileName, myFloorPlan);

}	
	
	
	
	
	
	
/*
 * Returns the current redlines and sticky notes as a string object in XMLso the user can do their own server side save
 * bypassing php or servlet code
 * @param {boolean} stickynote_flag - save stickynotes as xml, default true 
 * @return {string} RedlineNote - a string containg the redline, sticky note object
 */

function cvjs_getStickyNotesRedlineXML(stickynote_flag){  //4.1.02a

		var dataUrl="";

		var comma_flag =0;

		dataUrl = dataUrl +"<cvjs_RedlinesStickyNotes>\n";

		var handle = 0;
		
		
		var spc_counter = 0;
		for (spc in vqRedlines)
		{
			if (vqRedlines[spc].data("deleted") == true ){
				// the note is deleted, so no nothing
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
			}
		}
		dataUrl = dataUrl +" 					<totalRedlines>"+spc_counter+"</totalRedlines>\n";
		
		spc_counter = 0;
		for (spc in vqStickyNotes)
		{
			if (vqStickyNotes[spc].data("deleted") == true ){
				// the note is deleted, so no nothing
				//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
			}
			else{  // node exists

				spc_counter++;
			}
		}
		dataUrl = dataUrl +" 					<totalStickyNotes>"+spc_counter+"</totalStickyNotes>\n";
		
		
		
		
		
		
		for (spc in vqRedlines)
		{
			if (vqRedlines[spc].data("deleted") == true ){
				if (cvjs_debug) console.log("file.js deleted node "+vqRedlines[spc].data("node"));
			}
			else{  // node exists

				if (comma_flag == 0){
					comma_flag = 1
				}
				else{
//					dataUrl = dataUrl +"						,\n";
				}

				dataUrl = dataUrl +"					<Redline>\n";
				dataUrl = dataUrl +"						<index>"+spc+"</index>\n";
//				dataUrl = dataUrl +"					"+vqRedlines[spc].data("node")+": {\n";
				dataUrl = dataUrl +"						<node>\""+vqRedlines[spc].data("node")+"\"</node>\n";
				dataUrl = dataUrl +"						<name>\""+vqRedlines[spc].data("name")+"\"</name>\n";
				dataUrl = dataUrl +"						<id>\""+vqRedlines[spc].data("id")+"\"</id>\n";
				dataUrl = dataUrl +"						<layer>\""+vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[vqRedlines[spc].data("currentPage")-1].pageName+"\"</layer>\n";
				dataUrl = dataUrl +"						<group>\""+vqRedlines[spc].data("group")+"\"</group>\n";
				dataUrl = dataUrl +"						<color>\""+vqRedlines[spc].data("color")+"\"</color>\n";
				dataUrl = dataUrl +"						<strokeWidth>\""+vqRedlines[spc].data("strokeWidth")+"\"</strokeWidth>\n";
				dataUrl = dataUrl +"						<fill>\""+vqRedlines[spc].data("fill")+"\"</fill>\n";
				dataUrl = dataUrl +"						<fillOpacity>\""+vqRedlines[spc].data("fill_opacity")+"\"</fillOpacity>\n";
				dataUrl = dataUrl +"						<username>\""+vqRedlines[spc].data("username")+"\"</username>\n";
				dataUrl = dataUrl +"						<userid>\""+vqRedlines[spc].data("userid")+"\"</userid>\n";
				dataUrl = dataUrl +"						<currentPage>"+vqRedlines[spc].data("currentPage")+"</currentPage>\n";
				dataUrl = dataUrl +"						<currentPageName>\""+multiPages[cvjs_active_floorplan_div_nr].pages[vqRedlines[spc].data("currentPage")-1].pageName+"\"</currentPageName>\n";
				dataUrl = dataUrl +"						<triangle_design>\""+vqRedlines[spc].data("triangle_design")+"\"</triangle_design>\n";
				dataUrl = dataUrl +"						<polypath_arrow>\""+vqRedlines[spc].data("polypath_arrow")+"\"</polypath_arrow>\n";
				
				var rText = vqRedlines[spc].data("redline_text");
				var resText = rText.replace("<br>", "<br/>");
				//window.alert(resText);			
				dataUrl = dataUrl +"						<redline_text>\""+resText+"\"</redline_text>\n";
//				dataUrl = dataUrl +"						<redline_text>\""+vqRedlines[spc].data("redline_text")+"\"</redline_text>\n";
				dataUrl = dataUrl +"						<fill_opacity>\""+vqRedlines[spc].data("fill_opacity")+"\"</fill_opacity>\n";
				dataUrl = dataUrl +"						<transform>\""+vqRedlines[spc].data("transform")+"\"</transform>\n";
				dataUrl = dataUrl +"						<drawingRotation>"+vqRedlines[spc].data("drawingRotation")+"</drawingRotation>\n";



				dataUrl = dataUrl +"						<graphics>\n";

				var str_object = vqRedlines[spc].toString();

				if (str_object.indexOf("polyline")>-1){

					// THIS IS AN ARROW
				
//					console.log("this is an arrow!  "+str_object);

					str_object = str_object.substring(str_object.indexOf("points=")+8);
					str_object = str_object.substring(0, str_object.indexOf('\"'));

/****					
					dataUrl = dataUrl +"var "+itemRed+"= paper.g(paper.polyline(\"";
					dataUrl = dataUrl +str_object+" \")";
****/
					var points = str_object.split(" ");					
					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("matrix(")+8);
					str_object = str_object.substring(0, str_object.indexOf(')'));
					
										
					var transform = vqRedlines[spc].data("transform"); 
					transform = transform.substring(1, transform.indexOf("r"));
					var insert = transform.split(",");					
//					var rot = transformscale.substring(transformscale.indexOf("r")+1);
					var rot = str_object.substring(str_object.indexOf("r")+1);
										
					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					// 5 handle number  sequential					
					// 40 thickness start
					// 41 thickness end     (per vertex)
					// 70 closed poly
					handle++;
					var hexString = "A"+handle.toString(16);
					currentHandle = hexString;
					


					dataUrl = dataUrl + "						<LWPOLYLINE>\n";
//					dataUrl = dataUrl + "0\nLWPOLYLINE\n";
//					dataUrl = dataUrl + "5\n"+hexString+"\n";
//					dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";		

					dataUrl = dataUrl + "							<isHatched>false</isHatched>\n";
					dataUrl = dataUrl + "							<isFilled>true</isFilled>\n";
					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";
									

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
//					dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";					
					// ARROW, WE HAVE TO CLOSE POLYGON   70=1
//					dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+(points.length+1)+"        \n 70\n     1\n 43\n0.0\n";
	

					dataUrl = dataUrl + "							<dxf_90>"+(points.length+1)+"</dxf_90>\n							<dxf_70>"+1+"</dxf_70>\n";
	
	
					var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));
					
					dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 
					
					for (var i=0; i< points.length; i++){
					     var data = points[i].split(",");
//						 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 
//						 dataUrl = dataUrl +  "							<pt_"+i+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt_"+i+">\n";								 
						 dataUrl = dataUrl +  "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt>\n";								 
					}
					
					// we have to make point back to start
					 var data = points[0].split(",");
//						 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 
//						 dataUrl = dataUrl + "							<pt_"+points.length+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+"							</pt_"+points.length+">\n";								 
						 dataUrl = dataUrl + "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data[0]), vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data[1]), vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+"							</pt>\n";								 
					
					// ARROW, MAKE FILLED HATCH

					dataUrl = dataUrl + "						</LWPOLYLINE>\n";
					
					handle++;
					var hexString = "A"+handle.toString(16);

// we are not doing Hatch					
					
					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
//					dataUrl = dataUrl + "0\nHATCH\n  5\n"+hexString+"\n330\n1F\n100\nAcDbEntity\n  8\n"+cvjs_currentRedlineLayerName+"\n 62\n     "+color+"\n370\n    70\n100\nAcDbHatch\n 10\n0.0\n 20\n0.0\n 30\n0.0\n210\n0.0\n220\n0.0\n230\n1.0\n  2\nANSI31\n";
					// FILLED  70=1
//					dataUrl = dataUrl + "  70\n     1\n 71\n     1\n 91\n        1\n 92\n        1\n 93\n       "+points.length+"\n";
 
 					for (var i=0; i< points.length-1; i++){
					     var data1 = points[i].split(",");
					     var data2 = points[i+1].split(",");
//						 dataUrl = dataUrl + "72\n 1\n"					 
//						 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data1[0]))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data1[1]))+"\n";								 
//						 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data2[0]))+"\n21\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data2[1]))+"\n";								 
					}
					
					// we have to make point back to start
					 var data1 = points[points.length-1].split(",");
					 var data2 = points[0].split(",");
//					 dataUrl = dataUrl + "72\n 1\n"					 
//					 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data1[0]))+"\n20\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data1[1]))+"\n";								 
//					 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(Number(insert[0])+Number(data2[0]))+"\n21\n"+cvjs_get_dwg_y_coord(Number(insert[1])+Number(data2[1]))+"\n";								 

//					 dataUrl = dataUrl + " 97\n        1\n330\n"+currentHandle+"\n 75\n     0\n 76\n     1\n 52\n0.0\n41\n1.0\n 77\n     0\n 78\n     1\n 53\n45.0\n 43\n0.0\n 44\n0.0\n 45\n-2.245064030267288\n 46\n2.245064030267288\n 79\n     0\n 98\n        1\n 10\n0.0\n 20\n0.0\n1001\nACAD\n1010\n0.0\n1020\n0.0\n1030\n0.0\n";
					
					 currentHandle = hexString;
					
					// Hatch
					// associative

						
									
/***
					dataUrl = dataUrl +".attr({transform: \""+vqRedlines[spc].data("transform")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\"})";
***/
					str_object = vqRedlines[spc].toString();
					str_object = str_object.substring(str_object.indexOf("d=")+3);
					str_object = str_object.substring(0, str_object.indexOf('\"'));
							
/***					
					
					//console.log(str_object);
					dataUrl = dataUrl +", paper.path(\"";
					dataUrl = dataUrl +str_object+" \")";
					dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"}))";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
****/
					//console.log(dataUrl);
										
						var checkClosed = str_object.indexOf("Z");
						
						var isClosed = false;
						if (checkClosed >-1){
							isClosed = true;
						}					
						if (!isClosed) str_object = str_object + "Z";
						var outline = new PathConverter.Outline();
						const parser = new PathConverter.SVGParser(outline);
						parser.parse(str_object);

						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						// 40 thickness start
						// 41 thickness end     (per vertex)
						// 70 closed poly
						handle++;
						var hexString = "A"+handle.toString(16);
						var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));
						
						
						var lPoints=0;

outline.getShapes().forEach(shape => {shape.points.forEach(p => {[p.main, p.left, p.right].forEach(pt => {if (!pt) return;lPoints++;  });});});
						
						//window.alert("1 number of points in path including Z"+lPoints);
						
						if (!isClosed) lPoints--;

						dataUrl = dataUrl + "						<LWPOLYLINE>\n";

						
						dataUrl = dataUrl + "							<isHatched>false</isHatched>\n";
						dataUrl = dataUrl + "							<isFilled>false</isFilled>\n";
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";
						
						
//						dataUrl = dataUrl + "0\nLWPOLYLINE\n";
//						dataUrl = dataUrl + "5\n"+hexString+"\n";
//						dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";	

						var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
				
//						dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";
						var closepoly = 0;
						if (isClosed) closepoly = 1;
						
						//dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+lPoints+"        \n 70\n     "+closepoly+"\n 43\n0.0\n";
						dataUrl = dataUrl + "							<dxf_90>"+(points.length+1)+"</dxf_90>\n							<dxf_70>"+closepoly+"</dxf_70>\n";
						
						var linewidth = cvjs_get_dwg_scaled_value(vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor, vqRedlines[spc].data("currentPage"));												
						var j=0;

						 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"</dxf_41>\n";						 


						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 if (j<lPoints){
//										 dataUrl = dataUrl + "							<dxf_40>"+linewidth+"</dxf_40>\n							<dxf_41>"+linewidth+"<dxf_41>\n";						 
//										 dataUrl = dataUrl + "							<pt_"+j+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt_"+j+">\n";
										 dataUrl = dataUrl + "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt>\n";
									 }
									 j++;
								});
							});
						});
						// NO HATCH, THIS IS AN ARROW TAIL
						dataUrl = dataUrl + "						</LWPOLYLINE>\n";


/*						
						// here we put in all the attributes

						dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
						dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
						dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
						dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
						dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
						dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
						dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
						dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
						dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
						dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
						dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
						dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
						dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
						dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
						dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
						dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
						dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
						dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
*/						
						
						
				}
				else if (str_object.indexOf("text")>-1){

					//dataUrl = dataUrl +"var "+itemRed+"= paper.text( 0, 0,\""+vqRedlines[spc].data("redline_text")+"\")";
					//dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"fill\": \""+vqRedlines[spc].data("color")+"\", \"font-size\": \""+cvjs_reference_font_size+"\", \"transform\": \""+vqRedlines[spc].data("transform")+"\"})";
					//dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					//dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
/****
					dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"M0,0\")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
***/

//						transform: "T615.5240601004703,209.54819432253697   S0.20498583644859775,   615.5240601004703,   209.54819432253697",
					
					var transformscale = vqRedlines[spc].data("transform");				
					var transform = transformscale.substring(1, transformscale.indexOf("S")); 
					var insert = transform.split(",");					
					var scale = transformscale.substring(transformscale.indexOf("S")+1);
					var textscale = scale.split(",");					
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					// 40 thickness start
					// 41 thickness end     (per vertex)
					// 70 closed poly
					handle++;
					var hexString = "A"+handle.toString(16);

					
					var mytext = vqRedlines[spc].data("redline_text");
					var strings =  mytext.split("<br>");
					//window.alert(strings.length);
					var maxchar = 1;
					for (var k=0; k<strings.length; k++){

						if (strings[k].length>maxchar) maxchar = strings[k].length;
					}				
//					window.alert(maxchar);
					var numberofRows = (mytext.match(/<br>/g) || []).length +1;  // number of rows is number of <br> +1
					mytext = "{"+mytext+"}";
					mytext = mytext.replace(/<br>/g, '\\P');		
							
					dataUrl = dataUrl +"						<MTEXT>\n";
					//dataUrl = dataUrl + "5\n"+hexString+"\n";
					var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
					dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";

					var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;

					//dataUrl = dataUrl +"330\n1F\n100\nAcDbEntity\n8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n100\nAcDbMText\n";
//					dataUrl = dataUrl +"							<nAcDbMText>\n";
					dataUrl = dataUrl +"							<dxf_10>"+cvjs_get_dwg_x_coord(insert[0], vqRedlines[spc].data("currentPage"))+"</dxf_10>\n";
					dataUrl = dataUrl +"							<dxf_20>"+cvjs_get_dwg_y_coord(insert[1], vqRedlines[spc].data("currentPage"))+"</dxf_20>\n";
					dataUrl = dataUrl +"							<dxf_30>0</dxf_30>\n";
					dataUrl = dataUrl +"							<dxf_40>"+cvjs_get_dwg_scaled_value(cvjs_reference_font_size*textscale[0], vqRedlines[spc].data("currentPage"))+"</dxf_40>\n";
					
//		console.log(insert[1]);			
//		console.log(numberofRows);			
//		console.log(cvjs_reference_font_size);			
//		console.log(textscale[0]);	

					var value1 = Number(insert[1])+(Number(numberofRows)*Number(cvjs_reference_font_size)*Number(textscale[0]));
		
	//	console.log(value1);	
	//	console.log(cvjs_get_dwg_scaled_value(value1));	
		
					
					dataUrl = dataUrl +"							<dxf_41>"+cvjs_get_dwg_scaled_value(value1, vqRedlines[spc].data("currentPage"))+"</dxf_41>\n";   // Think this is the yvalue of the end of the box, insertion y + height of text
					//dataUrl = dataUrl +" 71\n     1\n 72\n     5\n  1\n";					
					dataUrl = dataUrl + "							<text>"+mytext +"</text>\n";
					// here we need to adjust 46 and 1040
					
					// Think 1040 is the height of all text + extra   // I think
					// Think 1070 is the width of maximum textstring   // I think
					
					var myBoxWidth = cvjs_get_dwg_scaled_value((cvjs_reference_font_size*textscale[0])*0.8*maxchar, vqRedlines[spc].data("currentPage"));
					
					//dataUrl = dataUrl + " 73\n     1\n 44\n1.0\n1001\nACAD\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n    "+myBoxWidth+"\n1040\n"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0]*1.2)+"\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n"
					
					//dataUrl = dataUrl + " 73\n     1\n 44\n1.0\n1001\nACAD\n1000\nACAD_MTEXT_DEFINED_HEIGHT_BEGIN\n1070\n    "+myBoxWidth+"\n1040\n"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0])+"\n1000\nACAD_MTEXT_DEFINED_HEIGHT_END\n"

					dataUrl = dataUrl +"							<ACAD_MTEXT_DEFINED_HEIGHT>\n";
					dataUrl = dataUrl +"							<dxf_1070>"+myBoxWidth+"</dxf_1070>\n";
					dataUrl = dataUrl +"							<dxf_1040>"+cvjs_get_dwg_scaled_value(numberofRows*cvjs_reference_font_size*textscale[0], vqRedlines[spc].data("currentPage"))+"</dxf_1040>\n";
					dataUrl = dataUrl +"							</ACAD_MTEXT_DEFINED_HEIGHT>\n";
					
					
					
					
					
//					dataUrl = dataUrl +"						</nAcDbMText>\n";
					dataUrl = dataUrl +"						</MTEXT>\n";
					
					
					/*
					dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
					dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
					dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
					dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
					dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
					dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
					dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
					dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
					dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
					dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
					dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
					dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
					dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
					dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
					dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
					dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
					dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
					dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
*/						

		
										
/***					
					dataUrl = dataUrl +"TEXT\n";
					dataUrl = dataUrl + "5\n"+hexString+"\n";

					dataUrl = dataUrl +"8\n0\n62\n"+color+"\n";
//					dataUrl = dataUrl +"10\n"+www.origX+"\n";
//					dataUrl = dataUrl +"20\n"+www.origY+"\n";
					dataUrl = dataUrl +"10\n"+insert[0]+"\n";
					dataUrl = dataUrl +"20\n"+insert[1]+"\n";
					dataUrl = dataUrl +"1\n"+vqRedlines[spc].data("redline_text")+"\n";
//					dataUrl = dataUrl +"40\n"+(www.origHeight/4)+"\n";
//					dataUrl = dataUrl +"7\n"+font.getName()+"n";
					dataUrl = dataUrl +"40\n"+(cvjs_reference_font_size*textscale[0])+"\n";
					dataUrl = dataUrl +"7\n"+"Ariel"+"\n";
					dataUrl = dataUrl +"0\n";
**/



					
					
				}
				else{
					if (str_object.indexOf("path")>-1){

						//window.alert(str_object);
					
						var fillopacity = str_object.substring(str_object.indexOf("fill-opacity")+13);
						
						fillopacity = fillopacity.substring(0, fillopacity.indexOf(";"));
						
//						window.alert(fillopacity+"  "+Number(fillopacity));
						
						var opacityFlag = (Number(fillopacity)>0.02)

						//window.alert(fillopacity+"  "+Number(fillopacity)+"  "+opacityFlag);
						
						
						str_object = str_object.substring(str_object.indexOf("d=")+3);
						str_object = str_object.substring(0, str_object.indexOf('\"'));
						
//console.log("path XXXXXXXXXXX"+str_object+"XXXXXXXXXXXX");	

						var checkClosed = str_object.indexOf("Z");
						
						var isClosed = false;
						if (checkClosed >-1){
							isClosed = true;
						}					
						if (!isClosed) str_object = str_object + "Z";
						var outline = new PathConverter.Outline();
						const parser = new PathConverter.SVGParser(outline);
						parser.parse(str_object);
						
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						// 40 thickness start
						// 41 thickness end     (per vertex)
						// 70 closed poly
						handle++;
						var hexString = "A"+handle.toString(16);
						
						currentHandle = hexString;
						
						var linewidth = vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor;

						var lPoints=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 lPoints++;									 
								});
							});
						});
						
						//window.alert("2 number of points in path including Z "+lPoints);
						
						if (!isClosed) lPoints--;

						dataUrl = dataUrl + "						<LWPOLYLINE>\n";
						
						if (opacityFlag && isClosed){
							dataUrl = dataUrl + "							<isHatched>true</isHatched>\n";
							dataUrl = dataUrl + "							<isFilled>false</isFilled>\n";
						}
						else{
							dataUrl = dataUrl + "							<isHatched>false</isHatched>\n";
							dataUrl = dataUrl + "							<isFilled>false</isFilled>\n";
						}						
//						dataUrl = dataUrl + "0\nLWPOLYLINE\n";
//						dataUrl = dataUrl + "5\n"+hexString+"\n";
//						dataUrl = dataUrl + "330\n1F\n100\nAcDbEntity\n";	
						var color = cvjs_getAutoCADColor(vqRedlines[spc].data("color"));
						dataUrl = dataUrl + "							<autoCADColor>"+color+"</autoCADColor>\n";

						var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;
				
//						dataUrl = dataUrl + "8\n"+cvjs_currentRedlineLayerName+"\n62\n"+color+"\n";
						var closepoly = 0;
						if (isClosed) closepoly = 1;
//						dataUrl = dataUrl + "370\n   211\n100\nAcDbPolyline\n 90\n"+lPoints+"        \n 70\n     "+closepoly+"\n 43\n0.0\n";
						dataUrl = dataUrl + "							<dxf_90>"+(lPoints)+"</dxf_90>\n							<dxf_70>"+closepoly+"</dxf_70>\n";
						
						var linewidth = vqRedlines[spc].data("strokeWidth")*cvjs_redlineThickness_scaleFactor;

						dataUrl = dataUrl + "							<dxf_40>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_40>\n							<dxf_41>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_41>\n";						 

if (cvjs_debug){

	var bbox = cvjs_rPaper[cvjs_active_floorplan_div_nr].getBBox();	
	console.log(" bbox.x "+bbox.x+"  bbox.y "+bbox.y+ "  bbox.width "+bbox.width+" bbox.height "+bbox.height); 										 
}						
						
						var j=0;
						outline.getShapes().forEach(shape => {
							shape.points.forEach(p => {
								[p.main, p.left, p.right].forEach(pt => {
									if (!pt) return;
									 if (j<lPoints){
				
if (cvjs_debug) console.log(" pt.x "+pt.x+"  pt.y "+pt.y); 										 


										 
//										 dataUrl = dataUrl + "							<dxf_40>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_40>\n							<dxf_41>"+cvjs_get_dwg_scaled_value(linewidth, vqRedlines[spc].data("currentPage"))+"</dxf_41>\n";						 
//										 dataUrl = dataUrl + "40\n"+linewidth+"\n41\n"+linewidth+"\n";						 
//										 dataUrl = dataUrl + "10\n"+pt.x+"\n20\n"+pt.y+"\n";
//										 dataUrl = dataUrl + "							<pt_"+j+">\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt_"+j+">\n";
										 dataUrl = dataUrl + "							<pt>\n"+"								<dxf_10>"+cvjs_get_dwg_x_coord(pt.x, vqRedlines[spc].data("currentPage"))+"</dxf_10>\n								<dxf_20>"+cvjs_get_dwg_y_coord(pt.y, vqRedlines[spc].data("currentPage"))+"</dxf_20>\n"+ "							</pt>\n";
									 }
									 j++;
								});
							});
						});
	
/**
						dataUrl = dataUrl + "1001\n CADVIEWERJS\n";
						dataUrl = dataUrl + "1000\n node: "+vqRedlines[spc].data("node")+"\n";
						dataUrl = dataUrl + "1000\n name: "+vqRedlines[spc].data("name")+"\n";
						dataUrl = dataUrl + "1000\n id: "+vqRedlines[spc].data("id")+"\n";
						dataUrl = dataUrl + "1000\n layer: "+vqRedlines[spc].data("layer")+"\n";
						dataUrl = dataUrl + "1000\n group: "+vqRedlines[spc].data("group")+"\n";
						dataUrl = dataUrl + "1000\n color: "+vqRedlines[spc].data("color")+"\n";
						dataUrl = dataUrl + "1000\n strokeWidth: "+vqRedlines[spc].data("strokeWidth")+"\n";
						dataUrl = dataUrl + "1000\n fill: "+vqRedlines[spc].data("fill")+"\n";
						dataUrl = dataUrl + "1000\n username: "+vqRedlines[spc].data("username")+"\n";
						dataUrl = dataUrl + "1000\n userid: "+vqRedlines[spc].data("userid")+"\n";
						dataUrl = dataUrl + "1000\n currentPage: "+vqRedlines[spc].data("currentPage")+"\n";
						dataUrl = dataUrl + "1000\n triangle_design: "+vqRedlines[spc].data("triangle_design")+"\n";
						dataUrl = dataUrl + "1000\n polypath_arrow: "+"none"+"\n";
						dataUrl = dataUrl + "1000\n redline_text: "+vqRedlines[spc].data("redline_text")+"\n";
						dataUrl = dataUrl + "1000\n fill_opacity: "+vqRedlines[spc].data("fill_opacity")+"\n";
						dataUrl = dataUrl + "1000\n transform: "+vqRedlines[spc].data("transform")+"\n";
						dataUrl = dataUrl + "1000\n drawingRotation: "+vqRedlines[spc].data("drawingRotation")+"\n";
**/						
	
						dataUrl = dataUrl + "						</LWPOLYLINE>\n";

	
						// the check if fill and transparency
						if (opacityFlag && isClosed  && false){
//						if (opacityFlag && isClosed){
						
						// THIS CAN BE CLOSED OR OPEN
						// IF CLOSED MAKE A HATCH
						// IF TRANSPARANCY MAKE A HATCH
						
							handle++;
							var hexString = "A"+handle.toString(16);

							var cvjs_currentRedlineLayerName = vqRedlines[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[(vqRedlines[spc].data("currentPage"))-1].pageName;

							dataUrl = dataUrl + "0\nHATCH\n  5\n"+hexString+"\n330\n1F\n100\nAcDbEntity\n  8\n"+cvjs_currentRedlineLayerName+"\n 62\n     "+color+"\n370\n    70\n100\nAcDbHatch\n 10\n0.0\n 20\n0.0\n 30\n0.0\n210\n0.0\n220\n0.0\n230\n1.0\n  2\nANSI31\n";
							// HATCH  70=1
							dataUrl = dataUrl + "  70\n     0\n 71\n     1\n 91\n        1\n 92\n        1\n 93\n       "+(lPoints-1)+"\n";
							var pointsx=new Array();
							var pointsy=new Array();
							var j=0;
							outline.getShapes().forEach(shape => {
								shape.points.forEach(p => {
									[p.main, p.left, p.right].forEach(pt => {
										if (!pt) return;										
										pointsx[j] = pt.x; 
										pointsy[j] = pt.y; 
										j++;
									});
								});
							});
							
							for (var i=0; i< pointsx.length-1; i++){
								 dataUrl = dataUrl + "72\n 1\n"					 
//								 dataUrl = dataUrl + "10\n"+pointsx[i]+"\n20\n"+pointsy[i]+"\n";								 
//								 dataUrl = dataUrl + "11\n"+pointsx[i+1]+"\n21\n"+pointsy[i+1]+"\n";								 
								 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pointsx[i])+"\n20\n"+cvjs_get_dwg_y_coord(pointsy[i])+"\n";								 
								 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(pointsx[i+1])+"\n21\n"+cvjs_get_dwg_y_coord(pointsy[i+1])+"\n";								 
							}							
							// we have to make point back to start
							 dataUrl = dataUrl + "72\n 1\n"					 
//							 dataUrl = dataUrl + "10\n"+pointsx[pointsx.length-1]+"\n20\n"+pointsy[pointsx.length-1]+"\n";								 
//							 dataUrl = dataUrl + "11\n"+pointsx[0]+"\n21\n"+pointsy[0]+"\n";								 
							 dataUrl = dataUrl + "10\n"+cvjs_get_dwg_x_coord(pointsx[pointsx.length-1])+"\n20\n"+cvjs_get_dwg_y_coord(pointsy[pointsx.length-1])+"\n";								 
							 dataUrl = dataUrl + "11\n"+cvjs_get_dwg_x_coord(pointsx[0])+"\n21\n"+cvjs_get_dwg_y_coord(pointsy[0])+"\n";								 

							 dataUrl = dataUrl + " 97\n        1\n330\n"+currentHandle+"\n 75\n     0\n 76\n     1\n 52\n0.0\n41\n1.0\n 77\n     0\n 78\n     1\n 53\n45.0\n 43\n0.0\n 44\n0.0\n 45\n"+cvjs_get_dwg_scaled_value(-2.245064030267288*3.0)+"\n 46\n"+cvjs_get_dwg_scaled_value(2.245064030267288*3.0)+"\n 79\n     0\n 98\n        1\n 10\n0.0\n 20\n0.0\n1001\nACAD\n1010\n0.0\n1020\n0.0\n1030\n0.0\n";							
							 currentHandle = hexString;
						}	

						
console.log("dataURL TOTAL "+dataUrl+" dataURL TOTAL ");	
					
					
					/*						
						//console.log(str_object);
						dataUrl = dataUrl +"var "+itemRed+"= paper.path(\"";
						dataUrl = dataUrl +str_object+" \")";
						dataUrl = dataUrl +".attr({stroke: \""+vqRedlines[spc].data("color")+"\", \"stroke-width\": \""+vqRedlines[spc].data("strokeWidth")+"\", \"fill\": \""+vqRedlines[spc].data("fill")+"\", \"fill-opacity\": \""+vqRedlines[spc].data("fill_opacity")+"\"})";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRedlines[spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRedlines.push("+itemRed+");\n\n";
*/
					}
				}

				
				
				dataUrl = dataUrl +"						</graphics>\n";
				
				

				dataUrl = dataUrl +"					</Redline>\n";

			} // case node exists
		}


//		if (vqRedlines.length>0 && vqStickyNotes.length>0)
//			dataUrl = dataUrl +"						,\n";


		comma_flag =0;
		
		if (stickynote_flag)   //4.1.02a
			for (spc in vqStickyNotes)
			{
				if (vqStickyNotes[spc].data("deleted") == true ){
					// do nothing, the note is not there
					//console.log("file.js deleted node "+vqStickyNotes[spc].data("node"));
				}
				else{  // node exists

					if (comma_flag == 0){
						comma_flag = 1
					}
					else{
						dataUrl = dataUrl +"						,\n";
					}

					var notePos = parseInt(spc)+vqRedlines.length;

					dataUrl = dataUrl +"					<StickyNote>\n";
					dataUrl = dataUrl +"						<index>"+notePos+"</index>\n";
	//				dataUrl = dataUrl +"					"+vqStickyNotes[spc].data("node")+": {\n";
					dataUrl = dataUrl +"						<node>\""+vqStickyNotes[spc].data("node")+"\"</node>\n";
					dataUrl = dataUrl +"						<name>\""+vqStickyNotes[spc].data("name")+"\"</name>\n";
					dataUrl = dataUrl +"						<id>\""+vqStickyNotes[spc].data("id")+"\"</id>\n";
					dataUrl = dataUrl +"						<layer>\""+vqStickyNotes[spc].data("layer")+"_"+multiPages[cvjs_active_floorplan_div_nr].pages[vqRedlines[spc].data("currentPage")-1].pageName+"\"</layer>\n";
					dataUrl = dataUrl +"						<group>\""+vqStickyNotes[spc].data("group")+"\"</group>\n";
					dataUrl = dataUrl +"						<text>\""+vqStickyNotes[spc].data("text")+"\"</text>\n";
					dataUrl = dataUrl +"						<userid>\""+vqStickyNotes[spc].data("userid")+"\"</userid>\n";
					dataUrl = dataUrl +"						<currentPage>"+vqStickyNotes[spc].data("currentPage")+"</currentPage>\n";
					dataUrl = dataUrl +"						<currentPageName>\""+multiPages[cvjs_active_floorplan_div_nr].pages[vqStickyNotes[spc].data("currentPage")-1].pageName+"\"</currentPageName>\n";
					dataUrl = dataUrl +"						<date>\""+vqStickyNotes[spc].data("date")+"\"<date>\n";
					dataUrl = dataUrl +"						<linked>"+vqStickyNotes[spc].data("linked")+"<linked>\n";
					dataUrl = dataUrl +"						<transform>\""+vqStickyNotes[spc].data("transform")+"\"</transform>\n";
					dataUrl = dataUrl +"						<drawingRotation>"+vqStickyNotes[spc].data("drawingRotation")+"</drawingRotation>\n";


					var rightadjustment = 0;
					if (vqStickyNotes[spc].data("id")<10) rightadjustment = 3;
					var SNoteTemplate = "paper.group(paper.path(\"M0,0h20v20h-20v-20Z\").attr({stroke: \"#000000\", \"stroke-width\" : \"1.0\"}),"+
						"paper.path(\"M7,12h1.3M9.5,12h3.5M11.25,12v5M9.75,12v1.75M12.75,12v1.75M10.5,17h1.5M7,13.5h1.3M7,15.25h3M7,17.0h2.2\").attr({stroke: \"#000000\", \"stroke-width\" : \"0.5\"}),"+
						"paper.text("+(3+rightadjustment)+",9,\"#"+vqStickyNotes[spc].data("id")+"\").attr({\"font-size\": \"8px\", \"font-style\": \"italic\", stroke: \"#000000\", \"stroke-width\" : \"0.3\", \"stroke\" : \"0.3\", \"fill\" : \"#000000\", \"fill-opacity\" : 1.0}))";
						
						// 2018-03-15
	//					SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \""+vqStickyNotes[spc].data("transform")+"\" , \"opacity\" : \"1\"})";
						
						// we are simply loading in a scaled down image that we then make come "alive"
						SNoteTemplate = SNoteTemplate + ".attr({\'transform\': \"t0,0S0.01\" , \"opacity\" : \"0.1\"})";
						
						
						SNoteTemplate = SNoteTemplate + ".attr({	fill: \'#FFF\', \"fill-opacity\": \"0.8\", stroke: \'#000\', \'stroke-opacity\': \"1\" })";

					dataUrl = dataUrl +"						<graphics>\n";
					dataUrl = dataUrl +"						<stickyNoteTemplate>"+SNoteTemplate+"</stickyNoteTemplate>\n";
					dataUrl = dataUrl +"						</graphics>\n";



					dataUrl = dataUrl +"					</StickyNote>\n";

				} // case node exists
			}

//		dataUrl = dataUrl +"}\n\n";
		dataUrl = dataUrl +"</cvjs_RedlinesStickyNotes>\n\n";

		return(dataUrl);

};


/**
 * Returns the setting of Measurement Units on the current drawing/page from the active floorplan_div
 * @return {string} units -  Measurement Unit (mmn, cm, m, feet, inch)
 */

function cvjs_getCurrentMeasurementUnit(){

	return cvjs_units[cvjs_active_floorplan_div_nr];
}

/**
 * Returns the setting of SVG to World Units on the current drawing/page from the active floorplan_div
 * @return {float} svgToWorldUnits - conversion factor for measurements
 */

function cvjs_getSvgToWorldUnits(){

	return cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr];
}



/**
 * Sets Unit and Measurement World Unit Transformation on current page
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 * @param {string} units - Measurement Unit  (mmn, cm, m, feet, inch)
 * @param {float} svgToWorldUnit - conversion factor for measurements
 */

function cvjs_setCurrentMeasurementUnits(floorplan_div, units, svgToWorldUnit){

	cvjs_svgToWorldUnits[cvjs_rPaperIndex(floorplan_div)] = svgToWorldUnit;
	cvjs_units[cvjs_rPaperIndex(floorplan_div)] = units;
	cvjs_calibratedMeasurement = true;
		
}


/**
 * Reset the initialization of floorplans
 */

function cvjs_resetInitialization_FloorplanDiv(){

	floorplans_divs_Initialized = ["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""];
		
}
	
	
/**
 * Moves the drag background on top, typically for image and text intensive PDF files 
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
function cvjs_setDragBackgroundOnTop(floorplan_div){
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	cvjs_SVGGroup[cvjs_active_floorplan_div_nr].add(cvjs_masterBackground[cvjs_active_floorplan_div_nr]);
}


/**
 * Moves the drag background to its default position, at the back, typically for CAD files 
 * @param {string} floorplan_div - name of <div> on which CADViewer JS is located
 */
function cvjs_setDragBackgroundToBack(floorplan_div){
	
	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	cvjs_masterBackground[cvjs_active_floorplan_div_nr].add(cvjs_SVGGroup[cvjs_active_floorplan_div_nr]);
}



//3.2.02c
var cvjs_creationInputType = 1;
	
var creation_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
	

function cvjs_creation_modal_show(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	//window.alert(cvjs_creationInputType);
	jQuery("#creationModeModal_"+floorplan_div).hide();
	
				
	if (cvjs_supressPopUpModal == true){
		
		cvjs_setCreationMode(cvjs_supressPopUpModal);
		hideOnlyPop();
		cvjs_clearDrawing();		
		// 3.2.02c
		cvjs_draw_space_object_names_on_spaces();
		// turn on/off the div in SpaceObjects_C_1_06
		
		cvjs_spaceObjectInputPanel(floorplan_div);
			
		
	}
		
}


function cvjs_creation_modal_hide(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	jQuery("#creationModeModal_"+floorplan_div).hide();
	
	cvjs_supressPopUpModal = false;
}



function cvjs_showCreationModeModal(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	// move to right location
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;

	if (creation_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		creation_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#creationModeModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#creationModeModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
	jQuery("#creationModeModal_"+floorplan_div).show();
}






var cvjs_ellipseRedlineType = 1;
	
var ellipse_modal_offset_flag = [true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true];
	

function cvjs_drawEllipseViaButton(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	
	
	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	
	if (cvjs_ellipseRedlineType == 1)
		cvjs_drawSpaceObject_RedlineEllipse(floorplan_div);
	
	if (cvjs_ellipseRedlineType == 2)
		cvjs_drawSpaceObject_RedlineEllipseCloud(floorplan_div);		
	jQuery("#ellipseModal_"+floorplan_div).hide();
}


function cvjs_ellipse_modal_hide(floorplan_div){

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	jQuery("#ellipseModal_"+floorplan_div).hide();
}



function cvjs_drawRedlineEllipseCloud(floorplan_div){

	// 3.3.01a
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}



	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
	
	// move to right location
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;

	if (ellipse_modal_offset_flag[cvjs_active_floorplan_div_nr]){
		ellipse_modal_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#ellipseModal_"+floorplan_div).css({position: "fixed"});
		jQuery("#ellipseModal_"+floorplan_div).offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}
	
	jQuery("#ellipseModal_"+floorplan_div).show();
}



function cvjs_closeAreaMeasurement(){
	
	if (cvjs_addHandleFunc_MeasurementFilledPolygon_started){

		cvjs_addHandleFunc_MeasurementFilledPolygon_started = false;
		
//		cvjs_measurementMultipleSegmentLength = Math.round( (cvjs_currentMeasurementLength)*100)/100;;



		var vmeasurement_x1 = ((firstX_poly_redline1_segment1-delta_x)/global_scale)-area_vertices[area_vertices_counter-1].x;
		var vmeasurement_y1 = ((firstY_poly_redline1_segment1-delta_y)/global_scale)-area_vertices[area_vertices_counter-1].y;

//		console.log(measurement_x1+" "+measurement_y1);
		
		var measurementLength = Math.sqrt( Math.pow( (vmeasurement_x1), 2) + Math.pow( (vmeasurement_y1),2 ))
//		var measurementLength = Math.sqrt( Math.pow( (measurement_x2-measurement_x1), 2) + Math.pow( (measurement_y2-measurement_y1),2 ))
		var mLength = (cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*measurementLength).toFixed(2);
		//var mLength = 0;
		
//		console.log("measurement MultipleSegment Length  "+cvjs_measurementMultipleSegmentLength+" mLength  "+mLength);	
			
		cvjs_measurementMultipleSegmentLength = Math.round( (Number(cvjs_measurementMultipleSegmentLength)+Number(mLength))*100)/100;;

//		console.log("again "+cvjs_measurementMultipleSegmentLength+"  "+mLength);

		
								
		lastX_poly_redline1 = 	firstX_poly_redline1_segment1;
		lastY_poly_redline1 = 	firstY_poly_redline1_segment1;
						
		cvjs_measurement_end = true;


		polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale+"L" + (originX_poly_redline1-delta_x)/global_scale + "," + (originY_poly_redline1-delta_y)/global_scale+"Z";   // end polygon
	//	polyPath_redline1 += "L" + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale;
		tPolygon_redline1.attr({'path': polyPath_redline1});


		cvjs_removeHandleFunc_MeasurementFilledPolygon();

		//console.log("update database!! "+tPolygon);

		tRubberBand_poly_redline1.attr({'path': "M0,0"});

		draw_poly_redline1 = false;
		first_point_poly_redline1 = true;

			
		var displayLength = 0.0;
		var lLength = 0.0;
		lLength = cvjs_measurementMultipleSegmentLength;
						
		lLength = Math.round((lLength)*100)/100;
		displayLength = lLength;
		cvjs_currentMeasurementLength = displayLength;

		// CALCULATE AREA   DISPLAY DISTANCE

		// add the first point as the last in the polygon
		var vert_x = (firstX_poly_redline1_segment1-delta_x)/global_scale;
		var vert_y = (firstY_poly_redline1_segment1-delta_y)/global_scale;
		area_vertices[area_vertices_counter] = new Array();
		area_vertices[area_vertices_counter] = {x: vert_x, y: vert_y};

		if (cvjs_debug) console.log(area_vertices_counter+" "+ area_vertices[area_vertices_counter].x+"  "+area_vertices[area_vertices_counter].y+"  "+cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]);
		area_vertices_counter++;

		cvjs_measurementArea = (calcPolygonArea(area_vertices)*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]).toFixed(2);;
		
		if (cvjs_callbackMeasurement) cvjs_measurementCallback(cvjs_measurementMultipleSegmentLength , cvjs_measurementArea, cvjs_units[cvjs_active_floorplan_div_nr]);
	
	
		if (cvjs_units[cvjs_active_floorplan_div_nr].indexOf("feet")==0){

			var lint = Math.floor(lLength);
			var fraction = lLength - Math.floor(lLength);
			fraction = Math.round(fraction*16);
			if (fraction == 16){
				lint+=1;
				fraction = 0;
			}
			jQuery( "#cvjs_measurementLength_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+lint+"\'"+" "+fraction+"/16\")");
		}
		else
			jQuery('#cvjs_measurementLength_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html(lTable.languages[cvjs_currentLanguage].MeasurementModal.Area+": "+cvjs_measurementArea+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"<sup>2</sup> ("+cvjs_measurementMultipleSegmentLength+" "+cvjs_units[cvjs_active_floorplan_div_nr]+")");

		
			
		
		
		//polygon_finish_redline4();
	}
		
}


var cvjs_buildFolderTree_crossDomain = false;

/**
 * Build a tree structure in which to be able to load CADViewer JS dynamically
 * @param {string} FileLocation - location of file tree folder
 * @param {string} DocumentLocation - location of current document
 * @param {string} floorplan_div - name of the <div> in which CADViewer JS is running
 */


function cvjs_buildFolderTree(FileLocation, DocumentLocation, floorplan_div){

//window.alert(FileLocation);

		cvjs_buildFolderTree_crossDomain = true;

		//  HOW TO MAKE THE 
		
		// check file location on php init file		
		// if FileLocation different from php init file, then update php init file and reload with identical URL string
		
		var lastLetter= FileLocation.slice(-1);
		if (lastLetter=='/' || lastLetter=='\\'){
			//window.alert("no problem");
		}
		else{
			FileLocation = FileLocation+ "/";
		}		
		
		var cvjs_phpLoadConfigFile = cvjs_serverHandlersPath + cvjs_serverLoadFileController;
		
		var js_data = {};
		js_data['file'] = myLocation+"/CV-JS_foldertree_settings.php";
		//window.alert(cvjs_phpLoadConfigFile+"  "+js_data['file']);
		jQuery.ajax({
		  url:cvjs_phpLoadConfigFile,
		  type: 'post',
		  data: js_data,
		  success: function(phpconfig){

					var status ="Load php: "+phpconfig;
					if (cvjs_debug) 		console.log(status);
					
					var foldertreestart = phpconfig.lastIndexOf("$FolderTreeLocation");
									
					var sub0 = phpconfig.substring(0, foldertreestart);
					var sub1 = phpconfig.substring(foldertreestart+19);						
//					console.log(sub1);
					var indx2 = sub1.indexOf("=");
					var sub2 = sub1.substring(indx2+1);
//					console.log(sub2);			
					var sub3 = sub2.substring(0, sub2.indexOf(";"));
//					console.log(sub3);
					var serverPath = sub3.trim();

					var sub4 = sub2.substring(sub2.indexOf(";")+1);
					serverPath = serverPath.replace(/['"]+/g, '');				
											
//					window.alert("XX"+serverPath+"XX"+FileLocation);
	
					if (FileLocation.indexOf(serverPath) == 0 && FileLocation.length == serverPath.length ){       // 3.2.01f
						// "bingo! we are ok
						//window.alert("bingo! we are ok");
						
						//return(FileLocation);
						
					}
					else{
						// "we have to update server and reload"
						//window.alert("we have to update server and reload");
						// update phpconfig
												
						phpconfig = sub0+" $FolderTreeLocation = \""+FileLocation+"\";"+sub4; 
						//window.alert(phpconfig);
						
						// overwrite php configuration file on server
						var saveSettingsUrl = cvjs_serverHandlersPath + cvjs_serverSaveFileController; //					var saveSettingsUrl = settings_data_url+'save-file-p1.php';
						var settings_data = {};
						settings_data['file'] = DocumentLocation +"/CV-JS_foldertree_settings.php";
						settings_data['file_content'] = phpconfig;
						
						jQuery.ajax({
						  url:saveSettingsUrl,
						  type: 'post',
						  data: settings_data,
						  success: function(html){

							// We have updated the php settings and are reloading the page with new settings
							//window.alert("reloading "+html);
							// reload document						
							location.reload(); 
						  
						  }  // end success

						});

						
					}

					//cvjs_setUpStickyNotesRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
				},
		 error:function(data_e){console.log("Error "+data_e); return;}
		});


		// we have to return file location in any case
		return(FileLocation);
		
}


function cvjs_CleanLayout(floorplan_div){
	
	for (var i=0; i<rest_nname[cvjs_active_floorplan_div_nr ].length; i++){
		if (rest_nname[cvjs_active_floorplan_div_nr ][i]=="layout")  {rest_nname[cvjs_active_floorplan_div_nr ][i] = ""; rest_vvalue[cvjs_active_floorplan_div_nr ][i] = "";}
		// cleaning Layour
	}							
	
	
}

// 3.1.21j
function cvjs_selectPageFromList(floorplan_div){
	
// dummy	
}


// 3.2.01e
var cvjs_jsTreeSelectionCurrentData = "";
var cvjs_jsTreeSelectionCurrentDataLength =0;

function cvjs_custom_jsTreeSelection(data, datalength){
	
	cvjs_jsTreeSelectionCurrentData = data;
	cvjs_jsTreeSelectionCurrentDataLength = datalength;
}


// 3.2.01g

/**
 * Sets control parameter for service conversion
 * @param {string} applicationPlatform - 
 * @param {string} applicationPlatformUsername 
 * @param {string} applicationPlatformUserID 
 * @param {string} ServiceToken
 * @param {int} leaveStreamOnServerOnServer 
 */

function cvjs_conversion_setApplicationServiceParameters(applicationPlatform, applicationPlatformUsername, applicationPlatformUserID, ServiceToken, leaveStreamOnServer){

	rest_serviceCall = true;

	rest_applicationPlatform = applicationPlatform; 
	rest_applicationPlatformUsername = applicationPlatformUsername ;
	rest_applicationPlatformUserID = applicationPlatformUserID; 
	rest_ServiceToken = ServiceToken;
	rest_leaveStreamOnServer = leaveStreamOnServer;
}







// 3.2.01i
function cvjs_update_done_edit_location_fields(rmid){


//window.alert(rmid);
				jQuery("#location_s").html("");
				jQuery("#type_s").html("");
				jQuery("#occupancy_s").html("");
				jQuery("#tags_s").html("");

				jQuery("#type_tag").val("");
				
				//window.alert("XHere_3");	
				// 3.2.02c
				jQuery("#type_tag").val(id_main_data_template_type);
									
				
				
				jQuery("#layer_tag").val(id_main_data_layer);
				jQuery("#occupancy_tag").val("");
				jQuery("#other_tags").val("");
				jQuery("#drop_link_spaces").html('None Selected'+'<b class="caret"></b>');
				
				// 3.2.02c				
				if (cvjs_creationInputType==1){
			

							for (var i=0;i<fArr_Name.length;i++)
							{				
								if (fArr_Id[i] == rmid){

									jQuery("#location_s").html(fArr_Name[i]);
									jQuery("#type_s").html(fArr_Type[i]);
									jQuery("#occupancy_s").html(fArr_Occupancy[i]);
									jQuery("#tags_s").html(fArr_Tags[i]);

									jQuery("#type_tag").val(fArr_Type[i]);
									jQuery("#layer_tag").val(fArr_Layer[i]);
									jQuery("#occupancy_tag").val(fArr_Occupancy[i]);
									jQuery("#other_tags").val(fArr_Tags[i]);

									jQuery("#drop_link_spaces").html(fArr_Name[i]+'<b class="caret"></b>');
								}
							
							}



			
				}
				else{

		
					for (spc in vqRooms[cvjs_active_floorplan_div_nr])
					{
						if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("id") == rmid) {
							var node = vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")

							
							
							jQuery("#location_s").html(rmid);
							jQuery("#type_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("type"));
							jQuery("#occupancy_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy"));
							jQuery("#tags_s").html(vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags"));

							jQuery("#spaces_manual_tag").val(rmid);				
							jQuery("#type_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("type"));
							jQuery("#occupancy_tag").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy"));
							jQuery("#other_tags").val(vqRooms[cvjs_active_floorplan_div_nr][spc].data("tags"));
											

						}

					}

				}
				
}




// 3.2.02c
function cvjs_draw_space_object_names_on_spaces(){


	textLayer1 = cvjs_clearTextLayer(textLayer1);

	var hatchtype = 0;

	// I am making an API call to the function cvjs_getSpaceObjectIdList()
	// this will give me an array with IDs of all Spaces in the drawing
	var spaceObjectIds = cvjs_getSpaceObjectIdList();
	var i=0;

	var spaceObjectNames = cvjs_getSpaceObjectNamesList();
	
	for (spc in spaceObjectIds){
	
		//var  myObject = spaceObjectIds[spc];
		
	
		var textString = new Array(spaceObjectNames[spc]);
		var textStyles = new Array(text_style_arial_9pt_normal);
		var scaleText = new Array("0.15" );
		var hexColorText = new Array("#AB5500");

//window.alert("here");		
		// here we clip the roomlables so they are inside the room polygon
		cvjs_AddTextAndTBorderOnSpaceObjectId(textLayer1, spaceObjectIds[spc], 0.05, textString, textStyles, scaleText, hexColorText, false, true);
	

	}
	
	
}




// 3.3.201b

// INTERACTIVE MENU SYSTEM _ BEGIN

function cvjs_insertSingleIconImage(floorplan_div, placeholder, icon_image_code, cvjs_command_name, cvjs_command_parameter, cvjs_icon_image, cvjs_language_popup ){

// hack!!  - Angular 
//		cvjs_imagesLocation = "http://onlinedemo.cadviewerjs.com/cadviewer_4_1_0/app/images/";
//		cvjs_imagesLocation = "assets/cadviewer/app/images/";//
//		jQuery("#floorPlan_custom_menu").append("<a id=\""+icon_image_code+"_"+floorplan_div+"\" href=\"javascript:"+cvjs_command_name+"(\'"+cvjs_command_parameter+"\')\">"+"<img src="+cvjs_imagesLocation+cvjs_icon_image+">"+"</a>");	
//		console.log("IMAGE  "+cvjs_imagesLocation+"singleIcons/"+cvjs_icon_image);


		jQuery("#"+placeholder+"_"+floorplan_div+"_svg").append("<a id=\""+icon_image_code+"_"+floorplan_div+"\" href=\"javascript:"+cvjs_command_name+"(\'"+cvjs_command_parameter+"\')\">"+"<img id="+icon_image_code+"_img' src="+cvjs_imagesLocation+"singleIcons/"+cvjs_icon_image+">"+"</a>");	

/**
		// 3.3.05e
		console.log("here "+'#'+icon_image_code+"_img");
		jQuery('#'+icon_image_code+"_img").css('padding','2px');
		jQuery('#'+icon_image_code+"_img").css('opacity','0.2');
		jQuery('#'+icon_image_code+'_'+floorplan_div).css('top','-5px');
		jQuery('#'+icon_image_code+'_'+floorplan_div).css('padding','2px');
**/
		
		
		jQuery('#'+icon_image_code+'_'+floorplan_div).mouseover(function(){				
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						
				jQuery('#'+icon_image_code+'_'+floorplan_div).css('cursor','pointer');
				jQuery('#'+icon_image_code+'_'+floorplan_div).css('opacity','0.7');
				

				// 3.4.03d
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(cvjs_language_popup);
				tip[cvjs_active_floorplan_div_nr].show();
				
				tip[cvjs_active_floorplan_div_nr].css("left", jQuery("#"+floorplan_div+"_svg").position().left + jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left - jQuery("#"+floorplan_div+"_svg").position().left + jQuery('#'+icon_image_code+'_'+floorplan_div).position().left+27);	
				tip[cvjs_active_floorplan_div_nr].css("top", jQuery("#"+floorplan_div+"_svg").position().top +jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top - jQuery("#"+floorplan_div+"_svg").position().top + 26 + jQuery('#'+icon_image_code+'_'+floorplan_div).position().top);				


/**				
//				window.alert("location "+jQuery("#"+floorplan_div+"_svg").position().top+"  "+ jQuery("#"+floorplan_div).position().top);

				// 3.4.02l			
				// floorplan_div = floorplan_div_svg then we assume floating case
				if ( (jQuery("#"+floorplan_div).position().left == jQuery("#"+floorplan_div+"_svg").position().left)  && (jQuery("#"+floorplan_div).position().top==jQuery("#"+floorplan_div+"_svg").position().top) ){

					tip[cvjs_active_floorplan_div_nr].css("left", jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left - jQuery("#"+floorplan_div+"_svg").position().left + jQuery('#'+icon_image_code+'_'+floorplan_div).position().left+27);	
					tip[cvjs_active_floorplan_div_nr].css("top", jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top - jQuery("#"+floorplan_div+"_svg").position().top + 26 + jQuery('#'+icon_image_code+'_'+floorplan_div).position().top);				

				}
				else{
					tip[cvjs_active_floorplan_div_nr].css("left", jQuery("#"+floorplan_div+"_svg").position().left + jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left - jQuery("#"+floorplan_div+"_svg").position().left + jQuery('#'+icon_image_code+'_'+floorplan_div).position().left+27);	
					tip[cvjs_active_floorplan_div_nr].css("top", jQuery("#"+floorplan_div+"_svg").position().top +jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top - jQuery("#"+floorplan_div+"_svg").position().top + 26 + jQuery('#'+icon_image_code+'_'+floorplan_div).position().top);				
				}
	**/						
				
		});
		jQuery('#'+icon_image_code+'_'+floorplan_div).mouseout(function(){
				tip[cvjs_active_floorplan_div_nr].hide();
				jQuery('#'+icon_image_code+'_'+floorplan_div).css('opacity','1.0');
		});

	
	
}


function cvjs_navigationMenuItemHighlight(floorplan_div, placeholder, highlight_object_id, cvjs_language_popup, displayflag ){

		
		jQuery('#'+highlight_object_id+'_'+floorplan_div).mouseover(function(){				
				try{tip[cvjs_active_floorplan_div_nr].hide();} catch (err){};  // we have to hide if open from another div			
				cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);
						
				jQuery('#'+highlight_object_id+'_'+floorplan_div).css('cursor','pointer');
				jQuery('#'+highlight_object_id+'_'+floorplan_div).css('opacity','0.1');


				// 3.4.03d
				tip[cvjs_active_floorplan_div_nr].css({ position:'absolute'});		
				tip[cvjs_active_floorplan_div_nr].html(cvjs_language_popup);
				
				// 3.3.05c  - rewritten!
// 
				if (cvjs_debug) console.log(displayflag+"  "+ jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left+"  "+jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top+"  "+jQuery('#'+highlight_object_id+'_'+floorplan_div).position().left);
				
				// 4.1.02l   cvjs_navigationMenuItemHighlight tooltip added jQuery("#"+floorplan_div+"_svg").position().left
				
				
				var leftfactor = 0;
				if (displayflag == 1){
					leftfactor = 31;
				}
				if (displayflag == 2){
					leftfactor = -130;
				}
				

				tip[cvjs_active_floorplan_div_nr].css("left", jQuery("#"+floorplan_div+"_svg").position().left + jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().left+jQuery('#'+highlight_object_id+'_'+floorplan_div).position().left+leftfactor - jQuery("#"+floorplan_div+"_svg").position().left);				
				tip[cvjs_active_floorplan_div_nr].css("top", jQuery("#"+floorplan_div+"_svg").position().top+ jQuery("#"+placeholder+"_"+floorplan_div+"_svg").position().top+32 - jQuery("#"+floorplan_div+"_svg").position().top);				
						
				tip[cvjs_active_floorplan_div_nr].show();
				

				
		});
		jQuery('#'+highlight_object_id+'_'+floorplan_div).mouseout(function(){
				tip[cvjs_active_floorplan_div_nr].hide();
				jQuery('#'+highlight_object_id+'_'+floorplan_div).css('opacity','0.0');
		});

}


var cvjs_TopIconMenu_pageNumber = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
var cvjs_TopIconMenu_maxPageNumber = [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3];  // as default we restrict to standard 3 icon menu pages
var cvjs_topIconMenu = [Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object];

var cvjs_loadTopIconMenuVisible = [true,true,true,true,true,true,true,true,true,true,true];	
var cvjs_loadTopIconNavigationVisible = [true,true,true,true,true,true,true,true,true,true,true];	

var cvjs_loadTopIconMenuXML = [false,false,false,false,false,false,false,false,false,false];
var cvjs_topIconMenuXML = ["cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml","cadviewerjs_menu_all_items.xml"];


/**
 * Loads in the top icon menu system from an XML file
 * The XML file is in /cadviewer/app/js/menu_config/
 * The XML file allows custom settings of the number of menu pages, the start menu page
 * and content of each page, based on the selection set of available API commands
 * @param {String} xml_config_file - XML top menu configuration file
 * @param {String} floorplan_div - div in which CADViewer JS is implemented
 */
function cvjs_setCustomTopMenuXML(xml_config_file, floorplan_div){


	cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] = true;
	cvjs_topIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] = xml_config_file;
}


/**
 * Controls top menu icon bar visibility
 * @param {boolean} display_status - default is true, use false to hide menu bar
 * @param {String} floorplan_div - div in which CADViewer JS is implemented
 */
function cvjs_displayTopMenuIconBar(display_status, floorplan_div){

	// check interface counter
	var selectedDiv = interfaceCounter;	
	var counter = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0
	if (counter>0){
		// we have a match
		selectedDiv = counter;
	}
	else{
		interfaceCounter++;
		selectedDiv = interfaceCounter;
		interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	}
	
	//window.alert("cvjs_displayTopNavigationBar "+cvjs_rPaperIndex(floorplan_div)+" "+display_status);
	//cvjs_loadTopIconMenuVisible[cvjs_rPaperIndex(floorplan_div)] = display_status;
	cvjs_loadTopIconMenuVisible[selectedDiv] = display_status;
}


/**
 * Controls top menu navigation bar visibility
 * @param {boolean} display_status - default is true, use false to hide menu bar
 * @param {String} floorplan_div - div in which CADViewer JS is implemented
*/
function cvjs_displayTopNavigationBar(display_status, floorplan_div){

	// check interface counter
	var selectedDiv = interfaceCounter;	
	var counter = cvjs_interfaceCounterIndex(floorplan_div);
	// zero is the default interface so we add one if 0
	if (counter>0){
		// we have a match
		selectedDiv = counter;
	}
	else{
		interfaceCounter++;
		selectedDiv = interfaceCounter;
		interfaceCounterDiv[selectedDiv] = floorplan_div+"_svg";  // adding _svg for internal processing
	//window.alert("floorplan_div "+floorplan_div+"selectedDiv="+selectedDiv);
	}

//	cvjs_loadTopIconNavigationVisible[cvjs_rPaperIndex(floorplan_div)] = display_status;
	cvjs_loadTopIconNavigationVisible[selectedDiv] = display_status;
}



function cvjs_changePreviousIconPage_TopIconMenu(floorplan_div){
	
	cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]--;
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]<0) cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)];

	if (cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] )
		cvjs_LoadTopIconMenuXML(floorplan_div, cvjs_topIconMenu[cvjs_interfaceCounterIndex(floorplan_div)])
	else
		cvjs_LoadTopIconMenu(floorplan_div);	
}


function cvjs_changeNextIconPage_TopIconMenu(floorplan_div){
	
	cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]++;
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]>=cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)]) cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = 0; 
	
	if (cvjs_loadTopIconMenuXML[cvjs_interfaceCounterIndex(floorplan_div)] )
		cvjs_LoadTopIconMenuXML(floorplan_div, cvjs_topIconMenu[cvjs_interfaceCounterIndex(floorplan_div)])
	else
		cvjs_LoadTopIconMenu(floorplan_div);
}


function cvjs_LoadTopNavigationMenu(floorplan_div){

		// 3.301c
		if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
			floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
		}
		else{
			// do nothing
		}

		jQuery("#topIconMenu_placeholder_2_"+floorplan_div+"_svg").html("");

		// NAVIGATION MENU				
		jQuery("#topIconMenu_placeholder_2_"+floorplan_div+"_svg").append("<div id=\"floatNavigationMenu_topBar_"+floorplan_div+"\" style=\"flex-direction:row;\" class=\"changePagebox_topBar\"><a class=\"cvjs_rotateforward_topBar\" id=\"cvjs_rotateforward_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_rotateForward(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_rotateback_topBar\" id=\"cvjs_rotateback_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_rotateBackward(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastback_topBar\" id=\"cvjs_fastback_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_firstPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_back_topBar\" id=\"cvjs_back_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_previousPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_enterpagenumber_topBar\" id=\"cvjs_enterpagenumber_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_enterPageChangeNumber(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_selectpagefromlist_topBar\" id=\"cvjs_selectpagefromlist_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_PageChangeList(\'"+floorplan_div+"\');\"></a><div class=\"floatpagemenuText1_topBar\" id=\"floatpagemenuText1_topBar_"+floorplan_div+"_svg\" style=\"flex-direction:row;\">nr </div><div class=\"floatpagemenuText2_topBar\" id=\"floatpagemenuText2_topBar_"+floorplan_div+"_svg\" style=\"flex-direction:row;\">page name</div><a class=\"cvjs_forward_topBar\" id=\"cvjs_forward_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_nextPage(\'"+floorplan_div+"\');\"></a><a class=\"cvjs_fastforward_topBar\" id=\"cvjs_fastforward_topBar_"+floorplan_div+"\" href=\"javascript:cvjs_lastPage(\'"+floorplan_div+"\');\"></a></div>");
		
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_rotateforward_topBar", lTable.languages[cvjs_currentLanguage].PageModal.RotateForward, 1);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_rotateback_topBar", lTable.languages[cvjs_currentLanguage].PageModal.RotateBack, 1);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_fastback_topBar", lTable.languages[cvjs_currentLanguage].PageModal.First, 1);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_back_topBar", lTable.languages[cvjs_currentLanguage].PageModal.Previous,1 );
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_enterpagenumber_topBar", lTable.languages[cvjs_currentLanguage].PageModal.EnterPage,1 );
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_selectpagefromlist_topBar", lTable.languages[cvjs_currentLanguage].PageModal.SelectPageFromList,2 );
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_forward_topBar", lTable.languages[cvjs_currentLanguage].PageModal.Next, 2);
		cvjs_navigationMenuItemHighlight(floorplan_div, "topIconMenu_placeholder_2", "cvjs_fastforward_topBar", lTable.languages[cvjs_currentLanguage].PageModal.Last, 2);

		// MAKE A RESIZE CHECK TO MAKE THE MENU POSITION PROPERLY
		jQuery(window).trigger('resize');	
	
//		console.log(cvjs_loadTopIconNavigationVisible[cvjs_interfaceCounterIndex(floorplan_div)]);
		
		if (cvjs_loadTopIconNavigationVisible[cvjs_interfaceCounterIndex(floorplan_div)]==false)
			jQuery("#topIconMenu_placeholder_2_"+floorplan_div+"_svg").hide();
		
}


function cvjs_LoadTopIconMenu(floorplan_div){
				
	// 3.301c
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
		floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
	}
	else{
		// do nothing
	}
		
	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").html("");
	// ALWAYS ADD A LEFT LINE IMAGE
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_base_left.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
	// PAGE CHANGE ARROW
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenu.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );

	// 3.3.05d
	var placeholderwidth = 40+2;  // pageChange
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0) placeholderwidth = placeholderwidth + 14*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1) placeholderwidth = placeholderwidth + 18*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 2) placeholderwidth = placeholderwidth + 11*30;	

//	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3) placeholderwidth = placeholderwidth + 12*30;	
//	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4) placeholderwidth = placeholderwidth + 4*30;	


	// 3.3.06de
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3) placeholderwidth = placeholderwidth + 10*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4) placeholderwidth = placeholderwidth + 12*30;	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 5) placeholderwidth = placeholderwidth + 4*30;	


	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({width : placeholderwidth});
	// 3.3.05d
	
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_LayerList", floorplan_div, "cvjsIcon_dra_p1_1_1_LayerList.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_Print", floorplan_div, "cvjsIcon_dra_p1_1_2_Print.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Print );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_toggleBlackWhite", floorplan_div, "cvjsIcon_dra_p1_4_1_ToggleBlackWhite.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Toggle );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_setBackgroundColor", floorplan_div, "cvjsIcon_dra_p1_4_2_BackgroundColor.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Background );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_openFileLoadToServer", floorplan_div, "cvjsIcon_dra_p1_5_1_FileLoad.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_interactiveSearchText", floorplan_div, "cvjsIcon_dra_p1_5_2_SearchText.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search );	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_interactiveLayerOff", floorplan_div, "cvjsIcon_dra_p1_6_2_LayerOff.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerOff );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_swapLayersInDrawing", floorplan_div, "cvjsIcon_dra_p1_7_1_SwapLayers.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.SwapLayers );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_allLayersInDrawingOn", floorplan_div, "cvjsIcon_dra_p1_7_2_LayerOn.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.AllLayersOn );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_Measurement", floorplan_div, "cvjsIcon_dra_p1_8_1_Measurement.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Measurement );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_calibrateMeasurement", floorplan_div, "cvjsIcon_dra_p1_8_2_CalibrateMeasurement.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Calibrate );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_displayMagnifyingGlass", floorplan_div, "cvjsIcon_dra_p1_9_1_ToggleBirdsEyeWindow.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.BirdsEye );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_activateLineThicknessModal", floorplan_div, "cvjsIcon_dra_p1_9_2_AdjustLineThickness.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LineThickness );
	}
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_mergeDXFDWG", floorplan_div, "cvjsIcon_dra_p2_9_1_MergeRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeAsDXF );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_publishPDF", floorplan_div, "cvjsIcon_dra_p2_9_2_PublishPDF.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.PublishAsPDF );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_loadStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_2_LoadRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_saveStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_1_SaveRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.SaveRedline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_setRedlineColor", floorplan_div, "cvjsIcon_dra_p2_3_1_RedlineColor.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Color );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_setRedlineThickness", floorplan_div, "cvjsIcon_dra_p2_3_2_RedlineThickness.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Thickness );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_drawStickyNote", floorplan_div, "cvjsIcon_dra_p2_4_1_StickyNote.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.StickyNote );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_drawRedlineText", floorplan_div, "cvjsIcon_dra_p2_8_2_RedlineText.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Text );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_drawRedline_Freehand", floorplan_div, "cvjsIcon_dra_p2_5_1_FreehandRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Freehand );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_drawRedlineEllipseCloud", floorplan_div, "cvjsIcon_dra_p2_5_2_RedlineCloud.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Cloud );	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_drawRedlineFilledPolygon", floorplan_div, "cvjsIcon_dra_p2_6_1_RedlineFilledPolygon.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledPolygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_drawRedlinePolyline", floorplan_div, "cvjsIcon_dra_p2_6_2_RedlinePolygon.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Polygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_drawRedlineFilledRectangle", floorplan_div, "cvjsIcon_dra_p2_7_1_RedlineFilledRect.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledRectangle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_drawRedlineRectangle", floorplan_div, "cvjsIcon_dra_p2_7_2_RedlineRect.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Rectangle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_drawRedlineArrow", floorplan_div, "cvjsIcon_dra_p2_8_1_RedlineArrow.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Arrow );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_deleteSingleRedline", floorplan_div, "cvjsIcon_dra_p2_2_1_DeleteSingleRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteSingle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_deleteLastRedline", floorplan_div, "cvjsIcon_dra_p2_2_2_DeleteLastRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteLast );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_clearCurrentRedline", floorplan_div, "cvjsIcon_dra_p2_4_2_ClearRedlines.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.ClearAll );		
	}
	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 2){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_insertImageLink", floorplan_div, "cvjsIcon_dra_p3_2_2_InsertImageLink.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.InsertLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_2_1_LoadImageLinks.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.LoadLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_saveAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_1_SaveImageLinks.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.SaveLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_clearAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_2_ClearImageLinks.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearLink );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_quickCount", floorplan_div, "cvjsIcon_dra_p3_4_1_QuickCount.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.QuickCount );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_showMeCounts", floorplan_div, "cvjsIcon_dra_p3_4_2_SummaryQuickCount.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.CountSum );		
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_clearQuickCounts", floorplan_div, "cvjsIcon_dra_p3_5_1_ClearQuickCount.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearCount );							
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_1", "cvjs_compareDrawings_LoadSecondDrawing", floorplan_div, "cvjsIcon_dra_p4_1_1_LoadSecondCompare.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_2", "cvjs_compareDrawings_ToggleDrawings", floorplan_div, "cvjsIcon_dra_p4_1_2_ToggleCompareIndividually.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_1", "cvjs_compareDrawings_ToggleDrawingOverlay", floorplan_div, "cvjsIcon_dra_p4_2_1_ToggleCompareOverlaid.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_2", "cvjs_exitCompareDrawings", floorplan_div, "cvjsIcon_dra_p4_2_2_ExitCompare.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit );
	}

	
	
	// NOT MADE GENERAL PUBLIC YET
	
	// 	setting max page
	//	cvjs_TopIconMenu_maxPageNumber[0]=6;		
	
	
	// 3.3.06e	
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 3){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2x", "cvjs_loadSpaceObjectsUser", floorplan_div, "cvjsIcon_dra_p5_7_1_LoadSpaceOverlay.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_changeSpaceObjectDisplayMode", floorplan_div, "cvjsIcon_dra_p5_1_2_SpaceObjectEditMode.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_addPolygonSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_2_PolygonSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_addRectangleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_1_RectangleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_addCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_1_CircleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_copyCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_2_CopyCircleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_deleteSpaceObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadDrawingsWithSpaceObjects", floorplan_div, "cvjsIcon_dra_p5_2_1_LoadPreProcessSpaceObjects.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_LayerListSpaceObject", floorplan_div, "cvjsIcon_dra_p5_2_2_SpaceObjectsLayerList.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList );
	}
	
	
	
	
	// 3.3.06e
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 4){	
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_spaceObjectSettings", floorplan_div, "cvjsIcon_dra_p5_1_1_Settings.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Settings );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_changeSpaceObjectDisplayMode", floorplan_div, "cvjsIcon_dra_p5_1_2_SpaceObjectEditMode.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadDrawingsWithSpaceObjects", floorplan_div, "cvjsIcon_dra_p5_2_1_LoadPreProcessSpaceObjects.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_LayerListSpaceObject", floorplan_div, "cvjsIcon_dra_p5_2_2_SpaceObjectsLayerList.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_addRectangleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_1_RectangleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_addPolygonSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_2_PolygonSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_addCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_1_CircleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_copyCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_2_CopyCircleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_deleteSpaceObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_setSpacePolygonOnLayer", floorplan_div, "cvjsIcon_dra_p5_5_2_MakeSpaceObjectOnPolygon.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.SelectPolygon );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displaySpaceObjectsStructure", floorplan_div, "cvjsIcon_dra_p5_6_1_SpaceObjectDisplayMode.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Publish );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_saveAsSVG", floorplan_div, "cvjsIcon_dra_p5_6_2_DownloadProcessedSpaceObjects.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );
	}
	// 3.3.06e
	if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 5){	
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_compareDrawings_LoadSecondDrawing", floorplan_div, "cvjsIcon_dra_p4_1_1_LoadSecondCompare.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad );
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_compareDrawings_ToggleDrawings", floorplan_div, "cvjsIcon_dra_p4_1_2_ToggleCompareIndividually.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle );
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_compareDrawings_ToggleDrawingOverlay", floorplan_div, "cvjsIcon_dra_p4_2_1_ToggleCompareOverlaid.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay );
//			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_exitCompareDrawings", floorplan_div, "cvjsIcon_dra_p4_2_2_ExitCompare.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_start_collab", floorplan_div, "cvjsIcon_dra_p4_7_1_JoinCollab.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationJoinSession );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_make_collab_presenter", floorplan_div, "cvjsIcon_dra_p4_7_2_TakeControl.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationTakeControl );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_clear_collab_redline", floorplan_div, "cvjsIcon_dra_p4_8_1_ClearCollabRedlines.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationClearSession );
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_stop_collab", floorplan_div, "cvjsIcon_dra_p4_8_2_LeaveCollabSession.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CollaborationLeaveSession );
	}
			
//		// resize the window, CHECK if _position or _fixedSize
//		cvjs_windowResize_position(true, floorplan_div );
	
	
//		var floorplanMenu = "#floatNavigationMenu_"+floorplan_div+"_svg";
//		jQuery(floorplanMenu).show();
	
	
//	console.log(cvjs_loadTopIconMenuVisible[cvjs_interfaceCounterIndex(floorplan_div)]);
	
	if (cvjs_loadTopIconMenuVisible[cvjs_interfaceCounterIndex(floorplan_div)]==false)
		jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").hide();
	
	

	
}			


// 3.3.05e
var cvjs_iconColumns = 0;
var cvjs_iconColumnsFlag = false;
var cvjs_iconmenu_pos_x = 0 ;
var cvjs_iconmenu_pos_y = 0;
var cvjs_initLoadMenuXML = true;

// 3.3.06c
var cvjs_gMenu_pos_x = 30 ; // 30
var cvjs_gMenu_pos_y = 20;  // 20

//		var pos = jQuery(floorplan).position();
//		jQuery('#gMenu_'+floorplan_div).offset({ top: pos.top+30, left: pos.left+20 });

		

function cvjs_LoadTopIconMenuXML(floorplan_div, cvjsIconMenu){


	// 3.301c
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){	
		floorplan_div = floorplan_div.substring(0,floorplan_div.length-4);
	}
	else{
		// do nothing
	}

	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").html("");
	// ALWAYS ADD A LEFT LINE IMAGE
	cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_base_left.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );
	// PAGE CHANGE ARROW
	cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)] = cvjsIconMenu.cvjs.iconmenu.totalpages;

	
//window.alert(cvjs_interfaceCounterIndex(floorplan_div)+ "  "+ floorplan_div+"  " +cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)]+" cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] "+cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]);	


	if (cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1){
		// do nothing, only single page
	}
	else{
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenu.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );	
// 3.3.05e
//		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0_2", "cvjs_changeNextIconPage_TopIconMenu", floorplan_div, "cvjsIcon_dra_p1_0_2_NextMenuSmall.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.NextMenuPage );	
	}
		
	// check the current page
	// find all commands associated with current page inside cvjsIconMenu
	
	var commands;

	if (cvjsIconMenu.cvjs.iconmenu.totalpages == 1)
		commands = cvjsIconMenu.cvjs.iconmenu.pages.page.command;  // single page
	else
		commands = cvjsIconMenu.cvjs.iconmenu.pages.page[cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]].command;
	
	
	// 3.3.05c
	var cvjs_customCommandText;	
	try{
		cvjs_customCommandText =cvjsIconMenu.cvjs.iconmenu.customcommand.tooltip ;
	}
	catch (err){
//		window.alert(err);	
		cvjs_customCommandText =["no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file", "no text in xml config file"] ;
	}		
	
	// 3.3.05e
	try{
		 cvjs_iconColumns = cvjsIconMenu.cvjs.iconmenu.icons_per_row;		 
		 if (cvjs_iconColumns>0 ){
			cvjs_iconColumnsFlag  = true;
		 }
	}
	catch (err){
		console.log("error 1 "+err);
		cvjs_iconColumnsFlag  = false;

	}	

	
	try{
		var temp1 = cvjsIconMenu.cvjs.iconmenu.icon_page_left_x;	
		cvjs_iconmenu_pos_x = parseInt(temp1);		 
		if (Number.isNaN(cvjs_iconmenu_pos_x)) cvjs_iconmenu_pos_x = 0;
	
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_iconmenu_pos_x = 0;
	}		
	try{
		var temp1 = cvjsIconMenu.cvjs.iconmenu.icon_page_left_y;		 
		cvjs_iconmenu_pos_y = parseInt(temp1)		 
		if (Number.isNaN(cvjs_iconmenu_pos_y)) cvjs_iconmenu_pos_y = 0;
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_iconmenu_pos_y = 0;
	}		

	
	// 3.3.06c
	try{
		var temp1 = cvjsIconMenu.cvjs.zoommenu.location_left_x;		 
		cvjs_gMenu_pos_x = parseInt(temp1)		 
		if (Number.isNaN(cvjs_gMenu_pos_x)) cvjs_gMenu_pos_x = 30;
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_gMenu_pos_x = 0;
	}		
	try{
		var temp1 = cvjsIconMenu.cvjs.zoommenu.location_left_y;		 
		cvjs_gMenu_pos_y = parseInt(temp1)		 
		if (Number.isNaN(cvjs_gMenu_pos_y)) cvjs_gMenu_pos_y = 20;
	}
	catch (err){
		console.log("ERR"+err);
		cvjs_gMenu_pos_y = 0;
	}		
	// 3.3.06c




	// we have to redraw
	
	
	// 3.3.05d
	// 3.3.05e
	var placeholderwidth = 0;  // pageChange
	var iconColumnsCounter = 0;
	
	if (cvjsIconMenu.cvjs.iconmenu.totalpages == 1) 
		placeholderwidth = 2;  // single page only
	else 
		placeholderwidth = 2+40;// page change icon

	
	
	
	
	
	if (!cvjs_iconColumnsFlag){ // we have a one row menu with all icons
		placeholderwidth = placeholderwidth + commands.length*30;	

		// 3.3.07c
		//window.alert(cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)]);
		if (cvjs_TopIconMenu_pageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 0){
				// if first row, we add an extra field for i-commmand.
		    // 
			placeholderwidth = placeholderwidth + (1)*30;	
		}
	}
	else{
		placeholderwidth = placeholderwidth + cvjs_iconColumns*30;	
	}
		

	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({width : placeholderwidth});
		
	
	// squeeze the placeholder
	//if ( iconColumns < commands.length) 
	//	jQuery("#topIconMenu"+"_"+floorplan_div+"_svg").css({height: '31px'});
		
//	jQuery("#topIconMenu_placeholder_1_"+floorplan_div+"_svg").css({overflow : 'hidden'});
	// 3.3.05d

	
		
	
//	window.alert(cvjs_customCommandText.length)
//window.alert(commands+"  "+commands.length);

	var about=false;

	for (i=0; i<commands.length; i++){

	console.log(commands[i]);

		// 3.3.05e
		if ( cvjs_iconColumnsFlag && iconColumnsCounter == cvjs_iconColumns ){
			cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_0", "none", floorplan_div, "cvjsIcon_dra_p1_0_2_Blank.png", "" );
			iconColumnsCounter = 0;
		}
	
		iconColumnsCounter++;

		if (commands[i] == "cvjs_LayerList"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_LayerList", floorplan_div, "cvjsIcon_dra_p1_1_1_LayerList.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );  continue;} 
		if (commands[i] == "cvjs_Print"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_Print", floorplan_div, "cvjsIcon_dra_p1_1_2_Print.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Print );  continue;} 
		if (commands[i] == "cvjs_toggleBlackWhite"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_toggleBlackWhite", floorplan_div, "cvjsIcon_dra_p1_4_1_ToggleBlackWhite.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Toggle );   continue;} 
		if (commands[i] == "cvjs_setBackgroundColor"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_setBackgroundColor", floorplan_div, "cvjsIcon_dra_p1_4_2_BackgroundColor.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Background );   continue;} 
		if (commands[i] == "cvjs_openFileLoadToServer"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_openFileLoadToServer", floorplan_div, "cvjsIcon_dra_p1_5_1_FileLoad.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad );   continue;} 
		if (commands[i] == "cvjs_interactiveSearchText"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_interactiveSearchText", floorplan_div, "cvjsIcon_dra_p1_5_2_SearchText.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Search ); continue;} 
		if (commands[i] == "cvjs_About"){ about=true; cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );  continue;} 
		if (commands[i] == "cvjs_interactiveLayerOff"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_interactiveLayerOff", floorplan_div, "cvjsIcon_dra_p1_6_2_LayerOff.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerOff );  continue;} 
		if (commands[i] == "cvjs_swapLayersInDrawing"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_swapLayersInDrawing", floorplan_div, "cvjsIcon_dra_p1_7_1_SwapLayers.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.SwapLayers );  continue;} 
		if (commands[i] == "cvjs_allLayersInDrawingOn"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_allLayersInDrawingOn", floorplan_div, "cvjsIcon_dra_p1_7_2_LayerOn.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.AllLayersOn );  continue;} 
		if (commands[i] == "cvjs_Measurement"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_Measurement", floorplan_div, "cvjsIcon_dra_p1_8_1_Measurement.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Measurement );   continue;} 
		if (commands[i] == "cvjs_calibrateMeasurement"){  cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_calibrateMeasurement", floorplan_div, "cvjsIcon_dra_p1_8_2_CalibrateMeasurement.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.Calibrate ); continue;} 
		if (commands[i] == "cvjs_displayMagnifyingGlass"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_1", "cvjs_displayMagnifyingGlass", floorplan_div, "cvjsIcon_dra_p1_9_1_ToggleBirdsEyeWindow.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.BirdsEye );  continue;} 
		if (commands[i] == "cvjs_activateLineThicknessModal"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_9_2", "cvjs_activateLineThicknessModal", floorplan_div, "cvjsIcon_dra_p1_9_2_AdjustLineThickness.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LineThickness );  continue;} 

		if (commands[i] == "cvjs_mergeDXFDWG"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p2_9_1", "cvjs_mergeDXFDWG", floorplan_div, "cvjsIcon_dra_p2_9_1_MergeRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeAsDXF );  continue;} 
		if (commands[i] == "cvjs_publishPDF"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p2_9_2", "cvjs_publishPDF", floorplan_div, "cvjsIcon_dra_p2_9_2_PublishPDF.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.PublishAsPDF );  continue;} 
		if (commands[i] == "cvjs_loadStickyNotesRedlinesUser"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_loadStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_2_LoadRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.LoadRedline );  continue;} 
		if (commands[i] == "cvjs_saveStickyNotesRedlinesUser"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_saveStickyNotesRedlinesUser", floorplan_div, "cvjsIcon_dra_p2_1_1_SaveRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.SaveRedline );   continue;} 
		if (commands[i] == "cvjs_setRedlineColor"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_setRedlineColor", floorplan_div, "cvjsIcon_dra_p2_3_1_RedlineColor.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Color );  continue;} 
		if (commands[i] == "cvjs_setRedlineThickness"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_setRedlineThickness", floorplan_div, "cvjsIcon_dra_p2_3_2_RedlineThickness.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Thickness );		  continue;} 
		if (commands[i] == "cvjs_drawStickyNote"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_drawStickyNote", floorplan_div, "cvjsIcon_dra_p2_4_1_StickyNote.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.StickyNote );							  continue;} 
		if (commands[i] == "cvjs_drawRedlineText"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_2", "cvjs_drawRedlineText", floorplan_div, "cvjsIcon_dra_p2_8_2_RedlineText.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Text );  continue;} 
		if (commands[i] == "cvjs_drawRedline_Freehand"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_drawRedline_Freehand", floorplan_div, "cvjsIcon_dra_p2_5_1_FreehandRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Freehand );   continue;} 
		if (commands[i] == "cvjs_drawRedlineEllipseCloud"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_drawRedlineEllipseCloud", floorplan_div, "cvjsIcon_dra_p2_5_2_RedlineCloud.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Cloud );	  continue;} 
		if (commands[i] == "cvjs_drawRedlineFilledPolygon"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_drawRedlineFilledPolygon", floorplan_div, "cvjsIcon_dra_p2_6_1_RedlineFilledPolygon.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledPolygon );   continue;} 
		if (commands[i] == "cvjs_drawRedlinePolyline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_drawRedlinePolyline", floorplan_div, "cvjsIcon_dra_p2_6_2_RedlinePolygon.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Polygon );   continue;} 
		if (commands[i] == "cvjs_drawRedlineFilledRectangle"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_1", "cvjs_drawRedlineFilledRectangle", floorplan_div, "cvjsIcon_dra_p2_7_1_RedlineFilledRect.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.FilledRectangle );  continue;} 
		if (commands[i] == "cvjs_drawRedlineRectangle"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_7_2", "cvjs_drawRedlineRectangle", floorplan_div, "cvjsIcon_dra_p2_7_2_RedlineRect.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Rectangle );  continue;} 
		if (commands[i] == "cvjs_drawRedlineArrow"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_8_1", "cvjs_drawRedlineArrow", floorplan_div, "cvjsIcon_dra_p2_8_1_RedlineArrow.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.Arrow );  continue;} 
		if (commands[i] == "cvjs_deleteSingleRedline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_deleteSingleRedline", floorplan_div, "cvjsIcon_dra_p2_2_1_DeleteSingleRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteSingle );  continue;} 
		if (commands[i] == "cvjs_deleteLastRedline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_deleteLastRedline", floorplan_div, "cvjsIcon_dra_p2_2_2_DeleteLastRedline.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.DeleteLast );  continue;} 
		if (commands[i] == "cvjs_clearCurrentRedline"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_clearCurrentRedline", floorplan_div, "cvjsIcon_dra_p2_4_2_ClearRedlines.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.ClearAll );		   continue;} 
	    // 3.3.02d
		if (commands[i] == "cvjs_PinMarker"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_10_1", "cvjs_PinMarker", floorplan_div, "cvjsIcon_dra_p6_1_1_PinMarker.png", lTable.languages[cvjs_currentLanguage].IconPage_p6_1.PinMarker );		   continue;} 

		
		if (commands[i] == "cvjs_insertImageLink"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_insertImageLink", floorplan_div, "cvjsIcon_dra_p3_2_2_InsertImageLink.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.InsertLink );   continue;} 
		if (commands[i] == "cvjs_loadAllImageLinks"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_2_1_LoadImageLinks.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.LoadLink );  continue;} 
		if (commands[i] == "cvjs_saveAllImageLinks"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_saveAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_1_SaveImageLinks.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.SaveLink );   continue;} 
		if (commands[i] == "cvjs_clearAllImageLinks"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_clearAllImageLinks", floorplan_div, "cvjsIcon_dra_p3_3_2_ClearImageLinks.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearLink );   continue;} 
		if (commands[i] == "cvjs_quickCount"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_quickCount", floorplan_div, "cvjsIcon_dra_p3_4_1_QuickCount.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.QuickCount );   continue;} 
		if (commands[i] == "cvjs_showMeCounts"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_showMeCounts", floorplan_div, "cvjsIcon_dra_p3_4_2_SummaryQuickCount.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.CountSum );		   continue;} 
		if (commands[i] == "cvjs_clearQuickCounts"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_clearQuickCounts", floorplan_div, "cvjsIcon_dra_p3_5_1_ClearQuickCount.png", lTable.languages[cvjs_currentLanguage].IconPage_p3_8.ClearCount );							   continue;} 
		if (commands[i] == "cvjs_compareDrawings_LoadSecondDrawing"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_1", "cvjs_compareDrawings_LoadSecondDrawing", floorplan_div, "cvjsIcon_dra_p4_1_1_LoadSecondCompare.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareLoad );  continue;} 
		if (commands[i] == "cvjs_compareDrawings_ToggleDrawings"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_1_2", "cvjs_compareDrawings_ToggleDrawings", floorplan_div, "cvjsIcon_dra_p4_1_2_ToggleCompareIndividually.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggle );   continue;} 
		if (commands[i] == "cvjs_compareDrawings_ToggleDrawingOverlay"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_1", "cvjs_compareDrawings_ToggleDrawingOverlay", floorplan_div, "cvjsIcon_dra_p4_2_1_ToggleCompareOverlaid.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareToggleOverlay );   continue;} 
		if (commands[i] == "cvjs_exitCompareDrawings"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p3_2_2", "cvjs_exitCompareDrawings", floorplan_div, "cvjsIcon_dra_p4_2_2_ExitCompare.png", lTable.languages[cvjs_currentLanguage].IconPage_p4_8.CompareExit );   continue;} 


		if (commands[i] == "cvjs_spaceObjectSettings") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_spaceObjectSettings", floorplan_div, "cvjsIcon_dra_p5_1_1_Settings.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Settings );   continue;}
		if (commands[i] == "cvjs_changeSpaceObjectDisplayMode") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_changeSpaceObjectDisplayMode", floorplan_div, "cvjsIcon_dra_p5_1_2_SpaceObjectEditMode.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Mode );   continue;}
		if (commands[i] == "cvjs_loadDrawingsWithSpaceObjects") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_1", "cvjs_loadDrawingsWithSpaceObjects", floorplan_div, "cvjsIcon_dra_p5_2_1_LoadPreProcessSpaceObjects.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Load );   continue;}
		if (commands[i] == "cvjs_LayerListSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_2_2", "cvjs_LayerListSpaceObject", floorplan_div, "cvjsIcon_dra_p5_2_2_SpaceObjectsLayerList.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.LayerList );   continue;}
		if (commands[i] == "cvjs_addRectangleSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_1", "cvjs_addRectangleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_1_RectangleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Rect );   continue;}
		if (commands[i] == "cvjs_addPolygonSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_3_2", "cvjs_addPolygonSpaceObject", floorplan_div, "cvjsIcon_dra_p5_3_2_PolygonSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Polygon );   continue;}
		if (commands[i] == "cvjs_addCircleSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_1", "cvjs_addCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_1_CircleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Circle );   continue;}
		if (commands[i] == "cvjs_copyCircleSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_4_2", "cvjs_copyCircleSpaceObject", floorplan_div, "cvjsIcon_dra_p5_4_2_CopyCircleSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.CopyCircle );   continue;}
		if (commands[i] == "cvjs_deleteSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_1", "cvjs_deleteSpaceObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );   continue;}
		if (commands[i] == "cvjs_setSpacePolygonOnLayer") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_5_2", "cvjs_setSpacePolygonOnLayer", floorplan_div, "cvjsIcon_dra_p5_5_2_MakeSpaceObjectOnPolygon.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.SelectPolygon );   continue;}
		if (commands[i] == "cvjs_displaySpaceObjectsStructure") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displaySpaceObjectsStructure", floorplan_div, "cvjsIcon_dra_p5_6_1_SpaceObjectDisplayMode.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Publish );   continue;}

		// 3.3.07a
		if (commands[i] == "cvjs_loadSpaceObjectsUser"){cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2x", "cvjs_loadSpaceObjectsUser", floorplan_div, "cvjsIcon_dra_p5_7_1_LoadSpaceOverlay.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.LoadSpaceObjects );  continue;}

		
		if (commands[i] == "cvjs_saveAsSVG") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_2", "cvjs_saveAsSVG", floorplan_div, "cvjsIcon_dra_p5_6_2_DownloadProcessedSpaceObjects.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}

		// 3.3.05d
// 		add 20 new placeholders for custom commands
		if (commands[i] == "cvjs_customCommand_01") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_1", "cvjs_customCommand_01", floorplan_div, "cvjsIcon_customCommand_01.png", cvjs_customCommandText[0] );   continue;}
		if (commands[i] == "cvjs_customCommand_02") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_2", "cvjs_customCommand_02", floorplan_div, "cvjsIcon_customCommand_02.png", cvjs_customCommandText[1] );   continue;}
		if (commands[i] == "cvjs_customCommand_03") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_3", "cvjs_customCommand_03", floorplan_div, "cvjsIcon_customCommand_03.png", cvjs_customCommandText[2] );   continue;}
		if (commands[i] == "cvjs_customCommand_04") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_4", "cvjs_customCommand_04", floorplan_div, "cvjsIcon_customCommand_04.png", cvjs_customCommandText[3] );   continue;}
		if (commands[i] == "cvjs_customCommand_05") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_5", "cvjs_customCommand_05", floorplan_div, "cvjsIcon_customCommand_05.png", cvjs_customCommandText[4] );   continue;}
		if (commands[i] == "cvjs_customCommand_06") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_6", "cvjs_customCommand_06", floorplan_div, "cvjsIcon_customCommand_06.png", cvjs_customCommandText[5] );   continue;}
		if (commands[i] == "cvjs_customCommand_07") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_7", "cvjs_customCommand_07", floorplan_div, "cvjsIcon_customCommand_07.png", cvjs_customCommandText[6] );   continue;}
		if (commands[i] == "cvjs_customCommand_08") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_8", "cvjs_customCommand_08", floorplan_div, "cvjsIcon_customCommand_08.png", cvjs_customCommandText[7] );   continue;}
		if (commands[i] == "cvjs_customCommand_09") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_0_9", "cvjs_customCommand_09", floorplan_div, "cvjsIcon_customCommand_09.png", cvjs_customCommandText[8] );   continue;}
		if (commands[i] == "cvjs_customCommand_10") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_custom_1_0", "cvjs_customCommand_10", floorplan_div, "cvjsIcon_customCommand_10.png", cvjs_customCommandText[9] );   continue;}


		
		// 4.1.02i   - new Space Image (Sensor) commands
		if (commands[i] == "cvjs_addFixedSizeImageSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_1", "cvjs_addFixedSizeImageSpaceObject", floorplan_div, "cvjsIcon_dra_p7_2_1_FixedSpaceImageObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.InsertSpaceImage );   continue;}
		if (commands[i] == "cvjs_addDragRectangleImageSpaceObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_2", "cvjs_addDragRectangleImageSpaceObject", floorplan_div, "cvjsIcon_dra_p7_2_2_RectangleSpaceImageObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.DragSpaceImage );   continue;}
		if (commands[i] == "cvjs_resizeSpaceImageObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_3", "cvjs_resizeSpaceImageObject", floorplan_div, "cvjsIcon_dra_p7_3_1_ResizeSpaceImageObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.ResizeSpaceImage );   continue;}
		if (commands[i] == "cvjs_deleteSpaceImageObject") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_4", "cvjs_deleteSpaceImageObject", floorplan_div, "cvjsIcon_dra_p5_5_1_DeleteSpaceObject.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.Delete );   continue;}
		// 4.1.03a  - have change saveAsSVGOnServer to saveAsSVG
		if (commands[i] == "cvjs_saveAsSVGOnServer") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_5", "cvjs_saveAsSVG", floorplan_div, "cvjsIcon_dra_p6_2_1_PublishSVG.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}
		//if (commands[i] == "cvjs_saveAsSVGOnServer") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_1_5", "cvjs_saveAsSVGOnServer", floorplan_div, "cvjsIcon_dra_p6_2_1_PublishSVG.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}

		
		
		// 3.3.02g
//			<command>cvjs_customLayerList</command>
//			<command>cvjs_downloadAsSVG</command>
//			<command>cvjs_mergeQR</command>
		if (commands[i] == "cvjs_customFileLoad"){ cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_pA_5_1", "cvjs_customFileLoad", floorplan_div, "cvjsIcon_dra_p1_5_1_CustomFileLoad.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.FileLoad );   continue;} 
		if (commands[i] == "cvjs_customLayerList") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p5A_2_2", "cvjs_customLayerList", floorplan_div, "cvjsIcon_dra_p5_2_2_CustomLayerList.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.LayerList );   continue;}
		if (commands[i] == "cvjs_downloadAsSVG") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p6_6_1", "cvjs_downloadAsSVG", floorplan_div, "cvjsIcon_dra_p6_2_1_PublishSVG.png", lTable.languages[cvjs_currentLanguage].IconPage_p5_8.DownloadSVG );   continue;}
		if (commands[i] == "cvjs_mergeQR") {cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p6_6_2", "cvjs_mergeQR", floorplan_div, "cvjsIcon_dra_p6_2_1_MergeQR.png", lTable.languages[cvjs_currentLanguage].IconPage_p2_8.MergeWithQR );   continue;}
		
		

		}
	
	if (cvjs_TopIconMenu_maxPageNumber[cvjs_interfaceCounterIndex(floorplan_div)] == 1 && about==false){
		cvjs_insertSingleIconImage(floorplan_div,"topIconMenu_placeholder_1" , "cvjs_p_6_1", "cvjs_displayInformationModal_Mode", 0, "cvjsIcon_dra_p1_6_1_Information.png", lTable.languages[cvjs_currentLanguage].IconPage_p1_8.About );		
	}
	
	
	// 3.3.05c
	if (cvjs_initLoadMenuXML){
		cvjs_initLoadMenuXML = false;
		cvjs_resizeWindow_position(floorplan_div);
	}
	
}	


// INTERACTIVE MENU SYSTEM _ END


/**
 * Connect Text Strings; connects two text strings with a line and arrow
 * @param {string} searchString1 - the first text string to search after
 * @param {int} textInstance1 - if multiple entries of text object, load instance, the first instance is 1
 * @param {string} searchString1 - the second text string to search after
 * @param {int} textInstance1 - if multiple entries of text object, load instance, the first instance is 1
 * @param {int} lengthfactor1 - % value, tells how many percentages line should be shorted at first text
 * @param {int} lengthfactor2 - % value, tells how many percentages line should be shorted at end text
 */


function cvjs_connectTextInstances(textString1, textInstance1, textString2, textInstance2, lengthfactor1, lengthfactor2){

	var xx1 =0;
	var yy1 =0; 
	var xx2 =0;
	var yy2 =0; 
		
	var instance = 0;
	var flag = false;
	jQuery("text").each(function( index ) {

		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString1.toLowerCase())>-1){
				instance ++;
				if (instance == textInstance1){

					xx1 = jQuery( this ).attr('x');
					yy1 = jQuery( this ).attr('y')

					// if we have an SVG with an unknown coordiante system we return directly
					if (cvjs_svgWidthHeight100percent) return;

					// this is an SVG file with a different coordinate system, we translate into the parents coordinate system
					if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
						xx1 = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
						yy1 = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;
					}
					flag = true;
				}
		  }
	});

	
	
	instance = 0;
	flag = false;
	jQuery("text").each(function( index ) {
		  if ( ((jQuery( this ).text()).toLowerCase()).indexOf(textString2.toLowerCase())>-1){
				instance ++;
				if (instance == textInstance2){

					xx2 = jQuery( this ).attr('x');
					yy2 = jQuery( this ).attr('y')

					// if we have an SVG with an unknown coordiante system we return directly
					if (cvjs_svgWidthHeight100percent) return;

					// this is an SVG file with a different coordinate system, we translate into the parents coordinate system
					if (cvjs_svgTransX != "" && cvjs_svgTransX != ""){
						xx2 = (cvjs_svgTransX + Number(xx))*cvjs_svgScale;
						yy2 = (cvjs_svgTransY + Number(yy))*cvjs_svgScale;
					}
					flag = true;
				}
		  }
	});
	
	
console.log(xx1+" "+yy1+"  "+xx2+"  "+yy2);	

	// draw a redline arrow. 
	
	// change the start and end point as part of the straight line
		
	cvjs_redline++;
	cvjs_setCurrentRedlineValues("RED_"+cvjs_redline, "redline"+cvjs_redline, cvjs_redline, "RedLineLayer", "unassigned", cvjs_currentRedline_color, cvjs_currentRedline_strokeWidth, cvjs_currentRotationAngle[cvjs_active_floorplan_div_nr]);
	

/**	
	var mycoordinate = polyPath_redline1.substring(0, polyPath_redline1.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(0, mycoordinate.lastIndexOf("L"));
	//console.log(mycoordinate);
	mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("L")+1);

	if (mycoordinate.indexOf("M")>-1)   // only one line in arrow
		mycoordinate = mycoordinate.substring(mycoordinate.lastIndexOf("M")+1);

	//console.log(mycoordinate);
	var res = mycoordinate.split(",");
**/
//	var xCor = Number(res[0]);
//	var yCor = Number(res[1]);

	var xCor = xx1;
	var yCor = yy1;
	
	var scaleTriangle = cvjs_currentRedline_strokeWidth;

	if (cvjs_currentRedline_strokeWidth>3)
		scaleTriangle = 3 + (cvjs_currentRedline_strokeWidth-3)/2;

	scaleTriangle = scaleTriangle*cvjs_redlineThickness_scaleFactor;

  	var triangle_design= -4.5*scaleTriangle+","+5.5*scaleTriangle+" "+0.5*scaleTriangle+","+-4.5*scaleTriangle+" "+5.5*scaleTriangle+","+5.5*scaleTriangle;

//   var dX = (lastX_poly_redline1-delta_x)/global_scale - xCor;
//	var dY = (lastY_poly_redline1-delta_y)/global_scale - yCor;

	var dX = parseFloat(xx2) - parseFloat(xCor);
	var dY = parseFloat(yy2) - parseFloat(yCor);
	
	
    //console.log(dX+" "+dY);
    var angleInDegrees = ( Math.atan2(dY,dX) / Math.PI * 180.0);

	// new coordinates

	var fullLength = Math.sqrt( dX*dX + dY*dY );
	
//window.alert(lengthfactor/100.0+"  2 angle "+angleInDegrees+"  "+Math.cos(angleInDegrees/180.0*Math.PI));	

	xx1 = parseFloat(xCor)  + parseFloat(Math.cos(angleInDegrees/180.0*Math.PI)*fullLength*lengthfactor1/100.0);
	yy1 = parseFloat(yCor)  + parseFloat(Math.sin(angleInDegrees/180.0*Math.PI)*fullLength*lengthfactor1/100.0);
	
	xx2 = parseFloat(xCor)  +  parseFloat(Math.cos(angleInDegrees/180.0*Math.PI)*fullLength*(1.0-lengthfactor2/100.0));
	yy2 = parseFloat(yCor)  +  parseFloat(Math.sin(angleInDegrees/180.0*Math.PI)*fullLength*(1.0-lengthfactor2/100.0));
	

console.log(triangle_design+" degrees "+angleInDegrees);

//
//	  Triangle.transform('T' + (lastX_poly_redline1-delta_x)/global_scale + "," + (lastY_poly_redline1-delta_y)/global_scale + 'r' + (angleInDegrees - 270));

	  var Ttrans = 'T' + xx2 + "," + yy2 + 'r' + (angleInDegrees - 270);

console.log(Ttrans)

	  var Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	  Triangle.attr({
		fill: cvjs_currentRedline_color,
		transform: Ttrans
	  });

	 polyPath_redline1 = "M " + xx1 +", "+yy1+" L " + xx2 + "," + yy2;

console.log(polyPath_redline1)

	tPolygon_redline1 = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath_redline1).attr({stroke: cvjs_currentRedline_color, "stroke-width": cvjs_currentRedline_strokeWidth*cvjs_redlineThickness_scaleFactor, fill: "#FFF", "fill-opacity": "0.01"});


	 tPolygon_redline1.attr({'path': polyPath_redline1});

	  var Triangle = cvjs_rPaper[cvjs_active_floorplan_div_nr].polyline(triangle_design);
	 
console.log(tPolygon_redline1+"  "+polyPath_redline1);	 

	var triangleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].g( Triangle, tPolygon_redline1 ); // Group polyline

	//console.log(triangleGroup);

//	cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar, tPolygon_redline1);
	cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar, triangleGroup, Ttrans, triangle_design, polyPath_redline1);

	cvjs_graphicalObjectCreated('RedlineArrowPolyline');
	

	  Triangle.attr({
		fill: cvjs_currentRedline_color,
		transform: "M0,09S0"
	  });
	

}








/// NEW - MAKE SPACES ON FLOORPLAN FOR SPACE MANAGEMENT


var spaceInsertion_x = 0;
var spaceInsertion_y = 0;

var spaceLL_x = 0;
var spaceLL_y = 0;
var spaceUL_x = 0;
var spaceUL_y = 0;

var spaceLR_x = 0;
var spaceLR_y = 0;
var spaceUR_x = 0;
var spaceUR_y = 0;




var space_fill_arr = [];
var space_rows = 1000;
var space_columns = 3;
var spaceArrayCounter = 0;



function fill2DimensionsArray(arr, rows, columns){
    for (var i = 0; i < rows; i++) {
        arr.push([0])
        for (var j = 0; j < columns; j++) {
            arr[i][j] = 0;
        }
    }
}


function find_borders(x,y){

	if (x<=spaceLL_x ){spaceLL_x = x; }
	if (y<=spaceLL_y ){spaceLL_y = y; }
	if (x<=spaceUL_x ){spaceUL_x = x; }
	if (y>=spaceUL_y ){spaceUL_y = y; }
	if (x>=spaceUR_x ){spaceUR_x = x; }
	if (y>=spaceUR_y ){spaceUR_y = y; }
	if (x>=spaceLR_x ){spaceLR_x = x; }
	if (y<=spaceLR_y ){spaceLR_y = y; }
}



function getPixel(imageData, x, y) {
  if (x < 0 || y < 0 || x >= imageData.width || y >= imageData.height) {
    return [-1, -1, -1, -1];  // impossible color
  } else {
    const offset = (y * imageData.width + x) * 4;
    return imageData.data.slice(offset, offset + 4);
  }
}

function setPixel(imageData, x, y, color) {
  const offset = (y * imageData.width + x) * 4;
  imageData.data[offset + 0] = color[0];
  imageData.data[offset + 1] = color[1];
  imageData.data[offset + 2] = color[2];
  imageData.data[offset + 3] = color[0];
}

function colorsMatch(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}

// added 
function colorsMatch_3fields(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}

/*
function create_polygon(){

	var cvjs_tempcanvas = jQuery("#tempCanvas").getContext('2d');
	const imageData = ctx.getImageData(0, 0, rows, columns);

	// create polygon
	
	// transform to SVG coordinates
	
	// make XML grammer for DwgMerge process    xdata - altname process
		

}
*/
var cvjs_ctx_helper;


function floodFill(ctx, ctx_helper, x, y, fillColor, borderColor) {


	x = Math.round(x);
	y = Math.round(y);


	spaceInsertion_x = x;
	spaceInsertion_y = y;

	spaceLL_x = spaceInsertion_x;
	spaceLL_y = spaceInsertion_y;
	spaceUL_x = spaceInsertion_x;
	spaceUL_y = spaceInsertion_y;

	spaceLR_x = spaceInsertion_x;
	spaceLR_y = spaceInsertion_y;
	spaceUR_x = spaceInsertion_x;
	spaceUR_y = spaceInsertion_y;


	// read the pixels in the canvas
	const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	const imageData2 = ctx_helper.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
	
	// get the color we're filling
	const targetColor = getPixel(imageData, x, y);
	console.log("First: targetColor "+targetColor[0] +" "+targetColor[1] +" "+targetColor[2] +" "+targetColor[3]+"x="+x+" y="+y);
  
	if ( targetColor[0] == -1) {console.log(" this is not working, return"); return;}
  
  // check we are actually filling a different color
  if (!colorsMatch(targetColor, fillColor)) {
  
    const pixelsToCheck = [x, y];
    while (pixelsToCheck.length > 0) {
      const y = pixelsToCheck.pop();
      const x = pixelsToCheck.pop();
      
      const currentColor = getPixel(imageData, x, y);
      if (colorsMatch(currentColor, targetColor)) {
        setPixel(imageData, x, y, fillColor);
		// find border corners
		find_borders(x,y);
			
        pixelsToCheck.push(x + 1, y);
        pixelsToCheck.push(x - 1, y);
        pixelsToCheck.push(x, y + 1);
        pixelsToCheck.push(x, y - 1);
      }
	  else {  // color is not the target color
			if (!colorsMatch_3fields(currentColor, fillColor)){ // we are at the border ...  or inside .... if not filled with fillColor
				setPixel(imageData2, x, y, borderColor);
				
			}	  
	  }	  
    }
 
 ctx.putImageData(imageData, 0, 0);
    ctx_helper.putImageData(imageData2, 0, 0);
		
  }
}


var cvjs_spaceFloodFill = false;

var cvjs_spacePolygonFillLayer = "layer_PolygonLayer";
//var cvjs_spaceIDLayer = "layer_TextIDLayer";
//var cvjs_spaceIDLayer = "layer_ROOM_TXT";

var cvjs_spaceIDLayer = "None Selected";


var paint_room_id = false;

var canv_width_global =1;
var canv_height_global =1;
var base_adjust=1;


var drawing_aspect_ratio;
var canvas_aspect_ratio;



function cvjs_floodfill(cvjs_ctx, canv_width, canv_height, widthHeightFactorSVG, widthHeightFactorSVGless1){


	// keeping track on insertion point, of room ID and name
	fill2DimensionsArray(space_fill_arr, space_rows, space_columns);


	canv_width_global = canv_width;
	canv_height_global = canv_height;

	jQuery('#tempCanvas_space').height(canv_height);
	jQuery('#tempCanvas_space').width(canv_width);
	cvjs_ctx_helper = jQuery('#tempCanvas_space')[0].getContext('2d');
		
		
	cvjs_ctx_helper.beginPath();
	cvjs_ctx_helper.strokeStyle = "white";
	cvjs_ctx_helper.fillStyle = "white";
	cvjs_ctx_helper.rect(0, 0, canv_width, canv_height);	
	cvjs_ctx_helper.fill();
	
	var x_svg = viewBox[cvjs_active_floorplan_div_nr].X;
	var y_svg = viewBox[cvjs_active_floorplan_div_nr].Y;
	var width_svg_box = viewBoxWidth[cvjs_active_floorplan_div_nr];
	var height_svg_box = viewBoxHeight[cvjs_active_floorplan_div_nr];

	// FILL SPACES	
	// Identify all objects on the System ID Layer
	// Find the insertion point of each object
	// translate that insertion point into flood-fill

	
console.log("BEFORE "+cvjs_spaceIDLayer+"  ");
	
	var sizeWidth = cvjs_ctx.canvas.clientWidth;
	var sizeHeight = cvjs_ctx.canvas.clientHeight;
   
	// ASPECT RATIO AND PLACEMENT OF DRAWING IN CANVAS
	drawing_aspect_ratio =  height_svg_box/width_svg_box;
	canvas_aspect_ratio =  sizeHeight/sizeWidth;
	
	var oArr = {};
	jQuery("."+cvjs_spaceIDLayer).find('[id^=cv_]').each(function() {
		var id = jQuery(this).attr('id');
			try{
				var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
				var svgID = jQuery("#"+id).parents(searchString).attr('id');
				if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr])
					if (!oArr[id]) oArr[id] = true;

			}catch(err) {console.log(err);}
	});

	var flag= true;	
	var flag2= true;	
	var location_x = 0;
	var location_y = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var text = jQuery(target).html();
			var x = jQuery(target).attr('x');
			var y = jQuery(target).attr('y');			

			if (flag){
				space_fill_arr[spaceArrayCounter][0] = x;
				space_fill_arr[spaceArrayCounter][1] = y;
				space_fill_arr[spaceArrayCounter][2] = text;
				spaceArrayCounter++;
				cvjs_floodfillWrapper(x, y, text, canv_width, canv_height, cvjs_ctx, sizeWidth, sizeHeight);
			}

		}	
		catch(err){console.log(err);}						
	}	

  // NEW : second loop over redline text

	for (i=0; i<vqRedlines.length; i++){
	
		console.log("redline "+i)
		if (vqRedlines[i].data("redline_text")!="none"){
			console.log("we have a redline ID! "+vqRedlines[i].data("redline_text"));
			console.log(vqRedlines[i].data("transform"));
			console.log(vqRedlines[i].data("redline_text"));
			
			var coordinates = vqRedlines[i].data("transform").substring(1,vqRedlines[i].data("transform").indexOf("S"));
			
			console.log(coordinates);
			
			space_fill_arr[spaceArrayCounter][0] = Math.floor(coordinates.substring(0,coordinates.indexOf(",")));
			space_fill_arr[spaceArrayCounter][1] = Math.floor(coordinates.substring(coordinates.indexOf(",")+1));
			space_fill_arr[spaceArrayCounter][2] = vqRedlines[i].data("redline_text");
			console.log(space_fill_arr[spaceArrayCounter][0]+" "+space_fill_arr[spaceArrayCounter][1]+" "+space_fill_arr[spaceArrayCounter][2]);
			cvjs_floodfillWrapper( space_fill_arr[spaceArrayCounter][0], space_fill_arr[spaceArrayCounter][1], space_fill_arr[spaceArrayCounter][2], canv_width, canv_height, cvjs_ctx, sizeWidth, sizeHeight);

			spaceArrayCounter++;

		}		
	}

	
	// here we create the second object for outlines only
	
	var imageData2 = cvjs_ctx_helper.getImageData(0, 0, cvjs_ctx_helper.canvas.width, cvjs_ctx_helper.canvas.height);
	// move the contours over to the initial image
	cvjs_ctx.putImageData(imageData2, 0, 0);
		
}


function cvjs_floodfillWrapper(x,y,text, canv_width, canv_height, cvjs_ctx, sizeWidth, sizeHeight){


				var x1 = x - actualLLX[cvjs_active_floorplan_div_nr];				
				var y1 = y - actualLLY[cvjs_active_floorplan_div_nr];
				if (drawing_aspect_ratio<=canvas_aspect_ratio){
//				console.log("HERE HERE HERE drawing_aspect_ratio: "+drawing_aspect_ratio+" canvas_aspect_ratio: "+canvas_aspect_ratio);
				
					location_x = canv_width*(x1/rpWidth[cvjs_active_floorplan_div_nr]);								
	// we make this based on the same scale factor as the determinating direction
					location_y = canv_width*(y1/rpWidth[cvjs_active_floorplan_div_nr]);								
					// The image gets centered in the height direction if the drawing aspect ratio is smaller than the canvas box
					
					// ASPECT RATIO AND PLACEMENT OF DRAWING IN CANVAS
					var canvas_drawing_height_in_aspect = drawing_aspect_ratio*sizeWidth; 					
					var white_spaces = sizeHeight-canvas_drawing_height_in_aspect; 
					base_adjust = white_spaces/2;			   
					
					if (paint_room_id){
						cvjs_ctx_helper.strokeStyle = "green";
						cvjs_ctx_helper.strokeStyle = "blue";
						cvjs_ctx_helper.beginPath();
						cvjs_ctx_helper.arc(Math.round(location_x), Math.round(location_y+base_adjust), 4, 0, 2 * Math.PI);		
						cvjs_ctx_helper.stroke();
					}					
					
					floodFill(cvjs_ctx, cvjs_ctx_helper, Math.round(location_x), Math.round(location_y+base_adjust), [10, 10, 0, 0], [255, 0, 0, 255]);					
				
				}
			   else{
			   // if width adjust of base_adjust needed

//				console.log("222  HERE HERE HERE drawing_aspect_ratio: "+drawing_aspect_ratio+" canvas_aspect_ratio: "+canvas_aspect_ratio);
			   
					location_x = canv_height*(x1/rpHeight[cvjs_active_floorplan_div_nr]);								
	// we make this based on the same scale factor as the determinating direction
					location_y = canv_height*(y1/rpHeight[cvjs_active_floorplan_div_nr]);								

					
					// The image gets centered in the width direction if the drawing aspect ratio is bigger than the canvas box
					
					// ASPECT RATIO AND PLACEMENT OF DRAWING IN CANVAS
					var canvas_drawing_width_in_aspect = sizeHeight/drawing_aspect_ratio; 					
					var white_spaces = sizeWidth-canvas_drawing_width_in_aspect; 
					base_adjust = white_spaces/2.0;  //let us adjust it based on the height/width factor and see what happens
//					base_adjust = white_spaces/2.0/canvas_aspect_ratio;  //let us adjust it based on the height/width factor and see what happens
					
					floodFill(cvjs_ctx, cvjs_ctx_helper, Math.round(location_x+base_adjust), Math.round(location_y), [10, 10, 0, 0], [255, 0, 0, 255]);										
				}

}




function cvjs_pngForSVG(htmlPrintFile){


	// hide the temporary print object, that can be done by setting the print control variable to false
	jQuery('#floorPlanCanvasObject_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();



//window.alert("We got this:"+htmlPrintFile);

	console.log(htmlPrintFile);
	var myfile = htmlPrintFile.substring(htmlPrintFile.lastIndexOf("/")+1);
	console.log(myfile);
	var myoutputfile = myfile.substring(0, myfile.lastIndexOf("."));
	console.log(myoutputfile);
	
	// first make to png	
	var cvjs_phpConvert64Location = cvjs_serverHandlersPath + "convert_base64.php";

	var js_data = {};
	js_data['input_file'] = ServerLocation+"php/"+cvjs_printObjectPath+myfile;
	js_data['output_file'] = ServerLocation+"php/"+cvjs_printObjectPath+myoutputfile;

//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);

		jQuery.ajax({
		  url:cvjs_phpConvert64Location,
		  type: 'post',
		  data: js_data,
		  success: function(html){

			console.log("we have converted to png: "+html);
			// then vectorize
				ImageTracer.imageToSVG(
					cvjs_serverHandlersPath+cvjs_printObjectPath+myoutputfile,
					function(svgstr){ 
						// here we massage the SVG before we append it
						
						// 3.3.02a
						cvjs_serverSavePrintModeController = 0;   // set back to 0
						
//						jQuery("#tempCanvas_space").hide();
						
						var node = 0;
						var cv_id = 100000;						
						var splitSVG = svgstr.split("<path");						
						var splitLength = splitSVG.length;
//						console.log(splitLength);
						
						for (var i=1; i<splitLength; i++){
							if ( splitSVG[i].indexOf("d=\"M 0 0") > -1){
								splitSVG[i] = "<path></path>";  
							}
							else{
								splitSVG[i] = "<path "+ splitSVG[i].substring(0, splitSVG[i].indexOf(" Z")) +" Z \"></path>";
								
								var rgbIndex1 = splitSVG[i].indexOf("rgb(");
								var sub1 = splitSVG[i].substring(0, rgbIndex1+4);
								var sub0 = splitSVG[i].substring(0, rgbIndex1);
								
								var rgbIndex2 = splitSVG[i].indexOf(")",rgbIndex1);
								var sub2 = splitSVG[i].substring(rgbIndex2);
								var sub3 = splitSVG[i].substring(rgbIndex2+2);

								r = 0;
								g = 0;
								b = 0;
								var z = i % 3;
								
								if ( z == 0) r= 255;
								if ( z == 1) g= 255;
								if ( z == 2) b= 255;

// <path fill="rgb(0,255,0)" stroke="rgb(255,0,0)" stroke-width="1" opacity="1" d="M 3116.5 306 L 3178.5 306 L 3197 309.5 L 3196 429.5 L 3197 503.5 L 3192.5 505 L 3190.5 504 L 3136 505 L 3134.5 519 L 3121 527.5 L 3118 542.5 L 3124.5 553 L 3131 556.5 L 3122 562.5 Q 3116.5 567.5 3118 579.5 L 3123 589 L 3136 595.5 L 3134.5 613 Q 3123.5 615.5 3121 609.5 L 3113.5 596 L 3098 589.5 L 3099 416.5 L 3098 309.5 L 3116.5 306 Z "></path>							
// id="cv_1" stroke="rgb(204,204,204)" fill="none" class=" sHB cvjs_handles" cvjs:node='NODE_1' cvjs:handle='BR210' cvjs:area="18053529.22"
								
//								splitSVG[i] = sub1 + "" + r +"," + g+","+b+sub2; 
								cv_id++;
								node++;
								splitSVG[i] = sub0 + "rgb(220,220,220)\" " +  "id=\"cv_"+cv_id+"\" class=\" sHB cvjs_handles\" cvjs:node=\'NODE_"+node+"\' cvjs:handle=\'"+node+"\' cvjs:area=\"not calculated\" " + sub3; 

//								console.log(i+" new path" +splitSVG[i]);
	
								var polyPath = splitSVG[i].substring(splitSVG[i].indexOf(" d=")+4);
								polyPath = polyPath.substring(0, polyPath.lastIndexOf("\""));
//								console.log(polyPath);
								
								// split polygon
								var splitPoly = polyPath.split(" ");								
								var polyLength = splitPoly.length;								
								// now we loop through
								var xvalue = true;
								
								if (true){
									for (j=0; j<polyLength; j++){
									
										 // find a value
										 var temp = splitPoly[j];
										 temp = temp.toString();
										 var vval = parseFloat(temp);
										 //console.log(splitPoly[j]+"  "+temp+"  vval="+vval+"  ");
										 if (!isNaN(vval)){
											// we have a value 
											 if (xvalue){
											 // if xflag we transform as x-coordinates
											 
												if (drawing_aspect_ratio<=canvas_aspect_ratio){
													splitPoly[j] = vval/canv_width_global*rpWidth[cvjs_active_floorplan_div_nr];
												}
												else{
													splitPoly[j] = (vval-base_adjust)/canv_height_global*rpHeight[cvjs_active_floorplan_div_nr];
												}
												
												console.log(vval+" x transform: "+splitPoly[j]+" canv_width_global "+canv_width_global+" rpWidth "+rpWidth[cvjs_active_floorplan_div_nr]);
											 }
											 else{
											 // if !xflag we transform as y-coordinate
												if (drawing_aspect_ratio<=canvas_aspect_ratio){
													splitPoly[j] = (vval-base_adjust)/canv_width_global*rpWidth[cvjs_active_floorplan_div_nr];
												}
												else{
													splitPoly[j] = (vval)/canv_height_global*rpHeight[cvjs_active_floorplan_div_nr];												
												}
											 }
											 xvalue = !xvalue;											 
										 }
									}
																		
									polyPath = "";
									for (j=0; j<polyLength; j++){
										polyPath = polyPath+" "+splitPoly[j];
									}
									
									//console.log("IN i=="+i+" new polyPath ="+polyPath);								
								    //return;
								}
	

								var tPolygon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(polyPath).attr({stroke: "#b00000", fill: "none"});
								
// What is happening here 3.3.02a
// The change of default color of white is controlled in the Handler in data_host_connectors/js/custom_host_parser
								
								tPolygon.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#00ff00', 'stroke-opacity': "0.7"});						
//								tPolygon.attr({fill: '#ff0000', "fill-opacity": "0.9", stroke: '#00ff00', 'stroke-opacity': "0.7"});

								
								cvjs_currentNode_underbar = "NODE_" +i;

								cvjs_currentNode_id = "NODE_"+i;
								cvjs_currentNode_name = "NewSpace_"+i;
								cvjs_currentNode_layer = "SpaceLayer";
								cvjs_currentNode_group = "unassigned";
								cvjs_currentNode_attributes = "unassigned";
								cvjs_currentNode_attributeStatus = "unpopulated";  // 3.2.02b
								cvjs_currentNode_type = "A new Space";
								cvjs_currentNode_tags = "unassigned";
								cvjs_currentNode_tags = "unassigned";
								cvjs_currentNode_linked = true;
								
								console.log("CURRENT NODE: "+cvjs_currentNode_underbar);

								var x_arr = new Array();
								var y_arr = new Array();
								var array_count = 0;
								
								area_vertices = new Array();
								
								for (m=0;m<polyLength; m++){								
									if (splitPoly[m]=="M" || splitPoly[m]=="L" || splitPoly[m]=="Q"){
										x_arr[array_count] = splitPoly[m+1]; 
										y_arr[array_count] = splitPoly[m+2];

										area_vertices[array_count] = new Array();
										area_vertices[array_count] = {x: x_arr[array_count], y: y_arr[array_count]};
										
										array_count++;
									}
								}
								area_vertices[array_count] = new Array();
								area_vertices[array_count] = {x: x_arr[0], y: y_arr[0]};
								array_count++;

/**																
								try{
									cvjs_units[cvjs_active_floorplan_div_nr] = worldUnits.units;
									cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] = worldUnits.svgToWorld;

								}catch (err){

											console.log(err);

								}
**/
								
								console.log("AREA:    "+calcPolygonArea(area_vertices)+"   cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr] "+cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]);
								
								var cvjs_measurementArea = (calcPolygonArea(area_vertices)*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]*cvjs_svgToWorldUnits[cvjs_active_floorplan_div_nr]).toFixed(2);;
								
								// here we have to determine which space we have found								
								for (k=0;k<spaceArrayCounter; k++){
								
									if (isInside(x_arr, y_arr, x_arr.length, space_fill_arr[k][0], space_fill_arr[k][1])){
									    console.log("MATCH polygon "+k+"   "+space_fill_arr[k][2]);
										cvjs_currentNode_id = space_fill_arr[k][2];
										cvjs_currentNode_name = space_fill_arr[k][2];
										 if (cvjs_units[cvjs_active_floorplan_div_nr]=="mm"){ 
											cvjs_currentNode_type = "Space<br>"+((cvjs_measurementArea/1000.0/1000.0).toFixed(2))+" m2";
										 }
										 else if (cvjs_units[cvjs_active_floorplan_div_nr]=="cm"){ 
											cvjs_currentNode_type = "Space<br>"+((cvjs_measurementArea/100.0/100.0).toFixed(2))+" m2";

										 }
										 else
											cvjs_currentNode_type = "Space<br>"+(cvjs_measurementArea).toFixed(2)+" "+cvjs_units[cvjs_active_floorplan_div_nr]+"2";

										k=spaceArrayCounter;
									}
								}
	

								cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, tPolygon);
								cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);


							}
						}
						
						/**** we do not append back in
						
						// glueing back together
						var newSVG = "";
						for (var i=0; i<splitLength; i++){
							newSVG = newSVG + splitSVG[i];
						}
						newSVG = newSVG + "</svg>";
						//console.log("NEW SVG:" +newSVG);
						ImageTracer.appendSVGString( newSVG, 'svgcontainer' ); 

						***/
						
						// let us hide all temp canvas
						
						jQuery("#tempCanvas_space").hide();
						
						
						// let us go back into normal mode
						cvjs_spaceFloodFill = false;
						
						// we do not know about the debug flag ..... //3.3.02a
						printDebugFlag = false;
												

						// let us turn back on Space Layer and Redline ID 						
						cvjs_LayerOn(cvjs_spaceIDLayer);

						// we add back in the ID redlines
						for (i=0; i<vqRedlines.length; i++){
							console.log("redline "+i)
							if (vqRedlines[i].data("redline_text")!="none"){

								var dTransform = vqRedlines[i].data("transform");
								vqRedlines[i].attr({'transform': dTransform, "opacity" : "1"});
							}		
						}
						
						// let us unblock the space
						 // 3.3.02b
						// hide the overlay again and allow interaction
						document.getElementById("cvjs_overlay").style.display = "none";	


						 // 3.3.02b  - we build the custom PopUp
						try{
								custom_host_parser_PopUpMenu()						
						}
						catch(err){console.log(err);}
		
						
						
						cvjs_resetZoomPan("floorPlan");
						
					},
					{ ltres: 4, qtres: 4, scale:1.0, strokewidth:1, roundcoords: 1 }

				);
			
			
			
			
		  },
		  error:function(data_e){console.log("Error "+data_e); return;}

		});
}





/**
 * Add a Pin Marker Space Object  
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - layer of objects (not yet implemented)
 */
  
function cvjs_addPinMarker(floorplan_div, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType);

}


/**
 * Interactively draws a custom wallpaper. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
 
function cvjs_drawSpaceObject_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType) {
		cvjs_addHandleFunc_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType);
}

var cvjs_customSvgImagePath = "";
var cvjs_customSpaceObjectId = "";
var cvjs_customSpaceObjectType = "";
var cvjs_customSpaceObjectName = "";

var cvjs_mouseMoveSVGCustomImage = false;
var cvjs_scaleFactorPin = 2400;


function cvjs_addHandleFunc_PinMarker(spaceObjectId, spaceObjectName, spaceObjectType) {

//	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;


//	console.log("svg canvas"+canvas_width+" "+canvas_height+" "+global_scale);
//	console.log("handle group"+actualLLX[cvjs_active_floorplan_div_nr]+" "+actualLLY[cvjs_active_floorplan_div_nr]+" "+(actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr])+" "+(actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]));
//	console.log("viewBox"+viewBox[cvjs_active_floorplan_div_nr].X+" "+viewBox[cvjs_active_floorplan_div_nr].Y+" "+viewBoxWidth[cvjs_active_floorplan_div_nr]+" "+viewBoxHeight[cvjs_active_floorplan_div_nr]);

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	

	handleGroup.mouseup(stop_cvjs_create_custom_svg_image);
	cvjs_mouseMoveSVGCustomImage = false;
	handleGroup.mousemove(move_cvjs_create_custom_svg_image);

//	handleGroup.drag(move_cvjs_create_custom_svg_image,start_cvjs_create_custom_svg_image,stop_cvjs_create_custom_svg_image);
}


function cvjs_removeHandleFunc_CustomSVGImage() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_custom_svg_image = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

var tTransform_pin = "";


var move_cvjs_create_custom_svg_image = function(e,x,y){

//var move_cvjs_create_custom_svg_image = function(dx,dy,x,y) {


	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	console.log(delta_x+"  "+delta_y);





	x = x+document.body.scrollLeft;  // test - moving click outside of note, cannot make note appear behind handleGroup, therefore translate
	y = y+document.body.scrollTop;   // test 
			
	scaleNote = 1;

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/cvjs_scaleFactorPin;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/cvjs_scaleFactorPin;
	
	
	
//	console.log(" x "+ x+"  x-delta_x "+ (x-delta_x)+"  "+scaleNote+"  "+global_scale);
	

	
	if (cvjs_mouseMoveSVGCustomImage == false){

		cvjs_mouseMoveSVGCustomImage = true;
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M38.55 127.89 c-5.55 -0.44 -10.43 -1.76 -15.30 -4.14 -14.57 -7.12 -23.70 -22.23 -23.22 -38.40 0.19 -6.05 1.52 -11.55 4.06 -16.80 1.09 -2.25 1.83 -3.53 3.31 -5.75 0.65 -0.96 8.56 -13.69 17.60 -28.27 9.03 -14.59 16.46 -26.53 16.50 -26.53 0.04 0 7.47 11.94 16.50 26.52 9.04 14.59 16.95 27.32 17.60 28.28 1.48 2.22 2.22 3.50 3.31 5.75 4.21 8.69 5.20 18.69 2.79 28.21 -2.44 9.58 -8.22 17.95 -16.40 23.71 -6.96 4.91 -15.51 7.59 -24.04 7.52 -0.94 -0.01 -2.16 -0.05 -2.71 -0.10z m6.35 -17.64 c4.40 -0.80 8.13 -2.71 11.20 -5.75 7.69 -7.61 8.25 -19.80 1.30 -28.12 -3.35 -4.02 -8.17 -6.63 -13.44 -7.28 -1.14 -0.14 -3.78 -0.14 -4.92 0 -8.53 1.05 -15.50 7.15 -17.64 15.44 -1.41 5.45 -0.52 11.36 2.43 16.13 3.30 5.31 8.62 8.76 14.97 9.68 1.30 0.19 4.81 0.13 6.10 -0.10z").attr({stroke: "#ff2222", "stroke-width" : "1.0","fill" : "#ff0000"});
	}
	tTransform_pin = "T" + ((x-delta_x)/global_scale - scaleNote*50.0)  + "," + ((y+scaleNote*0*global_scale-delta_y)/global_scale - scaleNote*150.0);
	tTransform_pin += "S"+(scaleNote);               
	tTransform_pin += "R"+(180);               
	
//console.log(tTransform_pin);	
			
	tRubberBand_sn.attr({'transform': tTransform_pin});	

	var text = x+" "+y+" dx="+dx+" dy="+dy;

//	myText.attr({'text': text});

		if (!flag_rectangle){
			firstX_r = x;
			firstY_r = y;
			lastX_r = dx;
			lastY_r = dy;
			flag_rectangle = true;
		}
		else{
			lastX_r = dx;
			lastY_r = dy;

		}

	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");
	tRubberBand_r.attr({'path': tPath_r});

// here we replace with the code from StickyNote scale of objects. 
}

var stop_cvjs_create_custom_svg_image = function() {


	cvjs_removeHandleFunc_CustomSVGImage();

	if (cvjs_mouseMoveSVGCustomImage){

		tTransform_c = "t0,0S"+(scaleNote/100);
		tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
		tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
		
		// 3.1.21j
		tRubberBand_sn.remove();
	}


//	window.alert(tTransform_pin);

	// we scale and draw the custom object   
//	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));
	// make a new icon
	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M38.55 127.89 c-5.55 -0.44 -10.43 -1.76 -15.30 -4.14 -14.57 -7.12 -23.70 -22.23 -23.22 -38.40 0.19 -6.05 1.52 -11.55 4.06 -16.80 1.09 -2.25 1.83 -3.53 3.31 -5.75 0.65 -0.96 8.56 -13.69 17.60 -28.27 9.03 -14.59 16.46 -26.53 16.50 -26.53 0.04 0 7.47 11.94 16.50 26.52 9.04 14.59 16.95 27.32 17.60 28.28 1.48 2.22 2.22 3.50 3.31 5.75 4.21 8.69 5.20 18.69 2.79 28.21 -2.44 9.58 -8.22 17.95 -16.40 23.71 -6.96 4.91 -15.51 7.59 -24.04 7.52 -0.94 -0.01 -2.16 -0.05 -2.71 -0.10z m6.35 -17.64 c4.40 -0.80 8.13 -2.71 11.20 -5.75 7.69 -7.61 8.25 -19.80 1.30 -28.12 -3.35 -4.02 -8.17 -6.63 -13.44 -7.28 -1.14 -0.14 -3.78 -0.14 -4.92 0 -8.53 1.05 -15.50 7.15 -17.64 15.44 -1.41 5.45 -0.52 11.36 2.43 16.13 3.30 5.31 8.62 8.76 14.97 9.68 1.30 0.19 4.81 0.13 6.10 -0.10z").attr({stroke: "#ff0000", "stroke-width" : "1.0","fill" : "#ff2222"});
	icon.attr({'transform': tTransform_pin});
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });
	
	// we finds the extents of the icon	
	// use that as envelope for newPath 
	
	var bbox = icon.getBBox();
	
	
	//if (true) return;
	//window.alert(bbox.x+"  "+bbox.y);
	
	// we have rotated 180 which it does not handle
	
	tPath_r = "M" + bbox.x + "," + bbox.y;
	tPath_r += "h" + bbox.width + "v" + bbox.height +"h"+ -bbox.width +"v"+ -bbox.height+" Z";

//	window.alert(tPath_r);
		
	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});
	newPath.attr({'path': tPath_r});
//	newPath.attr({'transform': tTransform_c});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });


//	if (true) return;
	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
	
	
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
	
//	window.alert(maxId+"  "+cvjs_currentNode_underbar);
	
	
//	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertAfter('#'+ maxId);
	// 3.3.02d
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);

	

	// we do 3.2.02a   - here we make a counter and based on a flag we set the id	
/**	
	cvjs_currentNode_underbar = currentNode_underbar;
	cvjs_currentNode_name = currentNode_name;
	cvjs_currentNode_id = currentNode_id;
	cvjs_currentNode_layer = currentNode_layer;
	cvjs_currentNode_group = currentNode_group;
	cvjs_currentNode_attributes = currentNode_attributes;
	cvjs_currentNode_attributeStatus = currentNode_attributeStatus;
	cvjs_currentNode_type = currentNode_type;
	cvjs_currentNode_tags = currentNode_tags;
	cvjs_currentNode_occupancy = currentNode_occupancy;
	cvjs_currentNode_linked = currentNode_linked;
**/	
	
	

};

// END - Draw Custom Rectangle


var varPunchList=0;
var varPunchListArray = new Array();	
var varPunchList_Populated_Array = new Array();	


function cvjs_PinMarker(){
	
	 varPunchList++;
	 varPunchListArray[varPunchList-1] = "P_"+varPunchList;
	 varPunchList_Populated_Array[varPunchList-1] = false;
	
	//cvjs_supressPopUpModal = true;
	cvjs_supressPopUpModal_callback_JS = true;
//			cvjs_addCustomSpaceObject("floorPlan_svg", ServerUrl+"content_dev/pin_01.svg", "P_"+varPunchList, "PunchList_"+varPunchList, "List Item");
	cvjs_addPinMarker("floorPlan_svg", "P_"+varPunchList, "PunchList_"+varPunchList, "List Item");
		
}


// 3.3.02c    -  cvjs_mergeQR

var cvjs_PercentXFromLowerLeft = 87;
var cvjs_PercentYFromLowerLeft = 15;
var cvjs_widthPercent = 10;
var cvjs_mergeOnOff = false;

// function - set percentages in size


function makeCode (text_element) {		
	qrcode.makeCode(text_element);
}



var waitforQRCodeVar = true;

var waitforCounter = 0;

function waitforQRCode(floorplan_div) {
	
	console.log("In waitforQRCodeVar.. ");

	waitforCounter++;
	
	try{
		var parts = (jQuery("#cvjs_qrcode_"+floorplan_div).html()).split(';base64,');
		var test = parts[1];
		waitforQRCodeVar = false;
	}
	catch(err){
		console.log(err);
		waitforQRCodeVar = true;
	}
	
	if (waitforCounter == 5) waitforQRCodeVar = false;

}	


/**
 * Function to merge a QR into a drawing for download
 * @param {String} floorPlan_div - name of the div that contains CADViewer JS
 */

function cvjs_mergeQR(floorplan_div){


	waitforQRCodeVar = true;

	var floorPlan_Modal = floorplan_div;
	
	if (floorPlan_Modal.indexOf("_svg")==-1)
		floorplan_div = floorPlan_Modal+"_svg";
	

	
	jQuery('#wait_looper_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]).html('<table class=\"waitlooperTable\" width=\"100\" border=\"0\" cellspacing=\"0\" border-spacing=\"0\" ><tr><td><div id=\"looper_image_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\"></div></td></tr><tr><td><div class=\"wait_text_4\" id=\"wait_looper_text_id_'+floorplan_div_Array[cvjs_active_floorplan_div_nr]+'\">'+lTable.languages[cvjs_currentLanguage].WaitModal.MergeDWG+'</div></td></tr></table>');
	cvjs_setLooperPosition();	
	// 4.1.02b
	jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).fadeIn(10);
	
	
	
	qrcode = new QRCode(document.getElementById("cvjs_qrcode_"+floorplan_div), {
		width : 200,
		height : 200
	});
	
		
	cvjs_mergeOnOff = !cvjs_mergeOnOff;
	
	// 3.3.05a
	var noconvertedfile = false
	
	if (cvjs_mergeOnOff){	
				
		if(cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]==""){		
			console.log("Source file not DWG!");
			
			noconvertedfile = true;
			
			// return;
		}			
		
		var random = Math.random().toString().substring(2,5);
		var merge_fileName = cvjs_ServerLocation+"/converters/files/merged/"+'mergeQR_'+random+'.xml';

		var downloadFileName = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];		
		// 3.3.05a
		if (noconvertedfile)			
				downloadFileName = currentLoadedDrawingFullName; 

		
				
		if (downloadFileName.indexOf('/')>-1) 
			downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);
		
		// here we have to make a server call to pick up the QR text code, associated with this file 
		
	
		var cvjs_phpQRLocation = cvjs_serverHandlersPath + cvjs_serverGetQRCodeController; 

		var js_data = {};
		js_data['file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
										
		if (noconvertedfile)			
			js_data['file'] = currentLoadedDrawingFullName; 
		
				
		jQuery.ajax({
		  url:cvjs_phpQRLocation,
		  type: 'post',
		  data: js_data,
		  success: function(qrcode_text){

				var use_as_QR_code_bitmap_flag = false;
				var use_as_QR_code_bitmap_filename = "";
				
				if (cvjs_debug) console.log("this is the code we program into the drawing "+qrcode_text);
								
				//4.1.02d
				if (qrcode_text.indexOf("<no_QR_code_available>")>-1){
					// There is no QR code returned, therefore we make a modal and abort
//					window.alert("NO QR code");
					cvjs_displayInformationModal(floorplan_div_Array[cvjs_active_floorplan_div_nr], lTable.languages[cvjs_currentLanguage].InfoMessageModal.NoQRCode);				
					jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
					cvjs_mergeOnOff = !cvjs_mergeOnOff;
					return true;
				}
				//4.1.02d
								
				if (qrcode_text.indexOf("<use_as_QR_code_bitmap>")>-1){
					
					console.log("QR is the file!!!!");
					
					use_as_QR_code_bitmap_flag = true;				
					use_as_QR_code_bitmap_filname = qrcode_text.substring(0, qrcode_text.indexOf("<use_as_QR_code_bitmap>"));
								
				}
				
				
				// here we do the ajax call to merge the QR code				
				// let us make the merge XML file
							
				// NOTE-NOTE-NOTE !!!!!!   
				// here we make the QR code with the download file-name
				// this has been picked up from Server
				
				jQuery("#cvjs_qrcode_"+floorplan_div).show();
			
				if (cvjs_debug) console.log("before qrcode ");
				makeCode(qrcode_text);				

				if (cvjs_debug) console.log("before body");
				
				// 3.3.04e
				jQuery("body").on('DOMSubtreeModified', "#cvjs_qrcode_"+floorplan_div, function() {
					// code here
					console.log("now QRcode is changed!"+jQuery("#cvjs_qrcode_"+floorplan_div).html());
								
					waitforQRCode(floorplan_div);
					
					// we have to wait for the QR code to be generated 
					if (!waitforQRCodeVar){  // we have a bitmap generated.
						
						// an alternative is an API method to let the user enter the QR test
						
				//		var cvjs_mergeQfilename = cvjs_ServerLocation+"/converters/files/merged/"+"tms_qr.png";
						var cvjs_mergeQfilename = cvjs_ServerLocation+"/converters/files/merged/"+'mergeQR_'+random+'.png';
												
						// 
						if (use_as_QR_code_bitmap_flag == true){
						
							cvjs_mergeQfilename = use_as_QR_code_bitmap_filname;
						}
						
												
				/**		
						<cvjs_RedlinesStickyNotes>
						  <totalRedlines>0</totalRedlines>
						  <totalStickyNotes>0</totalStickyNotes>
						  <totalBitmaps>1</totalBitmaps>
						  <Bitmap>
							<index>0</index>
							<name>QRcode_01</name>
							<layer>cvjs_QRcodeLayer</layer>
							<currentPageName>ModelSpace</currentPageName>
							<filename>"c:\xampp\htdocs\cadviewer_3_3_0\converters\dwgmerge2019\windows\dev\tms_qr.png"</filename>
							<location>
							  <PercentXFromLowerLeft>87</PercentXFromLowerLeft>
							  <PercentYFromLowerLeft>32</PercentYFromLowerLeft>
							  <widthPercent>10</widthPercent>
							</location>
						  </Bitmap>
						</cvjs_RedlinesStickyNotes>		
				**/		
								
						var cvjs_mergeXML = "<cvjs_RedlinesStickyNotes>\n<totalRedlines>0</totalRedlines>\n<totalStickyNotes>0</totalStickyNotes>\n<totalBitmaps>1</totalBitmaps>\n<Bitmap>\n";
						cvjs_mergeXML = cvjs_mergeXML + "<index>0</index>\n<name>QRcode_01</name>\n<layer>cvjs_QRcodeLayer</layer>\n<currentPageName>ModelSpace</currentPageName>\n";
						cvjs_mergeXML = cvjs_mergeXML + "<filename>"+cvjs_mergeQfilename+"</filename>\n";
						cvjs_mergeXML = cvjs_mergeXML +	"<location>\n<PercentXFromLowerLeft>"+cvjs_PercentXFromLowerLeft+"</PercentXFromLowerLeft>\n<PercentYFromLowerLeft>"+cvjs_PercentYFromLowerLeft+"</PercentYFromLowerLeft>\n<widthPercent>"+cvjs_widthPercent+"</widthPercent>\n</location>\n</Bitmap>\n</cvjs_RedlinesStickyNotes>\n";		

						//window.alert(cvjs_mergeXML);
						//console.log(cvjs_mergeXML);		
						//window.alert(cvjs_active_floorplan_div_nr+"  "+cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ]);
						
						var cvjs_phpSaveLocation = cvjs_serverHandlersPath + cvjs_serverSaveFileController;

						var js_data = {};
						js_data['file'] = merge_fileName;
						js_data['file_content'] = cvjs_mergeXML;

						jQuery.ajax({
						  url:cvjs_phpSaveLocation,
						  type: 'post',
						  data: js_data,
						  success: function(html){

								
								var parts = (jQuery("#cvjs_qrcode_"+floorplan_div).html()).split(';base64,');
								var png_base = parts[1].substring(0,parts[1].indexOf('\"')); 				
								jQuery("#cvjs_qrcode_"+floorplan_div).hide();


								// 5.1.03g
								if (use_as_QR_code_bitmap_flag){   // <use_as_QR_code_bitmap>

								
									var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
									var js_data = {};
									js_data['base_file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
									
									if (noconvertedfile)			
										js_data['base_file'] = currentLoadedDrawingFullName; 
									
									js_data['merge_file'] = merge_fileName;
									js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+downloadFileName;
									
									// 4.1.01j  - zip content										
									js_data['zip_output'] = "true";
									js_data['QR_code'] = "true";
									
									
									console.log("base: "+js_data['base_file']+" merge: "+js_data['merge_file']+" out: "+js_data['out_file']);

									// 4.1.01j  - zip content										
									console.log("zip_output: "+js_data['zip_output']+" QR_code: "+js_data['QR_code']);

									var downloadURL ="";
									
									jQuery.ajax({
									  url:cvjs_phpMergeLocation,
									  type: 'post',
									  data: js_data,
									  success: function(html){
										if (cvjs_debug) console.log(html);		

										// 4.1.02c  - standard case 
										downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
										
										if (html.indexOf("<customoutfilename>")>-1){								
											var new_name = html.substring(html.indexOf("<customoutfilename>")+19);  // 4.1.01j
											new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));												
											// 4.1.02a   4.1.02b												
											// we have two cases, call back is http / https , or just filename
											if (new_name.indexOf("http")==0){   // newname = url
												downloadURL = new_name;
												downloadFileName = new_name.substring(new_name.lastIndexOf("/")+1);
											}
											else{  // standard case   new_name = filename
												downloadFileName = new_name;
												downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
											}
											
											if (cvjs_debug) console.log("XXXX"+new_name+"XXX");		
										}
													
										jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
										cvjs_topDownloadButtonPane = true;	
																				
										jQuery("#downloadrow").show();
										jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with QR code</button></a>');   // </div>
										
										jQuery("#downloadbutton").click(function() {
											jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
											cvjs_topDownloadButtonPane = false;		
											// 4.4.01j
											cvjs_gMenu_pos_y -= 50;
											cvjs_resizeWindow_position("floorPlan" );
											cvjs_resizeWindow_position("floorPlan" );
											cvjs_mergeOnOff = false;						
										});

										// 4.4.01j
										cvjs_gMenu_pos_y += 50;
															
										cvjs_resizeWindow_position("floorPlan" );
										cvjs_resizeWindow_position("floorPlan" );
																					
										// 4.1.02b
										jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
										
									  },
									  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
									});		
									
								}
								else{  // Normal QR Code procedure

								
									js_data = {};
									js_data['file'] = cvjs_ServerLocation+"/converters/files/merged/"+'mergeQR_'+random+'.png';
									js_data['file_content'] = png_base;
									js_data['base64'] = 1;

									jQuery.ajax({
									  url:cvjs_phpSaveLocation,
									  type: 'post',
									  data: js_data,
									  success: function(html){
					//						window.alert("bytes saved!");

											var cvjs_phpMergeLocation = cvjs_serverHandlersPath + cvjs_serverMergeDWGController;
											var js_data = {};
											js_data['base_file'] = cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ];
											
											if (noconvertedfile)			
												js_data['base_file'] = currentLoadedDrawingFullName; 
											
											
											js_data['merge_file'] = merge_fileName;
											js_data['out_file'] = cvjs_ServerLocation+"/converters/files/merged/"+downloadFileName;
											
											// 4.1.01j  - zip content										
											js_data['zip_output'] = "true";
											js_data['QR_code'] = "true";
											
											
											console.log("base: "+js_data['base_file']+" merge: "+js_data['merge_file']+" out: "+js_data['out_file']);

											// 4.1.01j  - zip content										
											console.log("zip_output: "+js_data['zip_output']+" QR_code: "+js_data['QR_code']);

											var downloadURL ="";
											
											jQuery.ajax({
											  url:cvjs_phpMergeLocation,
											  type: 'post',
											  data: js_data,
											  success: function(html){
												if (cvjs_debug) console.log(html);		

												// 4.1.02c  - standard case 
												downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
												
																						
												
												if (html.indexOf("<customoutfilename>")>-1){								
													var new_name = html.substring(html.indexOf("<customoutfilename>")+19);  // 4.1.01j
													new_name = new_name.substring(0,new_name.indexOf("</customoutfilename>"));												
													// 4.1.02a   4.1.02b												
													// we have two cases, call back is http / https , or just filename
													if (new_name.indexOf("http")==0){   // newname = url
														downloadURL = new_name;
														downloadFileName = new_name.substring(new_name.lastIndexOf("/")+1);
													}
													else{  // standard case   new_name = filename
														downloadFileName = new_name;
														downloadURL = cvjs_ServerUrl+"/converters/files/merged/"+downloadFileName;
													}
													
													if (cvjs_debug) console.log("XXXX"+new_name+"XXX");		
												}
															
												jQuery("#topDownloadButtonPane"+"_"+floorplan_div).show();	
												cvjs_topDownloadButtonPane = true;	
																						
												jQuery("#downloadrow").show();
												jQuery("#downloadbutton").html('<a href="'+downloadURL+'" download="'+downloadFileName+'"><button class="btn" style="width:70%"><i class="fa fa-download"></i> Download: <i><b>'+downloadFileName+'</b></i> - with QR code</button></a>');   // </div>
												
												jQuery("#downloadbutton").click(function() {
													jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
													cvjs_topDownloadButtonPane = false;		
													// 4.4.01j
													cvjs_gMenu_pos_y -= 50;
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_resizeWindow_position("floorPlan" );
													cvjs_mergeOnOff = false;						
												});

												// 4.4.01j
												cvjs_gMenu_pos_y += 50;
																	
												cvjs_resizeWindow_position("floorPlan" );
												cvjs_resizeWindow_position("floorPlan" );
																							
												// 4.1.02b
												jQuery("#wait_looper_"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).hide();
												
											  },
											  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
											});		

									  },
									  error:function(data_ee){console.log("Error Merge "+data_ee); return;}
									});							
								
								
								
								}
								
								
								
								
								
										
													  
						  },
						  error:function(data_e){console.log("Error Save "+data_e); return;}

						});  
											
					} // end of the div monitor
				
				});
		  },
		  error:function(data_e){console.log("Error Save "+data_e); return;}

		});
	
	
		
	

	
		// when the ajax call is returned, the embedded QR code is done we can do this part				
/*		
				// change link so drawing is removed on download. 				
				var downloadFile = contentStreamData.replace("remainOnServer=1", "remainOnServer=0");
								
				//window.alert(downloadFile);							
				var downloadFileName = 	cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].substring(0, cvjs_loaddrawing_FileNamePath[cvjs_active_floorplan_div_nr ].lastIndexOf(".")+1)+"svg";

				if (downloadFileName.indexOf('/')>-1) 
					downloadFileName = downloadFileName.substring(downloadFileName.lastIndexOf('/')+1);
				
				
				
*/
	
	}
	else{
		jQuery("#topDownloadButtonPane"+"_"+floorplan_div).hide();	
		cvjs_topDownloadButtonPane = false;	
		cvjs_resizeWindow_position("floorPlan" );
		cvjs_resizeWindow_position("floorPlan" );
	}	
}




/**
 * Sets the direct content of the file load modal instead of scanning through a designated folder
 * @param {object} custom_modal_dir_listing - a structure containing filename, url, and path
 * @param {String} floorPlan_div - name of the div that contains the floorplan
 */

function cvjs_CompareFiles_setFileModalContent(custom_modal_dir_listing, floorPlan_div){

		// first we set the variable true;
		cvjs_CompareFiles_CustomFileModalContent_flag = true;
		// then we parse the custom_modal_dir_listing
		// we need to make this, so that the files can be in one path only
		cvjs_CompareFiles_CustomFileModalContent = custom_modal_dir_listing;
		
		
if (cvjs_debug) console.log("cvjs_CompareFiles_setFileModalContent "+cvjs_CompareFiles_CustomFileModalContent_flag+"  "+cvjs_CompareFiles_CustomFileModalContent);		
		
		var arr_length =  custom_modal_dir_listing.length;
		var url = "";
		var serverpath = "";
		
		if (arr_length >0 ){
		
			url = custom_modal_dir_listing[0].url;
			serverpath = custom_modal_dir_listing[0].path;

			url = url.substring(0, url.lastIndexOf("/"));
			serverpath = serverpath.substring(0, serverpath.lastIndexOf("/"));
			
			if (cvjs_debug) console.log(arr_length+"  "+custom_modal_dir_listing[0].url+"  "+custom_modal_dir_listing[0].path);
			if (cvjs_debug) console.log(" url  "+url+" serverpath "+serverpath);
			
			// here we set the file modal path to the location of the manual file settings
			cvjs_setServerFileLocation_AbsolutePaths( serverpath+'/', url+'/',"","");
			
			// in the file load modal, we now have to pass over the content of 
	
		}
}			




// NEW  control of vqrooms as redlines. 

// 3.3.06e

function setUpVqRoomsGeneric(){

	vqBuilding = "BUILDING_NAME_GOES_HERE";		
	var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
	var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));
	
	vqFloor = current_selected_shortname;    //space_objects_01
		
	vqRooms[cvjs_active_floorplan_div_nr] = new Array();
	console.log("before "+cvjs_active_floorplan_div_nr+" called!");		
	buildings = drawPathsGeneric(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_active_floorplan_div_nr, vqRooms, buildings);
	
console.log("length "+vqRooms[cvjs_active_floorplan_div_nr].length)	
console.log("buildings "+buildings.BUILDING_NAME_GOES_HERE.floors.current_selected_shortname)	;
console.log("buildings "+buildings.BUILDING_NAME_GOES_HERE.FacMgr);	

	setUpVqRooms(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_active_floorplan_div_nr);
		
}

var currentSelectedId = -1;

var cvjs_changeSpaceObject_ManualCreationMode = true;

// 3.3.07a
function cvjs_createSpaceOutput_JSfile_Legacy(){
	

	var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
	var building_data_identifier = "BUILDING_NAME_GOES_HERE";
	var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));
	
	var firstpart = cvjs_currentLoadedDrawingAsString.substring(0, cvjs_currentLoadedDrawingAsString.indexOf("var buildings"));
	
	var dataUrl = firstpart+"\n";
	dataUrl = dataUrl +" var buildings = {\n";
	dataUrl = dataUrl +" 	 "+building_data_identifier+": {\n";
	dataUrl = dataUrl +"		name: \""+ building_name + "\",\n";
	dataUrl = dataUrl +"		company: \""+ company+"\",\n";
	dataUrl = dataUrl +"		address: \""+ address+"\",\n";
	dataUrl = dataUrl +"		city: \""+ city +"\",\n";
	dataUrl = dataUrl +"		state: \""+ state +"\",\n";
	dataUrl = dataUrl +"		zipcode: \""+ zipcode +"\",\n";
	dataUrl = dataUrl +"		country: \""+ country +"\",\n";
	dataUrl = dataUrl +"		FacMgr: \""+FacMgr_name+"\",\n";
	dataUrl = dataUrl +"		FacMgr_title: \""+FacMgr_title+"\",\n";
	dataUrl = dataUrl +"		FacMgr_email: \""+FacMgr_email+"\",\n";
	dataUrl = dataUrl +"		FacMgr_phone: \""+FacMgr_phone+"\",\n";
	dataUrl = dataUrl +"		floors: {\n";

	var str_x = current_selected_shortname;
	n_str = "space_"+str_x;    // 2013-04-08, prepend  "space_"
	n_str = n_str.replace(/[\|&;\$%@"<>\(\)\+?#,.]/g, "_");
	n_str = n_str.replace(/ /g,"_");
	n_str = n_str.replace(/-/g,"_");

	vqfloor_name = n_str;
if (cvjs_debug) console.log("vqfloor_name "+vqfloor_name);
	dataUrl = dataUrl +"			"+ vqfloor_name +" : {\n";
	dataUrl = dataUrl +"				name: \""+current_selected_shortname+"\",\n";
	dataUrl = dataUrl +"				file: \""+current_selected_filename+"\",\n";
	dataUrl = dataUrl +"				rooms: {\n";

	// make a loop over all spaces
	// write out the layers what are assocated with spaces
	// write the id, space name

	var comma_flag =0;

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log("file.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			if (comma_flag == 0){
				comma_flag = 1
			}
			else{
				dataUrl = dataUrl +"						,\n";
			}

			dataUrl = dataUrl +"					"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+": {\n";
			dataUrl = dataUrl +"						name: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("name")+"\",\n";

			if (isNaN(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")))
				dataUrl = dataUrl +"						id: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"\",\n";
			else
				dataUrl = dataUrl +"						id: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+",\n";

			dataUrl = dataUrl +"						layer: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer")+"\",\n";
			dataUrl = dataUrl +"						group: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("group")+"\",\n";
			dataUrl = dataUrl +"						occupancy: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy")+"\",\n";
			dataUrl = dataUrl +"						type: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("type")+"\",\n";

			var str_2 = "{ ";
			var ii = 1;
			var c_flag = true;

			while (ii<10) {
				var tag_i = "tag"+ii;
//									if (vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)!="undefined"){
				if ( typeof vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)==='undefined'){
					// do nothing
				}
				else{
					// if the content is "undefined" then get rid of it also
					if (  vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i).toString().indexOf("undefined")==-1){
						if (c_flag){
							str_2 = str_2 +" "+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";
							c_flag=false;
						}
						else
							str_2 = str_2 +" ,"+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";

					}
				}
				ii++;
			}

			str_2 = str_2 +" }";
			dataUrl = dataUrl +"						tags:  "+str_2+", \n";
			dataUrl = dataUrl +"						attributes: [],\n";

			if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == true || vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == false )
				dataUrl = dataUrl +"						linked: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked")+",\n";
			else
				dataUrl = dataUrl +"						linked: false, \n";
			try{ // 3.2.02e							
//									console.log(vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle"));
			
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")){
					dataUrl = dataUrl +"						handle: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"\n";
				}
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=""){
					// if handle is != "", that is, we start with a handle
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")){
					// if handle is different from id, we want to update
					handleUpdates++;
					dataHandleString = dataHandleString +"<updateHandle>\n<handle>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"</handle>\n<altName>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"</altName>\n</updateHandle>\n"
//<cvjsAddXdataToHandle>
//	<totalUpdateHandles>1</totalUpdateHandles>
//	<updateHandle>
//		<handle>2901</handle>
//		<altName>myNewHandle_01</altName>
//	</updateHandle>
//</cvjsAddXdataToHandle>

					}
					
					
				}
				
				
			}catch(err){ console.log(err); }
			
			
			dataUrl = dataUrl +"					}\n";

		} // case node exists
	}

	// finish up the file

	dataUrl = dataUrl +"					}\n";
	dataUrl = dataUrl +"				}\n";
	dataUrl = dataUrl +"			}\n";
	dataUrl = dataUrl +"		}\n";
	dataUrl = dataUrl +"	}\n\n";

	dataUrl = dataUrl +"var vqBuilding = \""+building_data_identifier+"\";\n";
	dataUrl = dataUrl +"var vqFloor = \""+ vqfloor_name +"\";\n";   // n_str -> vqFloor
	dataUrl = dataUrl +"var vqRooms = new Array(); \n";
	dataUrl = dataUrl +"var vqTBorder = new Array(); \n";
	dataUrl = dataUrl +"var vqText = new Array(); \n";
	dataUrl = dataUrl +"var vqURLs = new Array(); \n";
	dataUrl = dataUrl +"function drawPaths (paper){ \n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +"vqRooms.length = 0;\n";
	dataUrl = dataUrl +"vqTBorder.length = 0;\n";
	dataUrl = dataUrl +"vqText.length = 0;\n";
	dataUrl = dataUrl +"vqURLs.length = 0;\n";
	dataUrl = dataUrl +"\n";

	var citem = "uItem";
	spc_counter = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log(" -nodes.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			spc_counter++;
			var item = "uItem"+spc_counter;
			var str_object = vqRooms[cvjs_active_floorplan_div_nr][spc].toString();

			if (str_object.indexOf("path")>-1){
				str_object = str_object.substring(str_object.indexOf("d=")+3);
				str_object = str_object.substring(0, str_object.indexOf('\"'));
				//console.log(str_object);
				dataUrl = dataUrl +"var "+item+"= paper.path(\"";
				dataUrl = dataUrl +str_object+" \")\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
				dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
			}
			else{//v3www
				if (str_object.indexOf("circle")>-1){

					var p_cx = str_object.indexOf(" cx=");
					var s1_cx = str_object.substring(p_cx+5);
					var p2_cx = s1_cx.indexOf("\"");
					cx = s1_cx.substring(0, p2_cx)

					var p_cy = str_object.indexOf(" cy=");
					var s1_cy = str_object.substring(p_cy+5);
					var p2_cy = s1_cy.indexOf("\"");
					cy = s1_cy.substring(0, p2_cy)

					var p_r = str_object.indexOf(" r=");
					var s1_r = str_object.substring(p_r+4);
					var p2_r = s1_r.indexOf("\"");
					r = s1_r.substring(0, p2_r)

					dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
				}
				else{
					
					// 3.1.21g
					if (str_object.indexOf("ellipse")>-1){

						var p_cx = str_object.indexOf(" cx=");
						var s1_cx = str_object.substring(p_cx+5);
						var p2_cx = s1_cx.indexOf("\"");
						cx = s1_cx.substring(0, p2_cx)

						var p_cy = str_object.indexOf(" cy=");
						var s1_cy = str_object.substring(p_cy+5);
						var p2_cy = s1_cy.indexOf("\"");
						cy = s1_cy.substring(0, p2_cy)

						var p_r = str_object.indexOf(" r=");
						var s1_r = str_object.substring(p_r+4);
						var p2_r = s1_r.indexOf("\"");
						r = s1_r.substring(0, p2_r)

						dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
					}
					else
					if (cvjs_debug) console.log("note: not path, not circle, ..save not implemented! "+str_object);
					
					
				}

			}

		}
	}

	if (spc_counter>0) dataUrl = dataUrl +"}\n";

	var lastpart = cvjs_currentLoadedDrawingAsString.substring(cvjs_currentLoadedDrawingAsString.indexOf("var layer_thumb;"));
	dataUrl = dataUrl + lastpart;

	return dataUrl;
	
}






// 3.3.07a
function cvjs_createSpaceOutput_JSfile(){
	

	var current_selected_filename = id_publish_location.substring(id_publish_location.lastIndexOf("/")+1);
	var building_data_identifier = "BUILDING_NAME_GOES_HERE";
	var current_selected_shortname = current_selected_filename.substring(0, current_selected_filename.lastIndexOf("."));
	
	
	// 3.3.07b , we set the current selected filed filename, as the current file name
	

	
	var	dataUrl ="function drawPathsGeneric(paper, cvjs_active_floorplan_div_nr, vqRooms, buildings){ \n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +" var buildings = {\n";
	dataUrl = dataUrl +" 	 "+building_data_identifier+": {\n";
	dataUrl = dataUrl +"		name: \""+ building_name + "\",\n";
	dataUrl = dataUrl +"		company: \""+ company+"\",\n";
	dataUrl = dataUrl +"		address: \""+ address+"\",\n";
	dataUrl = dataUrl +"		city: \""+ city +"\",\n";
	dataUrl = dataUrl +"		state: \""+ state +"\",\n";
	dataUrl = dataUrl +"		zipcode: \""+ zipcode +"\",\n";
	dataUrl = dataUrl +"		country: \""+ country +"\",\n";
	dataUrl = dataUrl +"		FacMgr: \""+FacMgr_name+"\",\n";
	dataUrl = dataUrl +"		FacMgr_title: \""+FacMgr_title+"\",\n";
	dataUrl = dataUrl +"		FacMgr_email: \""+FacMgr_email+"\",\n";
	dataUrl = dataUrl +"		FacMgr_phone: \""+FacMgr_phone+"\",\n";
	dataUrl = dataUrl +"		floors: {\n";

	var str_x = current_selected_shortname;
	n_str = str_x;    // 2013-04-08, prepend  "space_"
//	n_str = "space_"+str_x;    // 2013-04-08, prepend  "space_"
	n_str = n_str.replace(/[\|&;\$%@"<>\(\)\+?#,.]/g, "_");
	n_str = n_str.replace(/ /g,"_");
	n_str = n_str.replace(/-/g,"_");

	vqfloor_name = n_str;
if (cvjs_debug) console.log("vqfloor_name "+vqfloor_name);
	dataUrl = dataUrl +"			"+ vqfloor_name +" : {\n";
	dataUrl = dataUrl +"				name: \""+current_selected_shortname+"\",\n";
	dataUrl = dataUrl +"				file: \""+current_selected_shortname+".js"+"\",\n";
//	dataUrl = dataUrl +"				file: \""+current_selected_filename+"\",\n";
	dataUrl = dataUrl +"				rooms: {\n";

	// make a loop over all spaces
	// write out the layers what are assocated with spaces
	// write the id, space name

	var comma_flag =0;

	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log("file.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			if (comma_flag == 0){
				comma_flag = 1
			}
			else{
				dataUrl = dataUrl +"						,\n";
			}

			dataUrl = dataUrl +"					"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+": {\n";
			dataUrl = dataUrl +"						name: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("name")+"\",\n";

			if (isNaN(vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")))
				dataUrl = dataUrl +"						id: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"\",\n";
			else
				dataUrl = dataUrl +"						id: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+",\n";

			dataUrl = dataUrl +"						layer: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("layer")+"\",\n";
			dataUrl = dataUrl +"						group: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("group")+"\",\n";
			dataUrl = dataUrl +"						occupancy: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("occupancy")+"\",\n";
			dataUrl = dataUrl +"						type: \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("type")+"\",\n";

			var str_2 = "{ ";
			var ii = 1;
			var c_flag = true;

			while (ii<10) {
				var tag_i = "tag"+ii;
//									if (vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)!="undefined"){
				if ( typeof vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)==='undefined'){
					// do nothing
				}
				else{
					// if the content is "undefined" then get rid of it also
					if (  vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i).toString().indexOf("undefined")==-1){
						if (c_flag){
							str_2 = str_2 +" "+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";
							c_flag=false;
						}
						else
							str_2 = str_2 +" ,"+ii+": \""+vqRooms[cvjs_active_floorplan_div_nr][spc].data(tag_i)+"\"";

					}
				}
				ii++;
			}

			str_2 = str_2 +" }";
			dataUrl = dataUrl +"						tags:  "+str_2+", \n";
			dataUrl = dataUrl +"						attributes: [],\n";

			if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == true || vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked") == false )
				dataUrl = dataUrl +"						linked: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("linked")+",\n";
			else
				dataUrl = dataUrl +"						linked: false, \n";
			try{ // 3.2.02e							
//									console.log(vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle"));
			
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")){
					dataUrl = dataUrl +"						handle: "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"\n";
				}
				if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=""){
					// if handle is != "", that is, we start with a handle
					if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")!=vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")){
					// if handle is different from id, we want to update
					handleUpdates++;
					dataHandleString = dataHandleString +"<updateHandle>\n<handle>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("handle")+"</handle>\n<altName>"+vqRooms[cvjs_active_floorplan_div_nr][spc].data("id")+"</altName>\n</updateHandle>\n"
//<cvjsAddXdataToHandle>
//	<totalUpdateHandles>1</totalUpdateHandles>
//	<updateHandle>
//		<handle>2901</handle>
//		<altName>myNewHandle_01</altName>
//	</updateHandle>
//</cvjsAddXdataToHandle>

					}
					
					
				}
				
				
			}catch(err){ console.log(err); }
			
			
			dataUrl = dataUrl +"					}\n";

		} // case node exists
	}

	// finish up the file

	dataUrl = dataUrl +"					}\n";
	dataUrl = dataUrl +"				}\n";
	dataUrl = dataUrl +"			}\n";
	dataUrl = dataUrl +"		}\n";
	dataUrl = dataUrl +"	}\n\n";

	
	dataUrl = dataUrl +"\n";

	
	
	
	var citem = "uItem";
	spc_counter = 0;
	for (spc in vqRooms[cvjs_active_floorplan_div_nr])
	{
		if (vqRooms[cvjs_active_floorplan_div_nr][spc].data("deleted") == true ){
			if (cvjs_debug) console.log(" -nodes.js deleted node "+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node"));
		}
		else{  // node exists

			spc_counter++;
			var item = "uItem"+spc_counter;
			var str_object = vqRooms[cvjs_active_floorplan_div_nr][spc].toString();

			if (str_object.indexOf("path")>-1){
				str_object = str_object.substring(str_object.indexOf("d=")+3);
				str_object = str_object.substring(0, str_object.indexOf('\"'));
				//console.log(str_object);
				dataUrl = dataUrl +"var "+item+"= paper.path(\"";
				dataUrl = dataUrl +str_object+" \")\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
				dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
			}
			else{//v3www
				if (str_object.indexOf("circle")>-1){

					var p_cx = str_object.indexOf(" cx=");
					var s1_cx = str_object.substring(p_cx+5);
					var p2_cx = s1_cx.indexOf("\"");
					cx = s1_cx.substring(0, p2_cx)

					var p_cy = str_object.indexOf(" cy=");
					var s1_cy = str_object.substring(p_cy+5);
					var p2_cy = s1_cy.indexOf("\"");
					cy = s1_cy.substring(0, p2_cy)

					var p_r = str_object.indexOf(" r=");
					var s1_r = str_object.substring(p_r+4);
					var p2_r = s1_r.indexOf("\"");
					r = s1_r.substring(0, p2_r)

					dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
					dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
					dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
				}
				else{
					
					// 3.1.21g
					if (str_object.indexOf("ellipse")>-1){

						var p_cx = str_object.indexOf(" cx=");
						var s1_cx = str_object.substring(p_cx+5);
						var p2_cx = s1_cx.indexOf("\"");
						cx = s1_cx.substring(0, p2_cx)

						var p_cy = str_object.indexOf(" cy=");
						var s1_cy = str_object.substring(p_cy+5);
						var p2_cy = s1_cy.indexOf("\"");
						cy = s1_cy.substring(0, p2_cy)

						var p_r = str_object.indexOf(" r=");
						var s1_r = str_object.substring(p_r+4);
						var p2_r = s1_r.indexOf("\"");
						r = s1_r.substring(0, p2_r)

						dataUrl = dataUrl +"var "+item+"= paper.circle("+cx+","+cy+","+r+","+r+")";
						dataUrl = dataUrl +"\n.data(\"node\",\""+vqRooms[cvjs_active_floorplan_div_nr][spc].data("node")+"\");\n";
						dataUrl = dataUrl +"vqRooms[cvjs_active_floorplan_div_nr].push("+item+");\n\n";
					}
					else
					if (cvjs_debug) console.log("note: not path, not circle, ..save not implemented! "+str_object);
					
					
				}

			}

		}
	}

	//if (spc_counter>0) dataUrl = dataUrl +"}\n";

	dataUrl = dataUrl +"return (buildings);\n";
	dataUrl = dataUrl +"}\n";
	dataUrl = dataUrl +"\n";
	dataUrl = dataUrl +"jQuery(document).ready(function() { \n";
	dataUrl = dataUrl +"	setUpVqRoomsGeneric(); \n";
	dataUrl = dataUrl +"}); \n";
	
	return dataUrl;
}


// 3.3.07a
function cvjs_loadSpaceObjectsUser(floorplan_div){
	
	if (cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr]) return;
	cvjs_interactiveMethod_Active[cvjs_active_floorplan_div_nr] = true;

if (cvjs_debug) 	console.log("cvjs_openRedlineLoadModal ");

	cvjs_fileLoaderRedlineMode = true;

	cvjs_filename_list_status = 3;
	filesonserver = 0;


	if (fileload_offset_flag[cvjs_active_floorplan_div_nr]){
		fileload_offset_flag[cvjs_active_floorplan_div_nr] = false;
		// 3.1.21j .appendTo('body');
		jQuery("#cvjs_serverFileLoadModal").css({position: "fixed"});
		jQuery("#cvjs_serverFileLoadModal").offset({left:150+jQuery('#'+floorplan_div).position().left, top: 50+jQuery('#'+floorplan_div).position().top});
	}


	jQuery('#attention_bitmap').hide();

	jQuery('#SelectFloorPlan').hide();
	jQuery('#SelectFloorPlanPanel').hide();

	jQuery('#SelectFloorPlanEdit').hide();
	jQuery('#SelectFloorPlanPanelEdit').hide();

	jQuery( "#cvjs_cvRoomTextLayersOnLoad").html("");


/*	
					OpenSpaceObjectModal: {
					  	Header: 'CADViewer JS - Open Space Objects',
					  	SpaceObjectFilename: 'SPACE OBJECT / FILENAME',
						EditSpaceObjectInfo: 'Edit Space Object Info',
					},
*/					
	
	
	
	jQuery( "#serverFileModalName" ).html(lTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.Header);
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html(lTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.SpaceObjectFilename);


	jQuery( "#editFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.EditSpaceObjectInfo);
	jQuery( "#infoFloorPlanInfoText" ).html(lTable.languages[cvjs_currentLanguage].OpenSpaceObjectModal.SpaceObjectFilename);

/*
	jQuery( "#serverFileModalName" ).html("CADViewer JS - Open Redline");
	jQuery( "#addFloorPlanTable").hide();
	jQuery( "#addRedlineTable").hide();
	jQuery( "#infoFileModalNameDrawing" ).html("REDLINE / FILENAME");


	jQuery( "#editFloorPlanInfoText" ).html("Edit Redline Info");
	jQuery( "#infoFloorPlanInfoText" ).html("REDLINE / FILENAME");
*/

if (cvjs_debug) console.log("cvjs_openRedlineLoadModal cvjs_loadServerFileList(3)");

 	cvjs_loadServerFileList(3);
	
	
}

// 3.3.07a
var cvjs_spaceObjectsRelativePath = "";
var cvjs_filepathServerSpaceObjects = "";
var cvjs_spaceObjectsAbsolutePathOnly = false;

var cvjs_SpaceObjectUrl = "";

// 3.3.07a
		
/**
 * Sets the absolute path for the space object location, relative path is not used
 * @param {string} path - abslute URL to the space object location
 * @param {string} serverPath - absolute path to the space object location, "/home/cadviewerjs/spaceObjects/"
 */
function cvjs_setSpaceObjectsAbsolutePath(path,serverPath){

	cvjs_spaceObjectsRelativePath = path;
	cvjs_filepathServerSpaceObjects = serverPath;
	cvjs_spaceObjectsAbsolutePathOnly = true;

}
	
// 3.3.07a

/**
 * Sets the name and url of the Space Object file to load, The Space Object file is has the extension .js
 * @param {string} file - String containg url and name of space_object.js file
 */

function cvjs_setSpaceObjectUrl(file){
	
	cvjs_SpaceObjectUrl = file;
}
	


// 3.3.07a

/**
 * Loads Space Object to the location defined through parameter settings
 * @param {String} floorplan_div - div of the CADViewerJS canvas
 */

function cvjs_loadSpaceObjects(floorplan_div){


if (cvjs_debug) console.log("cvjs_loadSpaceObjects");

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}


	if (floorplan_div== undefined)
		cvjs_active_floorplan_div_nr = 0;
	else
		cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);

	if (cvjs_debug) console.log("!!!!!!!!!!!!!!!!!!!!!!!!   cvjs_loadStickyNotesRedlines "+ cvjs_active_floorplan_div_nr+"  "+floorplan_div);


	if (!cvjs_loadRedlinesFileControllerFlag){   // standard load of redlines

		stickynotesRedlines_loaded = false;
		if (current_redline_js_initialized == 0){
			current_redline_js_initialized = 1;
			current_jsRedlinename = cvjs_SpaceObjectUrl;
if (cvjs_debug) 	console.log("before loadJSbase redline "+cvjs_SpaceObjectUrl);
			loadJSbase(cvjs_SpaceObjectUrl);
		}else{
if (cvjs_debug) 	console.log("replace "+current_jsRedlinename+"  "+cvjs_SpaceObjectUrl);
			replacejscssfile(current_jsRedlinename, cvjs_SpaceObjectUrl, "js");
			current_jsRedlinename = cvjs_SpaceObjectUrl;
		}
		cvjs_loadStickyNotesRedlinesTimer();

	}else{

		var cvjs_phpLoadRedlineUrlLocation = cvjs_serverHandlersPath + cvjs_serverLoadFileControllerRedlines;
if (cvjs_debug) 		console.log("brach 2 "+ cvjs_phpLoadRedlineUrlLocation+"  file="+cvjs_SpaceObjectUrl);

		var js_data = {};
		js_data['file'] = cvjs_SpaceObjectUrl;
//console.log(cvjs_phpSaveRedlineUrlLocation+"  "+cvjs_StickyNoteSaveRedlineUrl);
		jQuery.ajax({
		  url:cvjs_phpLoadRedlineUrlLocation,
		  type: 'post',
		  data: js_data,
		  success: function(html){

					var status ="Load redlines: "+html;
					if (cvjs_debug) 		console.log(status);

					cvjs_clearCurrentRedline(floorplan_div_Array[cvjs_active_floorplan_div_nr]);
					cvjs_addInlineScript(html);

					stickynotesRedlines_loaded = true;
					cvjs_loadStickyNotesRedlinesTimer();

					//cvjs_setUpStickyNotesRedlines(cvjs_rPaper[cvjs_active_floorplan_div_nr]);
				},
		 error:function(data_e){console.log("Error "+data_e); return;}
		});

	}

}

// moved from custom_host_parser to make non-server connected Space Objects work
// 3.3.07b
var id_publish_location = cvjs_ServerLocation + "content/SpaceObjects/space_objects_01.js";
var id_datalayer2_name = "Space ID";
var id_main_data_layer = "cvjs_Data_Layer";
var id_main_data_template_type = "Space";

var building_name = "";
var company = "";
var address = "";
var city = "";
var zipcode = "";
var state = "Test1";
var country = "";
var FacMgr_name = "Hello 2!";
var FacMgr_title = "";
var FacMgr_email = "";
var FacMgr_phone = "";



//  3.3.07b  - this is for the creation interface Space Objects
var textLayer1;	     // The text layer for text in rooms
		



		
/**
 * Controls the appearance of pop up modal when space object is clicked
 * @param {boolean} modal_mode - flag to make popup modal disappear , false is default and display, true for supressed
 */

function cvjs_supressPopUpModalMode(modal_mode){


	cvjs_supressPopUpModal = modal_mode;

}	


// 5.1.04d

/**
 * Add a Fixed Size Space Object Custom Rectangle at coordinates x, y
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - layer of objects (not yet implemented)
 * @param {int} xcor - x coordinate in SVG coordinates
 * @param {int} ycor - y coordinate in SVG coordinates
 */
  
function cvjs_addFixedSizeCustomSpaceObjectXY(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer, xcor, ycor){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_FixedSizeXY(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, xcor, ycor);

}







/**
 * Add a Fixed Size Space Object Custom Rectangle
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {string} svgImagePath - name of path containing wallpaper object
 * @param {string} spaceObjectId - Unique ID of the space object. NOTE!
 * @param {string} spaceObjectName - Name of the space object.
 * @param {string} spaceObjectType - Type of the object
 * @param {string} layer - layer of objects (not yet implemented)
 */
  
function cvjs_addFixedSizeCustomSpaceObject(floorplan_div, svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, spaceObjectLayer){

	// 3.2.02b
	
	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	



	cvjs_hidePop();
	Node_id = cvjs_currentMaxNodeId();
	//console.log("xurrent Node_id="+Node_id);

	Node_id++;
	currentNode_underbar = Node_underbar+Node_id;
	currentNode_id = spaceObjectId;
	currentNode_name = spaceObjectName;
	currentNode_layer = spaceObjectLayer;
	currentNode_group = "none";
	currentNode_attributes = "none";
	currentNode_attributeStatus = "unpopulated";
	currentNode_type = spaceObjectType;
	currentNode_tags = "unassigned";
	currentNode_linked = false;
	
	cvjs_setCurrentNodeValues(currentNode_underbar, currentNode_name, currentNode_id, currentNode_layer, currentNode_group, currentNode_attributes, currentNode_attributeStatus, currentNode_type, currentNode_tags, currentNode_tags, currentNode_linked);
	cvjs_addHandleFunc_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);

}



/**
 * Draws a fixed size space and add a custom wallpaper. The data object of the rectangle is defined as a Space Object. Prior to calling this method, cvjs_setCurrentSpaceObjectNodeValues() should be called.
 */
function cvjs_drawSpaceObject_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {
		cvjs_addHandleFunc_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType);
}

var cvjs_customSvgImagePath = "";
var cvjs_customSpaceObjectId = "";
var cvjs_customSpaceObjectType = "";
var cvjs_customSpaceObjectName = "";


// 5.1.04d  - insertion of a custom image object, at coordinates x,y
function cvjs_addHandleFunc_FixedSizeXY(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType, xcor, ycor) {

	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});
	
//	handleGroup.mousedown(mousedown_imagelink);
//	handleGroup.mousedown(stop_cvjs_create_fixed_rectangle);
	mouseMoveStickyNote = false;
//	handleGroup.mousemove(move_cvjs_create_fixed_rectangle);	


	stop_cvjs_create_fixed_rectangle_XY(xcor, ycor);		
}


///// 5.1.04d

function stop_cvjs_create_fixed_rectangle_XY(xcor, ycor) {

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

//	tTransform_c = "t0,0S"+(scaleNote/100);
//	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
//	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
//	tRubberBand_sn.remove();  // 3.1.21j
	
//	x = x+document.body.scrollLeft;
//	y = y+document.body.scrollTop;

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	cvjs_removeHandleFunc_FixedRectangle();

//	firstX_r = x;
//	firstY_r = y;
	
	console.log("scaleNotescaleNotescaleNote "+scaleNote);
	
	lastX_r = scaleNote*20.0*global_scale ;
	lastY_r = scaleNote*20.0*global_scale ;

	tPath_r = "M" + xcor + "," + ycor;
//	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;

	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");

if (cvjs_debug) console.log(tPath_r);
	
	// we scale and draw the custom object   
//	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));

	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, xcor, ycor, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));

	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	newPath.attr({'path': tPath_r});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });
	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
		
		
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
		
	// 3.3.02d
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);
	
};
// END - Draw Custom Rectangle

///// 4.1.04d










function cvjs_addHandleFunc_FixedSize(svgImagePath, spaceObjectId, spaceObjectName, spaceObjectType) {

	cvjs_customSvgImagePath = svgImagePath;
	cvjs_customSpaceObjectId = spaceObjectId;
	cvjs_customSpaceObjectType = spaceObjectType;
	cvjs_customSpaceObjectName = spaceObjectName;
	
//window.alert("cvjs_svgImagePath" +cvjs_svgImagePath);	

	tPath_r = "M" + firstX_r + "," + firstY_r;
	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

		
	
//	handleGroup.mousedown(mousedown_imagelink);
	handleGroup.mousedown(stop_cvjs_create_fixed_rectangle);
	mouseMoveStickyNote = false;
	handleGroup.mousemove(move_cvjs_create_fixed_rectangle);	
	
}


function cvjs_removeHandleFunc_FixedRectangle() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_create_fixed_rectangle = function() {

	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}


var move_cvjs_create_fixed_rectangle = function(e,x,y) {

	if (mouseMoveStickyNote == false){
		tRubberBand_sn = cvjs_rPaper[cvjs_active_floorplan_div_nr].group(cvjs_rPaper[cvjs_active_floorplan_div_nr].path("M0.01,0.01h20v20h-20v-20Z").attr({stroke: "#000000", "stroke-width" : "1.0","fill" : "none"}))   ;
		mouseMoveStickyNote = true;
	}
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	// 3.1.21k
	var scaleNote = 1;
	var scaleFactorNotes = 600; //300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	
	tTransform_c = "T" + ((x-delta_x)/global_scale + scaleNote*10.0)  + "," + ((y-delta_y)/global_scale + (scaleNote*10.0));			
	tTransform_c += "S"+(scaleNote);
	tRubberBand_sn.attr({'transform': tTransform_c});

}



var stop_cvjs_create_fixed_rectangle = function(e,x,y) {

	var floorplan_div = floorplan_div_Array[cvjs_active_floorplan_div_nr];

	tTransform_c = "t0,0S"+(scaleNote/100);
	tRubberBand_sn.attr({'transform': tTransform_c , "opacity" : "0.0"});
	tRubberBand_sn.attr({fill: 'none', "fill-opacity": "0.0", stroke: '#000', 'stroke-opacity': "0.0" });
	tRubberBand_sn.remove();  // 3.1.21j
	
	x = x+document.body.scrollLeft;
	y = y+document.body.scrollTop;

	var scaleNote = 1;
	var scaleFactorNotes = 600; // 300

	 if ( (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])> (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr]))
	 	scaleNote = (actualURY[cvjs_active_floorplan_div_nr] - actualLLY[cvjs_active_floorplan_div_nr])/scaleFactorNotes;
	 else
	 	scaleNote = (actualURX[cvjs_active_floorplan_div_nr] - actualLLX[cvjs_active_floorplan_div_nr])/scaleFactorNotes;

	cvjs_removeHandleFunc_FixedRectangle();

	firstX_r = x;
	firstY_r = y;
	
	
	lastX_r = scaleNote*20.0*global_scale ;
	lastY_r = scaleNote*20.0*global_scale ;


	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");

	if (cvjs_debug) console.log("scaleNotescaleNotescaleNote "+scaleNote+"  "+tPath_r);
	
	
	// we scale and draw the custom object   
	var icon = cvjs_rPaper[cvjs_active_floorplan_div_nr].image(cvjs_customSvgImagePath, (firstX_r-delta_x)/global_scale, (firstY_r-delta_y)/global_scale, Math.abs((lastX_r)/global_scale), Math.abs((lastY_r)/global_scale));
	var newPath = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});

	newPath.attr({'path': tPath_r});
	newPath.attr({fill: '#ff9999', "fill-opacity": "0.5", stroke: '#ff9999', 'stroke-opacity': "1"});

	newPath.attr({'id': 'cv_'+cvjs_currentNode_underbar, 'cvjs:node': cvjs_currentNode_underbar, 'cvjs:roomId': cvjs_customSpaceObjectId, 'cvjs:name': cvjs_customSpaceObjectName, 'class': 'cvjs_nodes', 'cvjs:type' : cvjs_customSpaceObjectType });
	icon.attr({'id': 'cv_'+cvjs_currentNode_underbar+'_image' });

	
	cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar, newPath);
	cvjs_setUpVqRooms_currentNode(cvjs_rPaper[cvjs_active_floorplan_div_nr], cvjs_currentNode_underbar);
	cvjs_graphicalObjectCreated('Rectangle');
	
	// 3.2.02b  - find the highest cv_ in the drawing, and insert the image behind that.
	
	
//	window.alert("floorplan_div"+floorplan_div_Array[cvjs_active_floorplan_div_nr]);
	var oArr = {};
	jQuery("*[id]").each(function() {
		try{
			var id = jQuery(this).attr('id');
//			var searchString = "[id^="+floorplan_div+"]";
			var searchString = "[id^="+floorplan_div_Array[cvjs_active_floorplan_div_nr]+"]";
			var svgID = jQuery("#"+id).parents(searchString).attr('id');
			
			if (svgID == floorplan_div_Array[cvjs_active_floorplan_div_nr]){
			   if (!oArr[id]) oArr[id] = true;
			}
		}
		catch (err) { 
		 	console.log(err+" XX"+id+"XX");
		}
	});
	
	var maxId = 0;
	
	for (var prop in oArr){
		try{
			var target = "#"+prop;
			var myID = jQuery(target).attr("id");
			if (myID.indexOf("cv_")==0  && myID.indexOf("cv_NODE")!=0){

// 3.3.02d    we strip off the 
			  var onlyvalue = 0;
			  if (myID.indexOf("cv_")==0) onlyvalue = myID.substring(3);
			  
			  var value = parseInt(onlyvalue);

				 //3.3.02d
//				if (jQuery(target).attr("id") > maxId){
				if (value> maxId){
					maxId = value; 
//					maxId = jQuery(target).attr("id"); 
//					console.log(maxId);
// 

				}			
			}
		}
		catch (err) { 
			console.log(err+" XX"+id+"XX");
		}
	};
	maxId = "cv_" + maxId;
		
	// 3.3.02d
	jQuery('#cv_'+cvjs_currentNode_underbar+'_image').insertBefore('#cv_'+cvjs_currentNode_underbar);

	
};
// END - Draw Custom Rectangle




// 4.1.02e
/**
 * Delete a Space Image Object
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */  	

function cvjs_deleteSpaceImageObject(floorplan_div){

// 4.1.02e

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

		// check if space edit mode is on
	
		
	if (cvjs_changeSpaceObject_ManualCreationMode){
		cluster_host_flag = 1;
				
		cvjs_supressPopUpModal = true;	
		cvjs_creationInputType = 2;

		cvjs_setCreationMode(cvjs_supressPopUpModal);
		
		hideOnlyPop();
		cvjs_clearDrawing();
	}
	
		icon_command_active = 33;
}



// 4.1.02e
/**
 * Resize a Space Image Object
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */  	

function cvjs_resizeSpaceImageObject(floorplan_div){

	// 4.1.02e

	// 3.0.15c   - add "_svg" to div, if called through external API
	if (floorplan_div.lastIndexOf("_svg") == floorplan_div.length-4){
			// do nothing
	}
	else{
		floorplan_div = floorplan_div + "_svg";
	}

	cvjs_active_floorplan_div_nr = cvjs_rPaperIndex(floorplan_div);	

	// check if space edit mode is on
		
	if (cvjs_changeSpaceObject_ManualCreationMode){
		cluster_host_flag = 1;
				
		cvjs_supressPopUpModal = true;	
		cvjs_creationInputType = 2;

		cvjs_setCreationMode(cvjs_supressPopUpModal);
		
		hideOnlyPop();
		cvjs_clearDrawing();
	}
		icon_command_active = 34;
}




// 4.1.02g

var resize_node  = "";
var resize_rmid  = "";
var resize_image_height = 0;
var resize_image_width = 0;
var resize_image_x = 0;
var resize_image_y = 0;
var resize_path_d = "";

var resize_color_layer; 
var resize_fplan = "";


function cvjs_addHandleFunc_ResizeImageSpace(node, rmid, image_height, image_width, image_x, image_y, path_d) {

	resize_node  = node;
	resize_rmid  = rmid;
	resize_image_height = image_height;
	resize_image_width = image_width;
	resize_image_x = image_x;
	resize_image_y = image_y;
	resize_path_d = path_d;


	resize_fplan = floorplan_div_Array[cvjs_active_floorplan_div_nr];
	
	if (resize_fplan.lastIndexOf("_svg") == resize_fplan.length-4)
	{ 
		resize_fplan = resize_fplan.substring(0, resize_fplan.length-4);
	} 
 
 //window.alert(fplan);
 
	resize_color_layer = cvjs_clearLayer(resize_color_layer);
	cvjs_highlightSpaceObjectIdDiv(resize_rmid, highlight_colorgrade_A_5 , resize_color_layer, resize_fplan);

	//myText = cvjs_rPaper[cvjs_active_floorplan_div_nr].text(40,90, '');

	canvas_width = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).width();
	canvas_height = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).height();

	var position = jQuery("#"+floorplan_div_Array[cvjs_active_floorplan_div_nr]).position();

	global_scale_X = canvas_width/viewBoxWidth[cvjs_active_floorplan_div_nr];
	global_scale_Y = canvas_height/viewBoxHeight[cvjs_active_floorplan_div_nr];

	if (global_scale_X<global_scale_Y)
		global_scale = global_scale_X;
	else
		global_scale = global_scale_Y;

	delta_x = (canvas_width - viewBoxWidth[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].X*global_scale + position.left;
	delta_y = (canvas_height - viewBoxHeight[cvjs_active_floorplan_div_nr]*global_scale)/2 -viewBox[cvjs_active_floorplan_div_nr].Y*global_scale + position.top;

	
	
	lastY_r = image_height;
	lastX_r = image_width;
	firstX_r = image_x;
	firstY_r = image_y;
	
	tPath_r = "M" + image_x + "," + image_y;
	tPath_r += "h" + image_width + "v" + image_height+"h"+(-image_width)+"v"+(-image_height)+" Z";

//	tPath_r = "M" + (firstX_r-delta_x)/global_scale + "," + (firstY_r-delta_y)/global_scale;
//	tPath_r += "h" + lastX_r/global_scale + "v" + lastY_r/global_scale+"h"+(-lastX_r/global_scale)+"v"+(-lastY_r/global_scale+" Z");

	tRubberBand_r = cvjs_rPaper[cvjs_active_floorplan_div_nr].path(tPath_r).attr({stroke: "#b00000", fill : "none"});	
	handleGroup = cvjs_rPaper[cvjs_active_floorplan_div_nr].rect(actualLLX[cvjs_active_floorplan_div_nr],actualLLY[cvjs_active_floorplan_div_nr], actualURX[cvjs_active_floorplan_div_nr]-actualLLX[cvjs_active_floorplan_div_nr], actualURY[cvjs_active_floorplan_div_nr]-actualLLY[cvjs_active_floorplan_div_nr]).attr({fill: "#fff", "fill-opacity":"0.01"});

	// we scale up the handleGroup for paint operations		
	var Ttrans_hG = "T0,0S5.0";
	//var my_color = "#FF0000";		
	handleGroup.attr({
	//	'fill-opacity': 0.8,
	//	 fill: my_color,
		 transform: Ttrans_hG
	});

	
console.log("BASE "+tPath_r+"  BASE ");	
	
		
	handleGroup.drag(move_cvjs_resize_custom_image_rectangle,start_cvjs_resize_custom_image_rectangle,stop_cvjs_resize_custom_image_rectangle);
	
	//handleGroup.mousemove(move_cvjs_resize_custom_image_rectangle);
	//handleGroup.mouseup(stop_cvjs_resize_custom_image_rectangle);	
	
	
}


function cvjs_removeHandleFunc_ResizeImageSpace() {
	handleGroup.selectAll('handler').remove();
	handleGroup.remove();
	//console.log("handler removed");
}


var start_cvjs_resize_custom_image_rectangle = function() {

//	flag_rectangle= false;
	tRubberBand_r.attr({stroke: "#b00000", fill : "none"});
}

//var move_cvjs_resize_custom_image_rectangle = function(e,x,y) {
var move_cvjs_resize_custom_image_rectangle = function(dx,dy,x,y) {

	var text = x+" "+y;//+" dx="+dx+" dy="+dy;

//	console.log(text);
	
	tPath_r = "M" + resize_image_x + "," + resize_image_y;
	var d1 = (+resize_image_width)+(dx/global_scale);
	var d2 = (+resize_image_height)+(dy/global_scale);
	var d3 = -d1;
	var d4 = -d2;	
	tPath_r += "h" + d1 + "v" + d2 +"h"+ d3 +"v"+d4 +" Z";

	var image_id = "#cv_"+resize_node+"_image";
	var path_id = "#cv_"+resize_node;

	try{

		if (d1>0) jQuery( image_id ).attr("width", d1); 
		if( d2>0) jQuery( image_id ).attr("height", d2); 		
		jQuery( path_id ).attr("d", tPath_r);

	}
	catch(err){}
//console.log(tPath_r);	

	tRubberBand_r.attr({'path': tPath_r});

	resize_color_layer = cvjs_clearLayer(resize_color_layer);
	cvjs_highlightSpaceObjectIdDiv(resize_rmid, highlight_colorgrade_A_5 , resize_color_layer, resize_fplan);
		
}

var stop_cvjs_resize_custom_image_rectangle = function() {


/**  default color for standard Space Object selection mode  - not selected   */
	defaultColor = {
            fill: '#FFF',
            "fill-opacity": "0.1",
            stroke: '#CCC',
            'stroke-width': 1,
            'stroke-linejoin': 'round',
        };
/**  default color for standard Space Object selection mode  - highlighted   */
	highlight = {
            fill: '#a4d7f4',
            "fill-opacity": "0.5",
            stroke: '#a4d7f4',
            'stroke-width': 3
        };
/**  default color for standard Space Object selection mode  - selrcted   */
	selectColor = {
            fill: '#5BBEF6',
            "fill-opacity": "0.5",
            stroke: '#5BBEF6',
            'stroke-width': 3
        };



	// 3.2.02b
	tRubberBand_r.remove();

	cvjs_removeHandleFunc_ResizeImageSpace();	
	resize_color_layer = cvjs_clearLayer(resize_color_layer);

	// rebuild all vqArrays
	
	// make standard mode again
	cvjs_supressPopUpModal = false;	
	cvjs_creationMode = false;
	cvjs_standardHighLightColors = true;


	for (var room in vqRooms[cvjs_active_floorplan_div_nr]){

		var htitle = "<table width=\"100%\"><tr><td class=\"cvjs_modal_header_1\" onclick=\"cvjs_popupTitleClick(\'"+vqRooms[cvjs_active_floorplan_div_nr][room].data("id")+"\');\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("name")+"</td>"+
			"<td class=\"cvjs_modal_header_info_1\" onclick=\"hideOnlyPop("+room+");\"><i class=\"glyphicon glyphicon-remove\"></i></td></tr>"+
			"<tr><td cols=\"2\"><h4 id=\"cvjs_modal_header_info_2\">"+vqRooms[cvjs_active_floorplan_div_nr][room].data("type")+"</h4></td></tr></table>";

	//console.log("dual_hbody_flag "+dual_hbody_flag+"  floor.rooms[bRoom].id   "+floor.rooms[bRoom].id);

		if (dual_hbody_flag){
			if ( parseInt(cvjs_currentNode_id) >=-1){
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'false'});
			}else{
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody_2, title: htitle},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'}, //   my: 'bottom center', at: 'top center'
					hideOnHTMLClick: 'false'});
			}
		}

		if (!dual_hbody_flag){
				jQuery(vqRooms[cvjs_active_floorplan_div_nr][room].node).qtip({content: {text: hbody, title: htitle},
					style: {classes: 'qtip-bootstrap qtip-shadow qtip-rounded qtip-zindex'},
					position: {my: 'bottom center', at: 'top left'},
					hideOnHTMLClick: 'false'});
		}
			
	}
	
	hideOnlyPop();
	cvjs_clearDrawing();

};
// END - Draw Custom Rectangle


// 5.1.04d 
/**
 * Add a Fixed Size Image Space Object with
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {int} xcor - x coordinate in SVG coordinates
 * @param {int} ycor - y coordinate in SVG coordinates
 
 */
  
function cvjs_addFixedSizeImageSpaceObjectXY(floorplan_div, xcor, ycor){

	cvjs_loadSpaceImage_UserConfiguration(floorplan_div);
	cvjs_addFixedSizeCustomSpaceObjectXY(floorplan_div, cvjs_loadSpaceImage_Location, cvjs_loadSpaceImage_ID , cvjs_loadSpaceImage_ID, cvjs_loadSpaceImage_Type, "", xcor, ycor);

}




// 4.1.02i
/**
 * Add a Fixed Size Image Space Object with
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
  
function cvjs_addFixedSizeImageSpaceObject(floorplan_div){

	cvjs_loadSpaceImage_UserConfiguration(floorplan_div);
	cvjs_addFixedSizeCustomSpaceObject(floorplan_div, cvjs_loadSpaceImage_Location, cvjs_loadSpaceImage_ID , cvjs_loadSpaceImage_ID, cvjs_loadSpaceImage_Type, "");

}


// 4.1.02i
/**
 * Add a Drag Size Size Image Space Object
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 */
  
function cvjs_addDragRectangleImageSpaceObject(floorplan_div){

	cvjs_loadSpaceImage_UserConfiguration(floorplan_div);
	cvjs_addRectangleCustomSpaceObject(floorplan_div, cvjs_loadSpaceImage_Location, cvjs_loadSpaceImage_ID , cvjs_loadSpaceImage_ID, cvjs_loadSpaceImage_Type, "");

}



// 5.1.04a

var cvjs_zeroWidthHandling = false;
var cvjs_zeroWidthHandling_viewBoxWidth = 0; 
var cvjs_zeroWidthHandling_viewBoxHeight = 0; 
var cvjs_zeroWidthHandlingArr = {};
var cvjs_zeroWidthScaleFactor = 1.0; 


/**
 * Init ZW class handling, automated Zoom and adjustment of zerowidth
 * @param {string} floorplan_div - name of div containing CADViewer JS canvas
 * @param {int}    scale_factor - scale factor on zero width lines when zooming
 */

function cvjs_initZeroWidthHandling(floorplan_div, scale_factor){
 
// 5.1.04a
			cvjs_zeroWidthHandling = true;
			
			cvjs_zeroWidthScaleFactor = scale_factor;

// calculate the viewbox size

		//window.alert(viewBox[cvjs_active_floorplan_div_nr].X +"  "+ viewBox[cvjs_active_floorplan_div_nr].Y +"  "+ viewBoxWidth[cvjs_active_floorplan_div_nr] +"  "+ 	viewBoxHeight[cvjs_active_floorplan_div_nr]);
			
			cvjs_zeroWidthHandling_viewBoxWidth = viewBoxWidth[cvjs_active_floorplan_div_nr];
			cvjs_zeroWidthHandling_viewBoxHeight = viewBoxHeight[cvjs_active_floorplan_div_nr];
			
			cvjs_MinWidthSVG = 1;
			reference_thickness = cvjs_MinWidthSVG;
			cvjs_svgLineThickness = true;

var cc=0;			
		   cvjs_SVGLineThicknessArray = {}
		   cvjs_zeroWidthHandlingArr = {}
		   //var oArr = {};
		// 5.1.04a    - we are adding selector to find ZW class
		   jQuery("*[id] .ZW").each(function() {
//		   jQuery("*[id]").each(function() {
			   var id = jQuery(this).attr('id');
			   cc++;
			   if (!cvjs_zeroWidthHandlingArr[id]) cvjs_zeroWidthHandlingArr[id] = true;
//			   if (!oArr[id]) oArr[id] = true;
		   });

if (cvjs_debug) console.log("cvjs_initZeroWidthHandling = "+cc);		 
		 
		   for (var prop in cvjs_zeroWidthHandlingArr){
				try{
					var target = "#"+prop;
					//console.log(target+" parent id"+jQuery(target).parent().attr("id"));

					if (jQuery(target).parent().attr("id").indexOf("layer_")==0 || jQuery(target).parent().attr("id").indexOf("Layer_")==0){
						//console.log("FIRST THICKNESS target with Layer/layour parent "+target);
						var valWidth = jQuery(target).css("stroke-width");
						//console.log(valWidth);

						if (valWidth.indexOf("px")>-1) {
							valWidth = valWidth.substring(0,valWidth.indexOf("px"));
							valWidth = parseFloat(valWidth);
						}
						cvjs_SVGLineThicknessArray[prop] = valWidth
					}
				}catch(err){}
			}
		
// 5.1.04c   - we redraw if zoom factor is different from 1.0		
if (scale_factor == 1.0) {}
else
	cvjs_resetZoomPan(floorplan_div);
	
		
}

// 5.1.04a
 function cvjs_zoomZeroWidth(){
	 
	if (!cvjs_zeroWidthHandling) return;   // return if no ZW handling

	// 1: zoomWindow 
	var currentZW_zoomFactor = viewBoxWidth[cvjs_active_floorplan_div_nr]/ cvjs_zeroWidthHandling_viewBoxWidth;
		
		
	if (cvjs_debug) console.log("cvjs_zoomZeroWidth  zoomFactor "+currentZW_zoomFactor) 
			
	   for (var prop in cvjs_zeroWidthHandlingArr){

		try{
			var target = "#"+prop;

			//console.log(target+" parent id"+jQuery(target).parent().attr("id"));
			
			if (jQuery(target).parent().attr("id").indexOf("layer_")==0 || jQuery(target).parent().attr("id").indexOf("Layer_")==0){
				//console.log("target with Layer/layour parent "+target);
				var valWidth = jQuery(target).css("stroke-width");
				//console.log(valWidth);

				if (valWidth.indexOf("px")>-1) {
					valWidth = valWidth.substring(0,valWidth.indexOf("px"));
					valWidth = parseFloat(valWidth);
					valWidth = valWidth * cvjs_MinWidthSVG;
				}
				else
					valWidth = valWidth * cvjs_MinWidthSVG;
//console.log(cvjs_SVGLineThicknessArray[prop]+"  "+currentZW_zoomFactor+"  "+cvjs_zeroWidthScaleFactor);
				jQuery(target).css("stroke-width", cvjs_SVGLineThicknessArray[prop] * currentZW_zoomFactor * cvjs_zeroWidthScaleFactor);
			}

		}catch(err){}

	}
	
	// set the pointRadius
	//jQuery(".ZW").css("stroke-width", 0.6 * currentZW_zoomFactor*2.0 * cvjs_zeroWidthScaleFactor);
	
	if (currentZW_zoomFactor<0.5){
		if (currentZW_zoomFactor<0.25){
			if (currentZW_zoomFactor<0.1)
				jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *4.0 * cvjs_zeroWidthScaleFactor);
			else
				jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *3.0 * cvjs_zeroWidthScaleFactor);
		}
		else
			jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *2.0 * cvjs_zeroWidthScaleFactor);			
	}else 
		jQuery(".tmsPoints").css("r", 0.3 * currentZW_zoomFactor *1.0 * cvjs_zeroWidthScaleFactor);
	 
}

		
